<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😀😍😉 JS의 개발 블로그 😁😆😄</title>
    <description>나만의 공간</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Jul 2019 18:09:04 +0900</pubDate>
    <lastBuildDate>Mon, 22 Jul 2019 18:09:04 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>(Xcode) Configuration 파일 다루기 - (개념)</title>
        <description>&lt;p&gt;오늘의 주제의 제목은 뭔가 애매하다&lt;/p&gt;

&lt;p&gt;하지만 Configuration 파일을 잘 이용하면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;같은 앱 다중설치&lt;/li&gt;
  &lt;li&gt;서버 변경 방식&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등등을 유용하게 쓰일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;어쩌다-포스팅하게-되었나&quot;&gt;어쩌다 포스팅하게 되었나?&lt;/h1&gt;

&lt;p&gt;회사 앱중 전자 식권 앱이 있는데, 개발을 하다보니 서버를 왔다, 갔다 할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;그런데, 다음과 같은 문제들이 발생했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서버가 다르다 보니 로그인이 자꾸 풀려서 재로그인해야한다, 귀찮&lt;/li&gt;
  &lt;li&gt;개발 서버 깔고 나갔다가, 결제 직전 알아차려서 앱스토어에서 다시 받아야하는 귀차니즘 발생&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서, 예전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Let's Swift 2017&lt;/code&gt; 이란 Swift 컨퍼런스에서 봤던 세션이 기억이 났다.&lt;/p&gt;

&lt;p&gt;(여러번 시도했었지만 실패,,, 하지만 성공했으니 포스팅을 아하하, 해당 세션 Toss개발자님 사랑합니다. 토스 가고싶어요)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;같은 문제점을 역시나 고민하고 계신 선배 개발자분들이 계셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;핵심은-configuration-파일&quot;&gt;핵심은 Configuration 파일&lt;/h1&gt;

&lt;p&gt;서버 변경, 앱 다중 설치 등등을 Configuration 파일 설정 외에는 다음과 같은 방식들을 알고 있었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scheme 추가&lt;/li&gt;
  &lt;li&gt;Target 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;각각 단점이 보였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-scheme&quot;&gt;1. Scheme&lt;/h3&gt;

&lt;p&gt;이건 선택 가능 옵션이 Release? or Debug? 뿐이었다, 그렇단건 코드에서 아래와 같은 조건으로 주소 변경만 될뿐, 앱을 나눌수 없는거 같다&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var address: String = &quot;&quot;
#if DEBUG
    address = &quot;www.dev.com&quot;
#else
    address = &quot;www.dis.com&quot;
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 주소를 변경할 수 있었다. 하지만! 정작 중요한 앱나누기가 안댐.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PASS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-target-추가&quot;&gt;2. Target 추가&lt;/h3&gt;

&lt;p&gt;이건 좀 괜찮아보였다. Build Setting이 별도이므로, Bundle ID만 따로 해주면 앱 2개 설치도 되며, 손쉽게 변경이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 문제점 있음!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;문제점1: Build Setting이 별도라는건, 수정해야할게 두가지라는 점.&lt;/li&gt;
  &lt;li&gt;문제점2: 새로 파일을 만들경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Target Memebership&lt;/code&gt;을 다 체크해줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Target Membership 체크해야하는 화면)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 위에서 언급한 세션 기억이 났고, 이거다! 싶었다.&lt;/p&gt;

&lt;h1 id=&quot;configuration-파일이란&quot;&gt;Configuration 파일이란?&lt;/h1&gt;

&lt;p&gt;깃블로그 하다보니  &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 파일에 주로 속성?값이라 해야하나 그런것들이 적혀있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;블로그 타이틀&lt;/li&gt;
  &lt;li&gt;블로그 부제&lt;/li&gt;
  &lt;li&gt;Analytics key값&lt;/li&gt;
  &lt;li&gt;페이징 갯수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등등 뭔가 앱으로 치면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름&lt;/li&gt;
  &lt;li&gt;서버 URL&lt;/li&gt;
  &lt;li&gt;Bundle ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런것들이 들어가기 딱인 느낌이었고, 앱에도 그런 파일이 존재했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;where&quot;&gt;Where?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TARGET이 아닌 PROJECT의 Build Setting을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Level&lt;/code&gt; 형태로 보면  &lt;strong&gt;Configurations&lt;/strong&gt;라는곳이 존재하고 여기에 셋팅을 해주게 된다.&lt;/p&gt;

&lt;p&gt;여기서 눈여겨봐야 할 점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;의 하위 - &lt;strong&gt;Project&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt;의 하위 - &lt;strong&gt;Target&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;속해있다는 점을 잘보고, &lt;strong&gt;Target&lt;/strong&gt;의 &lt;strong&gt;Build Setting&lt;/strong&gt;을 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;빨간 영역을 보면, Resolved - Target - Config - Project 로 되어있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Resolve- 결정하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Resolved&lt;/strong&gt; 는 결정했다! 정도로 보면 될텐데, 무엇을 결정했다는 것일까.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결론적인 예를 들면 이런것이다,&lt;/p&gt;

&lt;p&gt;각각 단계에서 앱 이름을 정의 했다 가정을 하자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 뭔가 결정이 나야하고 여기서는 가장 최하위단에서 적용한것이 이름이 되므로,&lt;/p&gt;

&lt;p&gt;위와 같은 경우 앱 이름은 &lt;strong&gt;C&lt;/strong&gt;라고 표출이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 클래스 상속과 같은 상속이 존재하며, $(inherited) 라고 써주면 바로 전단계가 적용된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$(inherited) 같은 경우는 Build Setting에서 많이 보인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 좀더 예를 들어보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; 이름 비어있음&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 없음 (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 없음 (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; B&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; 이름 비어있음&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; A&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이정도면 예시는 됐으려나, 어찌 됐든 중요한건 &lt;code class=&quot;highlighter-rouge&quot;&gt;$(inherited)&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;그럼 이걸 이제 어떻게 써먹을지 보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;config-활용&quot;&gt;Config 활용&lt;/h1&gt;

&lt;p&gt;이런건 그림이 이해하기 제일 좋을것 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 여기서 중요한것임 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 이것만 봐도 될정도 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 핵심임 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Target은 $(inherited)&lt;/li&gt;
  &lt;li&gt;Config를 A 혹은 B로 변경해줌으로써 서버와 앱이름등등을 바꿔준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그렇담 어케 적용하는지는 다음편에!!!&lt;/p&gt;

&lt;p&gt;크큭크ㅋᄏᆨ큭-크ㅡ큭&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2019/07/22/swift-Configuration-%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF-%E1%84%83%E1%85%A1%E1%84%85%E1%85%AE%E1%84%80%E1%85%B5-(%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7).html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2019/07/22/swift-Configuration-%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF-%E1%84%83%E1%85%A1%E1%84%85%E1%85%AE%E1%84%80%E1%85%B5-(%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7).html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Swift) FileManager</title>
        <description>&lt;p&gt;오늘의 주제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰게된 이유는 다음과 같다,&lt;/p&gt;

&lt;p&gt;사이드 프로젝트를 하고 있는데, Photo kit 관련 해본 경험이 없어서, 이 부분을 직접 써볼려고 앨범 라이브러리를 안쓰는데,&lt;/p&gt;

&lt;p&gt;영상, 이미지, 라이브포토를 앱내에 저장하는 방법이 필요했다.&lt;/p&gt;

&lt;p&gt;NSData로 캐스팅해서 Core Data에 넣으려했는데, 이건 좀 아닌거 같아서 여기저기 물어본 결과&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;바이너리 파일(이미지, 영상 등등)&lt;/strong&gt;은 &lt;strong&gt;파일&lt;/strong&gt;에 저장하고,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메타데이터(사진 정보, 관련 정보)&lt;/strong&gt;만 &lt;strong&gt;Core data&lt;/strong&gt;에 저장시키는 방식이 가장 많이 쓰인다고 해서 써보게 됐다.&lt;/p&gt;

&lt;h1 id=&quot;순서&quot;&gt;순서&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File Manager&lt;/code&gt;란?&lt;/li&gt;
  &lt;li&gt;폴더 추가 방법은?&lt;/li&gt;
  &lt;li&gt;파일 추가 방법은?&lt;/li&gt;
  &lt;li&gt;파일 불러오는 방법은?&lt;/li&gt;
  &lt;li&gt;파일 삭제하는 방법은?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;file-manager란&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File Manager&lt;/code&gt;란?&lt;/h1&gt;

&lt;p&gt;아이폰 앱마다 자기만의 공간을 가지고 있는데, 이 공간을 관리하는 매니저라 생각하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;이 공간은 일반 맥, 윈도우처럼 Document 폴더, Download폴더 등등 다양한 종류의 폴더가 있다!&lt;/p&gt;

&lt;p&gt;이 글에선 Document폴더를 사용하여 이것 저것 해보려한다.&lt;/p&gt;

&lt;h1 id=&quot;경로-접근&quot;&gt;경로 접근&lt;/h1&gt;

&lt;p&gt;다른 작업들 하기전 공통 사항인 해당 폴더로 접근 하는 방법을 먼저 알아보자&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let fileManager = FileManager.default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fileManager&lt;/code&gt;라는 인스턴스를 만들어준다. (default를 해줌으로써 싱글톤 인스턴스!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let documentURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;는 폴더를 정해주는 요소입니다. Download 폴더 혹은 Document 폴더 등등&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;은 제한을 걸어주는 요소입니다. 그 이상은 못가게 하는!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;About - Mask&lt;/strong&gt;&lt;br /&gt;
view.layer.masksToBounds = true 많이 보셨을 겁니다.  &lt;br /&gt;
그렇게 하면 Bound 밖의 UI들은 안보이는!!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;의 인자들 이름에 붙은 &lt;strong&gt;Mask&lt;/strong&gt;는 이런 의미라 생각하면 좋을 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
애플이 주석을 굉장히 잘써놨으므로 좀더 디테일하게 보자,&lt;/p&gt;

&lt;h3 id=&quot;for-enum-값들-objective-c-enum&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; enum 값들 (Objective C Enum)&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;documentDirectory   // documents (Documents)
developerDirectory  // (Developer) DEPRECATED - there is no one single Developer directory.
desktopDirectory    // location of user's desktop
downloadsDirectory  // location of the user's &quot;Downloads&quot; directory
musicDirectory      // location of user's Music directory (~/Music)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;굉장히 설명을 잘해놨고, 굉장히 많다.  그 중  친숙해 보이는 몇개만 가져왔다. 이런식으로 접근 폴더를 지정해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-enum-값들-swift-enum&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; enum 값들 (Swift Enum)&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static var userDomainMask: FileManager.SearchPathDomainMask { get } 
// user's home directory --- place to install user's personal items (~)

public static var localDomainMask: FileManager.SearchPathDomainMask { get } 
// local to the current machine --- place to install items available to everyone on this machine (/Library)

public static var networkDomainMask: FileManager.SearchPathDomainMask { get } 
// publically available location in the local area network --- place to install items available on the network (/Network)

public static var systemDomainMask: FileManager.SearchPathDomainMask { get } 
// provided by Apple, unmodifiable (/System)

public static var allDomainsMask: FileManager.SearchPathDomainMask { get } 
// all domains: all of the above and future items
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널을 조금이라도 써봤다면 뒤에 괄호만 봐도 쉽게 이해할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;센스있게 저렇게 표현해주니 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;경로-추가&quot;&gt;경로 추가&lt;/h1&gt;

&lt;p&gt;키워드:  &lt;code class=&quot;highlighter-rouge&quot;&gt;appendingPathComponent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;아주 간단하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let newURL = documentsURL.appendingPathComponent(&quot;App Photos&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 예를 써보면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let oldURL = URL(string: &quot;~/Document&quot;)
let newURL = documentsURL.appendingPathComponent(&quot;Hello&quot;)
print(newURL) // ~/Document/Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아주 간단!&lt;/p&gt;

&lt;h1 id=&quot;폴더-추가-방법은&quot;&gt;폴더 추가 방법은?&lt;/h1&gt;

&lt;p&gt;키워드: &lt;code class=&quot;highlighter-rouge&quot;&gt;createDirectory&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성
let fileManager = FileManager.default
// 2. 도큐먼트 URL 가져오기
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
// 3. 생성할 폴더 이름 추가해주기
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)
// 4. 생성하기
do {
    try fileManager.createDirectory(at: directoryURL, withIntermediateDirectories: false, attributes: nil)
} catch let e {
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것도 아주 간단!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; : 경로 및 폴더명, 위에서 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withIntermediateDirectories&lt;/code&gt; : “중간 디렉토리들도 만들꺼야?” 이런 의미.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attributes&lt;/code&gt; : 파일 접근 권한, 그룹 등등 폴더 속성 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 말해, 현재 존재하는 폴더가 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Document&lt;/code&gt;만 있는 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;appendingPathComponent&lt;/code&gt;를 여러번해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Document/path1/path2/path3&lt;/code&gt;로 만들었다고 가정하면, 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;값에 따라 성공, 실패가 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withIntermediateDirectories: true&lt;/code&gt; - 중간 디렉토리인 &lt;code class=&quot;highlighter-rouge&quot;&gt;path1/path2&lt;/code&gt;도 만들고 &lt;code class=&quot;highlighter-rouge&quot;&gt;path3&lt;/code&gt;까지 만든다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withIntermediateDirectories: false&lt;/code&gt; - 중간 디렉토리가 존재하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;로 빠진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;파일-추가-방법은&quot;&gt;파일 추가 방법은?&lt;/h1&gt;

&lt;p&gt;키워드: &lt;code class=&quot;highlighter-rouge&quot;&gt;write(to:_, atomically:_, encoding:_)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일 저장할 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. File 이름 설정
let fileURL = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// 5. File 내용
let text = NSString(string: &quot;Hello world&quot;)

do {
    // 6-1. 파일 생성
    try text.write(to: fileURL, atomically: true, encoding: String.Encoding.utf8.rawValue)
} catch let e {
    // 6-2. 오류 처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSString&lt;/code&gt;에 내부 함수로 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt;가 존재하며, 이를 이용해서 &lt;strong&gt;쓰기&lt;/strong&gt;를 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt;: 위에 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;을 써주면 그대로 생성.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atomically&lt;/code&gt;: 이거 뭔지 모르겠,,, 읽어도 모르겠,,, 다만, &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;면 URL이 존재 안해도 시스템상 손상이 없단 뉘앙스를 풍기므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;만,,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encoding&lt;/code&gt;: 인코딩 종류!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 에러가 났던게 파일 경로가 미존재시 “The file “test.txt” doesn’t exist.” 라고 catch로 간다.&lt;/p&gt;

&lt;p&gt;test.txt는 파일을 이제 만들라는건데 왜 없다고 그래,,? 라고 한참 생각했는데, 다른 테스트하느라 경로를 잘못 셋팅했었다.&lt;/p&gt;

&lt;p&gt;허허,, 중간에 다른 경로가 없는건데, 저렇게 설명을 하다니… 그래도 보면 간단하게 이루어진단걸 알 수 있다.&lt;/p&gt;

&lt;p&gt;여기서 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 할 경우엔, 덮어 씌웠었다.&lt;/p&gt;

&lt;h1 id=&quot;파일-불러오는-방법은&quot;&gt;파일 불러오는 방법은?&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일이 있는 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. 불러올 파일 설정
let helloPath = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// Try Catch
do {
    // 5-1. 불러오기
    let text = try String(contentsOf: helloPath, encoding: .utf8)
    print(text) // Hello world
} catch let e {
    // 5-2. 에러처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이건 쓰기보다 간단!&lt;/p&gt;

&lt;h1 id=&quot;파일-삭제하는-방법은&quot;&gt;파일 삭제하는 방법은?&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일이 있는 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. 삭제할 파일 설정
let helloPath = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// Try Catch
do {
    // 5-1. 삭제하기
    try fileManager.removeItem(at: fileURL)
} catch let e {
    // 5-2. 에러처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;관리를 담당하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;fileManager&lt;/code&gt;에게 시켜서 삭제를 시키면 깔끔.&lt;/p&gt;

&lt;p&gt;이후 그 파일을 불러오면 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;가 발생한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The file “test.txt” couldn’t be opened because there is no such file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h1&gt;

&lt;h3 id=&quot;q--텍스트-말고-이미지나-gif-등등-다른건-어떻게&quot;&gt;Q . 텍스트 말고 이미지나 GIF 등등 다른건 어떻게??&lt;/h3&gt;
&lt;p&gt;A. NSData 형식으로!&lt;/p&gt;

&lt;p&gt;아래처럼하면 어떤것이든 &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;형으로 손쉽게 변경가능!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Archive Data
let archivedData = NSKeyedArchiver.archivedData(withRootObject: file)

// Unarchive Data
let unarchivedData = NSKeyedUnarchiver.unarchiveObject(with: file as Data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;q-애플-내장-앱중-file-app-이랑-관련이-있나&quot;&gt;Q. 애플 내장 앱중 &lt;code class=&quot;highlighter-rouge&quot;&gt;File App&lt;/code&gt; 이랑 관련이 있나?&lt;/h3&gt;
&lt;p&gt;A. Yes, 프로젝트내에 설정을 하면,  &lt;code class=&quot;highlighter-rouge&quot;&gt;File App&lt;/code&gt;이 해당 어플에 접근할 수 있게 된다!&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2019/07/11/swift-File-Manager.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/07/11/swift-File-Manager.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Swift) setNeedsLayout() VS layoutIfNeeded() (feat. animation)</title>
        <description>&lt;p&gt;참고:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zeddios.tistory.com/359?category=682195&quot;&gt;zedd님 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained&quot;&gt;어느 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;막연하게 layoutIfNeeded() 를 써왔었는데, 볼때마다 유사해 보이는 setNeedsLayout()은 뭘까 싶었다,&lt;/p&gt;

&lt;p&gt;updateConstraints()도 궁금하고, 비슷한 다른것들도 궁금하지만, 자료좀 찾아보니 저둘이 비교하는게 많았기에 정리!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Zedd&lt;/code&gt;님 블로그가 너무 정리가 잘되어있어서 기본적인건 간단하게 설명하고, 이해력이 딸려 살짝 갸우뚱 했던 부분들을 적어야겠다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;들어가기전-먼저-알아야-이해가-되는것&quot;&gt;들어가기전 먼저 알아야 이해가 되는것!&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Life cycle&lt;/code&gt;중 view layout을 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; 해주는 부분이 있다고 한다! 글들을 보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews()&lt;/code&gt;가 그 역할인가보다. (Zedd님 감사합니다)&lt;/p&gt;

&lt;p&gt;근데 말 그대로, Cycle이다, 한번 지나가면 나중에 오는 그런것! 요게 포인트다.&lt;/p&gt;

&lt;p&gt;또한 해당 싸이클이 왔어도 그 view의 layout이 무효화 되있어야 새로 짜는것 같다&lt;/p&gt;

&lt;p&gt;그래서, Constraint를 수정해도 바로 적용이 안되고,&lt;/p&gt;

&lt;p&gt;SetNeedsLayout() 또는 LayoutIfNeeded() 를 해서 적용을 해줘야 했나보다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;setneedslayout&quot;&gt;setNeedsLayout()&lt;/h1&gt;

&lt;h3 id=&quot;point&quot;&gt;Point&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Async&lt;/li&gt;
  &lt;li&gt;대기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에서 무효화가 돼있어야 한다고 적었는데, 무효화 하는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;을 써주는 것이다.&lt;/p&gt;

&lt;p&gt;“해당 view 다음 사이클때 업데이트 해줘” 라는 의미며, &lt;a href=&quot;http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained&quot;&gt;참고 2번 사이트&lt;/a&gt;에 의하면, 그 &lt;code class=&quot;highlighter-rouge&quot;&gt;subviews&lt;/code&gt;도 업데이트가 된다.&lt;/p&gt;

&lt;p&gt;바로 바뀌지 않으며 대기 상태이고, 비동기로 진행된다, 그리고 &lt;strong&gt;이 cycle은 언제오는지 알기 힘들다고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–2번 사이트 표현–&lt;br /&gt;
“please update but you can wait until the next update cycle”&lt;br /&gt;
업데이트 해줘, 근데 다음 업데이트까지 기다릴게&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;layoutifneeded&quot;&gt;layoutIfNeeded()&lt;/h1&gt;
&lt;h3 id=&quot;point-1&quot;&gt;point&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sync&lt;/li&gt;
  &lt;li&gt;즉시&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;차이점이라면 동기로 진행되고, 다음 cycle이 될때까지 기다리지 않고 바로 업데이트 시킬때 쓸 수 있다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–2번 사이트 표현–&lt;br /&gt;
“update immediately please”&lt;br /&gt;
업데이트 해줘, 당장!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;예시를-통한-이해&quot;&gt;예시를 통한 이해&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Zedd&lt;/code&gt;님께서 이 &lt;a href=&quot;https://github.com/lmacfadyen/UIViewLifecycleLayoutDisplay&quot;&gt;링크&lt;/a&gt;를 추천해주셨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;은 다음 업데이트때 기다릴게!&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;은 지금 당장 업데이트 해줘!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결론은 “둘다 새 값으로 업데이트 해줘!” 로 이해를 했다. 근데 이렇게 생각하니 잘 이해가 안됐다,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.blueHeight.constant = 100

UIView.animate(withDuration: 2.0, animations: {
    self.view.setNeedsLayout()
    // 또는
    self.view.layoutIfNeeded()
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예제에서 이게 이해가 안된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;는 높이값 &lt;code class=&quot;highlighter-rouge&quot;&gt;constant&lt;/code&gt;가 변경 되었을때, 애니메이션 효과가 보이면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;값이 바뀐다.&lt;/p&gt;

&lt;p&gt;반면, &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;은 애니메이션 효과없이 바로 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;값이 적용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기존값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, 새값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;이라 해보자, 둘다 &lt;code class=&quot;highlighter-rouge&quot;&gt;constant&lt;/code&gt;가 100으로 됐다는 의미다.&lt;/p&gt;

&lt;p&gt;그럼 위에 서술한 내용들을 붙여보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt; : 100으로 바꿨어, 다음 업데이트때 적용해줘&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;: 100으로 바꿨어, 당장 바꿔줘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 생각을 해서 이해가 안됐다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왜 이해가 안됐는지 적어보면,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;결국엔 이미 애니메이션 호출전 &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;으로 선언해줬으니  애니메이션 시작할때면, 이미 100아닌가?? 그럼 cycle돌다가 업데이트할때 이미 100인거 같아! 근데 애니메이션 주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;는 효과가 있다? 그럼 애니메이션동안 cycle이 적용 안된건가? 그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;은 2초 뒤에 값이 바뀌어야하는것 아닌가?!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이상한점: &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;이 2초뒤가 아닌 시작하자마자 값이 바뀜??? 잉 아예 틀려버림&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;1번이 이상했다, 시작과 동시에 cycle이 돈거라면 height는 &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;으로 이미 박혀있는거고 적용이 된거다? 근데! 이미 100이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt; 도 cycle 시작시 이미 100이니깐, 점점 100이 되는게 아니라, 이미 100이겠네?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이상한점: 왜 애니메이션 효과가 적용된거지? 바로 100으로 되야하는거 아닌가?!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;바보였다. 글쓸때까지도 잘 못 이해하고 있었다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;원인-파악&quot;&gt;원인 파악&lt;/h1&gt;

&lt;h3 id=&quot;point_a&quot;&gt;Point_A&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update cycle&lt;/code&gt;은 돌고 돈다, 유저는 알 수 없다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다, 나는 알 수 없었다…&lt;/p&gt;

&lt;p&gt;이걸 빼먹고 생각하니 이상한 추론만 했다.&lt;/p&gt;

&lt;p&gt;중점은 이거다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;point_b&quot;&gt;Point_B&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;animations 블록 안에 내용이 animation 효과가 적용된다,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;point_c&quot;&gt;Point_C&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;는 다음 update cycle때.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;는 즉시.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
포인트 B와 C를 섞어서 보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;animation 블럭 내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout&lt;/code&gt;은 다음번에 update cycle 때 해달라고 요청한다. &lt;strong&gt;즉, 지금 한것은 요청만함.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;animation 블럭 내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;는 즉시 update를 요청한다, 블럭 내에서! &lt;strong&gt;즉, 지금 요청과 동시에 변화가 시작된다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
포인트는 블럭내에서 요청만 했느냐, 요청 + 적용이 되었느냐 였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 &lt;code class=&quot;highlighter-rouge&quot;&gt;height = 0&lt;/code&gt; 이었고 신규값 &lt;code class=&quot;highlighter-rouge&quot;&gt;height = 100&lt;/code&gt;은 요청 사항이었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded()&lt;/code&gt;는 그 값이 animation때 적용했기에 &lt;code class=&quot;highlighter-rouge&quot;&gt;0~100&lt;/code&gt;이 되는 과정이 animation으로 보였다.&lt;/p&gt;

&lt;p&gt;그런데, &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;의 경우  animations 블럭에선 요청만 했기에 별다른 UI적으로 변경 요소가 없었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그렇다면, 한번에 바뀐건 어떻게 생각할까? &lt;strong&gt;Point_A&lt;/strong&gt;가 해답이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Animations 블럭&lt;/code&gt;이 지난후 cycle이 돌다가 update cycle이 된것이라 본다.&lt;/p&gt;

&lt;p&gt;그렇기에 해당사이클은 &lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout()&lt;/code&gt;이 요청한 &lt;code class=&quot;highlighter-rouge&quot;&gt;height = 100&lt;/code&gt;을 적용한것이며,&lt;/p&gt;

&lt;p&gt;이는 애니메이션과 관련이 없기에 한번에 적용된것이다.&lt;/p&gt;

&lt;p&gt;사람 눈이 착각한 느낌이랄까? 시각적으론 &lt;code class=&quot;highlighter-rouge&quot;&gt;height = 100&lt;/code&gt;이 적용되고 애니메이션이 시작된것 같지만&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animations 블럭&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; 요청&lt;/li&gt;
  &lt;li&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;update cycle&lt;/code&gt; 적용 &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;animation&lt;/code&gt; 진행중…&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animation&lt;/code&gt; 진행중 … 끝&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 되는게 맞다고 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cycle을 내가 컨트롤하지 않아서 생각을 못했다. 완전 바보였다….&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2019/07/09/swift-setNeedsLayout()-VS-layoutIfNeeded()-(feat.-animation).html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/07/09/swift-setNeedsLayout()-VS-layoutIfNeeded()-(feat.-animation).html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Tool) Fastlane Lane 사용법</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이전 포스팅&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://jiseobkim.github.io/tool/2019/03/30/Tool-Fastlane을-알아보자.html&quot;&gt;Fastlane 개념&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://jiseobkim.github.io/swift/2019/04/21/Tool-Fastlane-설치-방법.html&quot;&gt;Fastlane 설치 방법과 1개월 사용 후기&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;포스팅 할건 많은데, 느낌이 왔을때 새로 쓰는게 나을지, 아니면 이것처럼 시작한것은 끝내고 쓰는게 좋을지 모르겠다.
뭔가 읽을때는 순차적인게 좋을듯 한데, 느낌이 왔을때 바로 못쓰니 김새는 느낌이 있다.
잡담 끝.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;lane에-대하여&quot;&gt;Lane에 대하여&lt;/h1&gt;

&lt;p&gt;FastLane의 꽃은 Lane이 아닐까 하는 생각이 든다.
FastLane의 장점은 Xcode에서 여러번 클릭을 여러번 해야하는 부분들을 명령어 하나로 해결해주는 점인듯 했다.&lt;/p&gt;

&lt;p&gt;그리고, 그 단순화 과정 마저도 한번에 묶어주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lane&lt;/code&gt;, 그래서 꽃이라 칭해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
명령어 몇가지를 보자&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Derived 파일 제거&lt;/strong&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane action clear_derived_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IPA 추출하기&lt;/strong&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane gym
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Derived 제거&lt;/code&gt; 관련의 경우, 가끔 빌드시 문제가 생길시 여기 파일을 지워주면 해결되는 경우가 많다. 빌드시 계속 생성되기 때문에 언제든 지워도 되는 파일!
&lt;code class=&quot;highlighter-rouge&quot;&gt;IPA 추출&lt;/code&gt;은 TestFlight를 안쓴다면 사내 테스트용으로 필요로 뽑아두는 분들이 많을거라 생각된다. 명령어 하나로 손쉽게 추출!
(IPA 추출의 경우 dSYM 파일도 같이 나온다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;두 명령어다 아주 좋은 명령어이다. 그렇지만 사람은 언제나 귀찮은 작업 하나라도 줄이려는게 분명하다.
위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;IPA 추출&lt;/code&gt;을 했을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Clean&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Derived 제거&lt;/code&gt;를 같이 할 경우가 많다.
한줄 한줄 입력하는것도 귀찮았나보다. 그래서 여러가지 명령어를 한번에 실행하고 싶었던걸까?&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lane&lt;/code&gt;이라는 것이 나온듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;lane-생성하기&quot;&gt;Lane 생성하기&lt;/h1&gt;
&lt;p&gt;이전 포스팅 내용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane init&lt;/code&gt;을 했다면, 해당 프로젝트 폴더내에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 이라는 폴더가 있으며, 그안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt;이란 파일이 존재한다. 
내용은 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc &quot;Description of what the lane does&quot;
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(#) 부분은 한번쯤 읽어보면 되고,
&lt;br /&gt;
중요한 부분은 여기다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc &quot;Description of what the lane does&quot;
lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;의 기본 틀이라 보면 되고, 각 설명은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;desc&lt;/strong&gt;: lane에 대한 설명.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;custom_lane&lt;/strong&gt;: lane를 실행시킬 명령어.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;do ~ end&lt;/strong&gt;: 이 lane으로 인해 실행될 명령어들을 정의.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;
위에 예를 들었던 명령어 두개를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;을 생성해보자&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc &quot;Test Lane&quot;
lane :test_lane do
    clear_derived_data
    gym
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게하면 생성완료!
&lt;br /&gt;
그 후에 아래 명령어를 실행하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane test_lane
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_lane&lt;/code&gt;내의 명령어들이 순차적으로 진행되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;그런데, 여기서 끝나면 아쉬울것이다. gym(아카이브) 명령어를 실행할때 옵션을 주는 경우가 필요하다.&lt;/p&gt;

&lt;p&gt;예를 들면 인증서를 선택(Distribution/Adhoc/Development)해야하는 경우도 필요하며, 아카이브 전에 빌드 클린은 필요하기에
이러한 명령어들에 대한 옵션들이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;lane-명령어에-옵션주기&quot;&gt;Lane 명령어에 옵션주기&lt;/h1&gt;

&lt;p&gt;옵션 주는것은 간단하다. 해당 명령어 뒤에 괄호()를 열어 주고 적으면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc &quot;Test Lane&quot;
lane :test_lane do
    clear_derived_data
    gym(
        scheme: &quot;Foo&quot;,
        export_method: &quot;ad-hoc&quot;,
        clean: true,
        output_directory: &quot;path/to/dir&quot;
    )
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gym&lt;/code&gt;뒤에 괄호를 열어줬고, 그 안에 옵션들을 나열했다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;scheme&lt;/strong&gt;: 해당 프로젝트의 타겟을 설정해준다. (한 workspace안에 여러 앱이 있을 경우 필요하다.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;export_method&lt;/strong&gt;: 인증서 옵션 주는 부분이다. (종류: app-store, ad-hoc, package, enterprise, development, developer-id)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt;: 빌드 클린 여부이다, true or false 주면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output_directory&lt;/strong&gt;: 결과물들을 저정할 위치를 셋팅해주는 값이다. (안적으면 해당 프로젝트 폴더)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ps&quot;&gt;PS.&lt;/h1&gt;
&lt;p&gt;마지막 부분처럼 옵션이 생기면, 생각보다? 줄이 길어진다. 외우기도 힘들며, 하나가 아니라 여러게 생길수 있다. 
하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;덕에 미리 셋팅만 해둔다면, 단 1줄의 명령어로 끝낼 수 있다.&lt;/p&gt;

&lt;p&gt;슬랙으로 알림도 줄 수 있고, 알아서 스크린샷도 찍어주고, 추출도 해주고, 업로드도 해주고, 인증서 관리부터 생성까지 해주니
알아두면 좋은 도구임은 확실한듯하다. 나중에 고급편도 포스팅 해야겠다.&lt;/p&gt;

&lt;p&gt;이걸로 &lt;em&gt;fastlane&lt;/em&gt;은 일단 끝!&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tool/2019/04/28/Tool-FastLane-Lane-%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8.html</link>
        <guid isPermaLink="true">http://localhost:4000/tool/2019/04/28/Tool-FastLane-Lane-%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8.html</guid>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>(Tool) Fastlane 기본 설치 방법과 1달 사용후기</title>
        <description>&lt;p&gt;설치는 글내용이 별로 없을듯 하니 짧게 나마 사용 후기를 같이 써보고자 한다.&lt;/p&gt;

&lt;p&gt;지난 글에는 Fastlane의 개념을 간략히 알아 보았다.  &lt;a href=&quot;https://jiseobkim.github.io/tool/2019/03/30/Tool-Fastlane을-알아보자.html&quot;&gt;지난글: Fastlane을 알아보자&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;1달-사용-후기&quot;&gt;1달 사용 후기&lt;/h1&gt;
&lt;p&gt;설치 방법을 알아보기전, 회사에서 사용해본 장단점을 먼저 얘기하자면,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;IPA 추출할때, 셋팅을 걱정할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;IPA 추출을 하는 동안 맥북 앞에 앉아있을 필요가 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;생각보다 사용할 일이 적어서 익숙해지기 힘들다.&lt;/li&gt;
  &lt;li&gt;아직 기능의 반의 반의 반도 못쓰는 기분이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 장점 부분을 얘기하자면,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;장점 1. IPA 추출할때, 셋팅을 걱정할 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
실제 IPA를 추출하다보면 과정들이 은근 신경 써야한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;빌드 클린은 했나?&lt;/li&gt;
  &lt;li&gt;빌드 타겟은 잘맞췄나?&lt;/li&gt;
  &lt;li&gt;아카이브 하는 동안 인증서 선택은 잘했나?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 사소하지만 은근~히 신경이 쓰이는 것들이 필요한데, 이미 모든 작업을 어떻게 진행 할지 셋팅을 했기 때문에
IPA로 추출을 할때 터미널에 명령어 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane IPA_Adhoc&lt;/code&gt; (IPA_Adhoc은 미리 작성한 Lane)만 입력해주면, 손쉽게 파일 추출이 끝난다. 신경 쓸것은 Adhoc, Development, Distribution 등등 미리 작성해둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lane&lt;/code&gt; 이름만 생각 해내면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;장점 2. IPA 추출을 하는 동안 맥북 앞에 앉아있을 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2의 경우는 1의 연장선이라고도 볼수있다. 아카이브 하고 추출까지 프로젝트 사이즈에 따라 다르지만, 3분~5분 정도였던것 같다. 그렇지만, 1에서 본것과 같이 중간 중간 버튼을 누른다던가 인증서를 선택 등등 할일이 있다, 그래서 짧다면 짧지만, 길다고 볼수도 있는 시간동안 맥북 앞에서 기다리고 있어야 한다.
그치만 이 귀찮은 행동은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;을 사용함으로써 해결이 되었다. 명령어 치고 화장실도 다녀오고, 물도 마시고 돌아오면 추출이 끝나있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단점이라 하기엔 애매하지만!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;단점 1. 생각보다 사용할 일이 적어서 익숙해지기 힘들다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;은 배포, 추출, 인증서 관리 등등 도와주는 편리한 도구이다, 하지만 그것들을 할일이 자주 있는편이 아니다.
자주 써야 익숙해지던가 할텐데, 한 3번 정도 썼나,,,? 그러다보니 한달가량 썼지만 아직도 친숙함이 안느껴진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점 2. 아직 기능의 반의 반의 반도 못쓰는 기분이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이건 단점이라 적긴 했지만, 나의 귀차니즘이 크긴 했지만 1에서 말한바와 같이 잘 쓸일이 없었기에 순간 아쉬운점이 있어도 자주 안쓰니 까먹고 기능을 추가 안했다.. (쓰고보니 변명)
써봐야겠다 생각드는 기능은 아래와 같았다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;슬랙으로 작업 완료 알리기&lt;/li&gt;
  &lt;li&gt;인증서 Git Hub로 관리&lt;/li&gt;
  &lt;li&gt;자동 심사 제출&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt; 
좀더 쓰게 되면 더 적어봐야지&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h1&gt;
&lt;p&gt;가장 좋은건 아무래도 공식 사이트 문서라 생각하므로 첨부! &lt;a href=&quot;https://docs.fastlane.tools/getting-started/ios/setup/&quot;&gt;공식 설치 문서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;문서가 잘나와 있으니, 문서에 없는 세세한거라도 설명 추가!&lt;/p&gt;

&lt;h2 id=&quot;기본-단계&quot;&gt;기본 단계&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;순서 1 커맨드 라인 툴 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이것을 안하면 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 명령어 사용시 오류 발생할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;strong&gt;순서 2 Ruby Gem을 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt; 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sudo : 높은 권한으로 설치하기 위해!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install fastlane -NV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;strong&gt;순서 3 프로젝트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 적용(초기화)하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cocoapod을 사용해보았다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;이랑 같은 개념&lt;/li&gt;
  &lt;li&gt;꼭 적용하려는 폴더로 이동후 명령어 입력하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;init-과정&quot;&gt;init 과정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;하게 되면 몇가지 셋팅을 과정이 있다. 아래 과정은 대부분 비슷하겠지만 프로젝트 셋팅 상태에 따라 뜰수도, 안뜰수도 있는 부분도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 1. 폴더내의 project 혹은 workspace가 여러개 존재한다면?&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 폴더 내에 여러 프로젝트가 존재한다면 어떤 프로젝트에 적용할건지 물어보는 화면이다,
이런것도 판단 해주고 참 좋은 툴이네!&lt;/p&gt;

&lt;p&gt;선택지에서 골라서 해당 숫자 입력후 엔터!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 2. 사용 목적 셋팅&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 나오는 화면은 예전엔 없었나보다, 다른 블로그들에선 없었던 화면이라 당황스러웠었다.
“주 사용 목적이 스크린샷, 테스트플라이트, 배포용 어느거야?” 라고 묻는다고 보면 되고
지금 하기 싫다면 4번을 선택하면 된다, (4로 진행)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 3. 완료&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 하면 명령어들의 간단한 설명과 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;의 과정은 끝이난다.&lt;/p&gt;

&lt;p&gt;그치만 위에 말했듯이 위와 다른 설명을 보았다면, 그곳엔 저 화면들이 아닌 애플 개발자 계정 셋팅 화면이 나왔을것이다. 하지만 바뀐후 달라진건지 애플 개발자 계정 넣는 부분이 안보였다.&lt;/p&gt;

&lt;p&gt;그렇기에 그냥 진행할 경우 오류도 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;계정-셋팅&quot;&gt;계정 셋팅&lt;/h2&gt;

&lt;p&gt;위에 말했듯 계정을 따로 설정을 해줘야 한다.&lt;/p&gt;

&lt;p&gt;Xcode 내에서 해야할 일을 외부에서 처리해야하니 계정에 대한 정보는 필수다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 과정이 끝난후 설치된 폴더내에 fastlane이란 폴더가 생겼을 것이다.
 위2번 상황에서 4번을 택했으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppFile&lt;/code&gt; 항목이 생겼을 것이다. (다른것을 선택했다면 더 있을 수 있다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Appfile : 개발자 계정 설정하는 파일&lt;/li&gt;
  &lt;li&gt;Fastlane : Lane을 셋팅하는 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 역할들을 하며, Fastlane은 다음 포스팅때 하고 여기선 Appfile만!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Appfile&lt;/code&gt; 폴더의 내용은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # app_identifier(&quot;[[APP_IDENTIFIER]]&quot;) # The bundle identifier of your app
 # apple_id(&quot;[[APPLE_ID]]&quot;) # Your Apple email address
 
 
 # For more information about the Appfile, see:
 #     https://docs.fastlane.tools/advanced/#appfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 설정해야할 부분은 처음 두줄.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1,2번줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 제거&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[APP_IDENTIFIER]]&lt;/code&gt;에는 해당 프로젝트 BundleID 넣기.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[APPLE_ID]]&lt;/code&gt; 에는 개발자 계정 넣기.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
그리고나서 인증서 받기(sign), 혹은 itunesConnect에 앱생성(produce) 명령어를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane produce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;Appflie&lt;/code&gt; 에 설정한 애플 계정의 패스워드를 요구한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;애플 이중인증 사용중일시 appleid.apple.com 사이트에서 이중인증 비밀번호를 발급 받아서 입력!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 작업을 통한다면 계정 연결은 끝난것이고, 입력한 명령어를 수행하게 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위의 연결 없이 IPA추출했다가 오류가 발생했었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;중요한건 &lt;strong&gt;애플 계정 연결&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt; 
여기까지 했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;의 기본적 사용을 위한 준비는 끝이나게 되고 다음 포스팅에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt; 사용법에 대해서 포스팅할 예정이다.&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tool/2019/04/21/Tool-Fastlane-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95.html</link>
        <guid isPermaLink="true">http://localhost:4000/tool/2019/04/21/Tool-Fastlane-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95.html</guid>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>(Tool) Fastlane을 알아보자 (개념)</title>
        <description>&lt;p&gt;오늘 포스팅 주제는 Fastlane&lt;/p&gt;

&lt;p&gt;Fastlane은 자료도 굉장히 많고, 사용자도 많고, 많은 기업에서도 사용중으로 보인다
그럼 이게 뭘까? 앱에 사용되는 라이브러리는 아니고, 배포를 도와주는 프로그램, 툴이라 생각하면 좋을것 같다.&lt;/p&gt;

&lt;p&gt;아직 초짜라 기능 5%도 못쓰는것 같으니 더 배움이 쌓이면 추가 포스팅 예정!&lt;/p&gt;

&lt;p&gt;이번껀 개념정도만!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;q-배포를-도와준다는-의미는&quot;&gt;Q. 배포를 도와준다는 의미는?&lt;/h2&gt;

&lt;p&gt;많은 개발자들이 그렇듯, 귀찮고 반복적인 일은 자동화를 시키고 싶어한다,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수도 계속 반복적으로 짜기 싫고 유지보수가 힘드니 나왔겠지?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;포인트는 자동화&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이해하기엔 예시만한게 없는듯하니 예를 들어보자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ex-js님-테스트하게-ipa-말아서-서버에-올려주세요&quot;&gt;ex) JS님 테스트하게 IPA 말아서 서버에 올려주세요&lt;/h3&gt;

&lt;p&gt;Fastlane을 찾게된 이유아닐까 싶다, AdHoc으로 말아서 서버에 올린뒤 테스터들에게 요청을 드리는 작업을할때 아카이브 하는것이 시간을 은근히 잡아먹어서 귀찮은점이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기존-ipa-추출-과정&quot;&gt;기존 IPA 추출 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;타겟 설정&lt;/li&gt;
  &lt;li&gt;빌드 클린&lt;/li&gt;
  &lt;li&gt;빌드&lt;/li&gt;
  &lt;li&gt;아카이브 선택&lt;/li&gt;
  &lt;li&gt;인증서 선택&lt;/li&gt;
  &lt;li&gt;기다리기&lt;/li&gt;
  &lt;li&gt;폴더 선택&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 과정이 나만그런진 모르겠지만 귀찮다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fastlane을-이용한-ipa-추출-과정&quot;&gt;Fastlane을 이용한 IPA 추출 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;터미널 열기&lt;/li&gt;
  &lt;li&gt;명령어 입력 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;기다리기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아주 심플하다 맘에든다, 뭣보다 귀찮은 과정이 코드한줄로 끝나며, 완료되면 프로젝트 폴더에 파일들이 이쁘게 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그게-기능이-끝인가&quot;&gt;그게 기능이 끝인가?&lt;/h2&gt;
&lt;p&gt;아니다, 기능이 아주 많고, 디테일한 설정을 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;무엇을-더-할-수-있나&quot;&gt;무엇을 더 할 수 있나?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;아이튠즈 컨넥트에 앱을 추가할 수 있다.&lt;/li&gt;
  &lt;li&gt;인증서를 생성, 다운로드 할 수 있다.&lt;/li&gt;
  &lt;li&gt;인증서 관리하는 Github가 있다면, 다른 맥에서도 쓸수 있게 해당 github를 통해 매칭시키는 기능이 있다. (협업시 인증서 전달을 따로 할필요 없다)&lt;/li&gt;
  &lt;li&gt;앱 스크린샷을 자동으로 찍을 수 있다. - 아이튠즈컨넥트에 올리는 용도로 사용&lt;/li&gt;
  &lt;li&gt;IPA 파일을 쉽게 만들수 있다.&lt;/li&gt;
  &lt;li&gt;TestFlight에 빌드 제출을 할 수 있다.&lt;/li&gt;
  &lt;li&gt;TestFlight에 구성원 추가, 제거 할 수 있다.&lt;/li&gt;
  &lt;li&gt;특정 작업 완료 후 슬랙으로 알리기 가능&lt;/li&gt;
  &lt;li&gt;앱스토어 빌드 제출 할 수 있다.&lt;/li&gt;
  &lt;li&gt;Lane을 통해서 여러 기능을 묶을 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아직 IPA 추출, 인증서 생성 다운밖에 못해봤다,,&lt;br /&gt;
스토어 빌드 제출은 실패 단계,&lt;br /&gt;
매칭 기능은 성공했으나 아직 이해가 더 필요&lt;/p&gt;

  &lt;p&gt;아직 활용을 잘 못하지만, 못하는 나조차도 위와 같은 기능들을 알고 있고, 다양한걸 할 수 있단걸 알고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;10번은 설명이 더 해야할듯하다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lane을-통해서-여러-기능을-묶다는-의미는-lane이-뭐길래&quot;&gt;Lane을 통해서 여러 기능을 묶다는 의미는? Lane이 뭐길래?&lt;/h2&gt;

&lt;p&gt;우선 이 툴의 이름이 fastlane이니 유추를 해보자&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fast : 빠른 속도를 의미&lt;/li&gt;
  &lt;li&gt;lane : 차선, 통로를 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 기능들과 잘 생각해보면, 특정 기능을 빠르게 수행 해주는 것이라는 생각이 든다. 그렇담, 조금더 생각을 바꿔서&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--예시1&quot;&gt;- 예시1&lt;/h3&gt;

&lt;p&gt;위의  무엇을 할 수 있는지 나열한 것의 1~9 각 기능을 한개의 통로, 차선, lane이라 생각해보자,&lt;/p&gt;

&lt;p&gt;1번 레인 출발을 내가 외치면 1번 주자,운전자가 열심히 뛰어서, 아이튠즈 컨넥트에 앱을 추가하는 작업들을 후다닥 처리해서 완료치는것이라 생각하면 좀더 쉬울듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--예시3&quot;&gt;- 예시3&lt;/h3&gt;

&lt;p&gt;다른 예시!! 출발 드림팀으로 생각해보자
달리면서 여러 미션 거리를 가지고 촬영을 하는 방송이다. 매회 방송마다 미션은 다르다.
주자가 출발해서 여러가지 미션을 통과해서 마지막에 완료!! 라고 외치는게 목표다.&lt;/p&gt;

&lt;p&gt;위의 장점들은 초급 미션들이다&lt;/p&gt;

&lt;p&gt;한번 실행했을때 1가지 하고 완료!! 를 외치면 된다.&lt;/p&gt;

&lt;p&gt;우리가 방송을 보고 더 기쁠때는 어려운 과정을 통과했을때, 기쁨을 느낀다.&lt;/p&gt;

&lt;p&gt;그럼 여러가지를 섞어보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;배포전 스크린샷을 찍기,&lt;/li&gt;
  &lt;li&gt;인증서 최신것 사용하기&lt;/li&gt;
  &lt;li&gt;앱스토어에 빌드 제출하기&lt;/li&gt;
  &lt;li&gt;완료후 슬랙으로 알려주기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 여러가지 섞인 미션을 방송 1편이라 생각한다면
우리는 이 미션 시작!을 외치면 알아서 스크린샷을 찍고 인증서 최신것으로 매칭한담에 앱스토어 빌드 제출한뒤 슬랙으로 알림을 날리고 완료! 라고 하겠지?&lt;/p&gt;

&lt;p&gt;위의 4가지 과정을  해야하는게 미션이고 이 미션이 곧 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;을 의미한다.&lt;/p&gt;

&lt;p&gt;난 굉장히 좋은 예시같다 생각하는데, 다른사람한테도 그래야할텐데~~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그와중에 중요한건 fast 라는것~ 빠르게 귀찮지 않게 도와주는 도구&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--q-내-회사앱은-한-프로젝트안에-앱이-여러갠데&quot;&gt;- Q. 내 회사앱은 한 프로젝트안에 앱이 여러갠데?&lt;/h3&gt;

&lt;p&gt;이거 진짜다. 내가 맡은 앱중 하나가 이렇다..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gym&lt;/code&gt;이라는 명령어를 사용하면 아주 쉽게 IPA를 만드는 작업이 된다.
근데, 별다른 셋팅을 안하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym&lt;/code&gt;이라는 명령어를 입력하면 첫번째 타겟(앱)을  IPA 추출해버렸다…&lt;/p&gt;

&lt;p&gt;그래서 별다른 셋팅을 해줬다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym(scheme:”AppName”)&lt;/code&gt;
이렇게~ 그랬더니 해당 앱으로 잘 IPA추출을 했다!!&lt;/p&gt;

&lt;p&gt;이런식으로 세세한 설정이 가능하단걸 전달하고 싶었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--q-난-adhoc으로-추출하고-싶은데&quot;&gt;- Q. 난 AdHoc으로 추출하고 싶은데?&lt;/h3&gt;

&lt;p&gt;회사에서 압축할때 AdHoc으로 추출할때가 많았지만, 위의 명령어를 쓰면 배포용이 나온다, 기본값이 앱스토어용인가보다.&lt;/p&gt;

&lt;p&gt;이 점은 옵션을 주면된다!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane gym —-export_method ad-hoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 adhoc으로 잘뽑아준다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;그래서-단점은&quot;&gt;그래서 단점은?&lt;/h2&gt;
&lt;p&gt;단점도 분명 존재한다. 근데 아직 내가 잘몰라서 발생하는 이슈이기도 하지만, 초보자에겐 알기전까진 단점은 단점이니깐! 불편한점 정도?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--ipa-추출할때-오류가-났는데-잘모르겠다&quot;&gt;- IPA 추출할때 오류가 났는데 잘모르겠다&lt;/h3&gt;
&lt;p&gt;뭔가 촤라라라락 터미널을 가득 채운다.
빌드하면서 warning들을 다 뿌린다.  그러다가 오류가 마지막에 난다
대충 읽어보면, 오류났는데! 정확히 몰라!! 아래 명렁어써서 다시 해봐!
이런다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;—verbose&lt;/code&gt;
그럼 로그에 상세히 남나보다. 근데, 로그 잘보면 되겠지만 서툴러서 잘 보지도 못하겠다.. 그래서 Xcode에서 아카이브 해봤더니, 착하게도
빨간 느낌표를 보여주면서 뭐가 문제다라고 잘 얘기해준다.&lt;/p&gt;

&lt;p&gt;물론 로그 잘보면 되겠지, 근데 Xcode보다 불친절하단건 사실!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;
&lt;p&gt;다른 사람들이 많이 칭찬하고 많이 사용한다면, 이유는 분명있는 것은 진리인듯하다.&lt;/p&gt;

&lt;p&gt;RxSwift도 더 해봐야지! 매력을 느낄때까지…&lt;/p&gt;

&lt;p&gt;아무튼, Fastlane의 매력은 충분히 있는듯하고, 
다음 편에서 설치랑 간단한 사용법을 다뤄봐야겠다.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tool/2019/03/30/Tool-Fastlane%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A1%E1%84%87%E1%85%A9%E1%84%8C%E1%85%A1.html</link>
        <guid isPermaLink="true">http://localhost:4000/tool/2019/03/30/Tool-Fastlane%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A1%E1%84%87%E1%85%A9%E1%84%8C%E1%85%A1.html</guid>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>(Objective-C) 커스텀 네비게이션바</title>
        <description>&lt;p&gt;오늘의 주제는 커스텀 네비게이션바.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회사에서 작업하다가  굉장히 정신적 고통을 받았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;네비게이션 왼쪽, 오른쪽 아이템 셋팅하고 가운데 검색 필드가 있는 형태였는데,&lt;/p&gt;

&lt;p&gt;각 영역별로 최소값이 얼만지 몰라서 Swift로 만들어서, 영역별로 확인하고 그 다음 해당 프로젝트 앱의 최소버전이 9.0이었기때문에 9.0에서도 확인하였고 모두 동일함을 확인하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데,, 이게 웬걸 해당앱은 ObjC인데 여기서도 당연히 같을거란 생각을해서 망했다.&lt;/p&gt;

&lt;p&gt;9~11은 왼쪽 오른쪽 아이템과 가운데 영역의 패딩값 (최소 거리값)은 0처럼 보이고, 12에서는 어느정도 들어가고 있다.&lt;/p&gt;

&lt;p&gt;이게 왠말인가,,,,,, 폭망함..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 일단 기본기 좀 잡을겸 추가하는 방법을 포스팅&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 가장 빈 공백으로 시작&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(가운데 백버튼은 없는셈 치기 - 개인 작업별로 모으고 있어서 있는 버튼임다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 여기서 일단 영역은 3가지로 보자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;왼쪽 아이템&lt;/li&gt;
  &lt;li&gt;오른쪽 아이템&lt;/li&gt;
  &lt;li&gt;타이틀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 1과 2는 버튼 형식으로 많이 보았을것이다.&lt;/p&gt;

&lt;p&gt;그리고 타이틀의 경우 보통 이런 형태를 많이 띄고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런건 간단하다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;self.navigationItem.title = @&quot;Title&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;그런데, 간혹 앱들보면 가운데 검색창이 있는게 있다.&lt;/p&gt;

&lt;p&gt;보통 검색이라하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBar&lt;/code&gt; 라는 좋은것도 있지만, 기획자는 많고 세상은 넓으니&lt;/p&gt;

&lt;p&gt;가운데에 특이한것을 넣고 싶을수 있을것이고 그것이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가운데 부분을 View 라고 생각해보면, view라는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; 도 들어갈수 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Label&lt;/code&gt;이 들어 갈수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;즉, 자유성로운 낙서장.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;를 넣어보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 44)];
view.backgroundColor = [UIColor blueColor];
self.navigationItem.titleView = view;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드는 위와 같이 간단하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽버튼, 오른쪽 버튼도 어려울건 없다&lt;/p&gt;

&lt;p&gt;코드를 번저 설명&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// 버튼 초기화
UIButton *leftBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 24, 44)];
UIButton *rightBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 24, 44)];

// 색 지정
leftBtn.backgroundColor = [UIColor blackColor];
rightBtn.backgroundColor = [UIColor blackColor];

// BarButtonItem 생성 - 커스텀 뷰로 위의 버튼들 사용
UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:leftBtn];
UIBarButtonItem *right = [[UIBarButtonItem alloc] initWithCustomView:rightBtn];

// 아이템 지정
self.navigationItem.leftBarButtonItem = left;
self.navigationItem.rightBarButtonItem = right;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아주 간단하고 심플, 하지만 조금 특이하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;을 바로 안만들고 초기화 방식이 &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithCustomView&lt;/code&gt;를 사용했으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;을 이용했다는 점?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;솔직히 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;에 초기화 할때 이미지 넣고 액션 넣고 할수 있다.&lt;/p&gt;

  &lt;p&gt;그런데, 백그라운드 컬러값이 안들어간다 ㅠ 보여줄방법이 음슴체&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 실행해서 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러가지 실험을 해보자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitleView&lt;/code&gt;의 최대값은 어느정도?&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최대값은 어느정도?&lt;/li&gt;
  &lt;li&gt;왼쪽 오른쪽 버튼 둘다크면? 어떤일이 발생???&lt;/li&gt;
  &lt;li&gt;왼쪽,오른쪽 버튼 그리고 타이틀뷰도 크면?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-titleview의-최대값은-어느정도&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;TitleView&lt;/code&gt;의 최대값은 어느정도?&lt;/h3&gt;

&lt;p&gt;1부터 알아보자, 왼쪽, 오른쪽 버튼들 제거하고 버튼만 최대 크기로 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이정도 느낌이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-uibarbuttonitem의-최대값은-어느정도&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최대값은 어느정도?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;검정색이 버튼이었는데, 흥미롭다, 같다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-왼쪽-오른쪽-버튼-둘다크면-어떤일이-발생&quot;&gt;3. 왼쪽 오른쪽 버튼 둘다크면? 어떤일이 발생???&lt;/h3&gt;

&lt;p&gt;그럼 오른쪽 버튼이랑 둘다 최대로 해버리자.&lt;/p&gt;

&lt;p&gt;넉넉하게 200씩 폭을 잡아주고 보면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오,, 이상해 반반이 아니네?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아이템 지정순서 순서도 바꿔보았다, 그래도 같음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-왼쪽오른쪽-버튼-그리고-타이틀뷰도-크면&quot;&gt;4. 왼쪽,오른쪽 버튼 그리고 타이틀뷰도 크면?&lt;/h3&gt;

&lt;p&gt;그럼 아래같이 폭을 잡고 그려보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;타이틀 : 500&lt;/li&gt;
  &lt;li&gt;왼쪽 아이템 : 200&lt;/li&gt;
  &lt;li&gt;오른쪽 아이템 : 200&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 더 흥미로워!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타이틀 영역(파란색)은 안나왔지만, 아이템 영역들이 화면 절반으로 나누어졌다.&lt;/p&gt;

&lt;p&gt;신기한데?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 실험을 이어가보자&lt;/p&gt;

&lt;p&gt;마지막 같은 결과면 타이틀뷰가 제일 최약체라는 것,&lt;/p&gt;

&lt;p&gt;반영은 되었나 확인겸 좌우 버튼들 크기를 줄여보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음 만족스러워!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 또 궁금증&lt;/p&gt;

&lt;p&gt;버튼 최소사이즈는 몇일까?&lt;/p&gt;

&lt;p&gt;각각 가로 폭을&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;으로 줘봤다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음? 10이 아닌거같은데?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 가로 폭을 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;로 줘보자&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;UIButton *leftBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 2, 44)];
UIButton *rightBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 2, 44)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음? 이건 분명 2가 아니다.&lt;/p&gt;

&lt;p&gt;최소값은 저정도가 최소다 그럼 저정도는 몇일까?&lt;/p&gt;

&lt;p&gt;계층 보기로해서 찍어봤더니 &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;이라네?&lt;/p&gt;

&lt;p&gt;아래는 디스크립션 부분에서 긁어왔다. 30이란다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;UIButton: 0x7fb8f2c03030; frame = (0 0; 30 44); opaque = NO; layer = &amp;lt;CALayer: 0x60000205e4a0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uibarbuttonitem의-최소-width는-30&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최소 &lt;code class=&quot;highlighter-rouge&quot;&gt;Width&lt;/code&gt;는 30!&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본 내용은 여기까지,&lt;/p&gt;

&lt;p&gt;아래 사진을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;?????????????????? 이건 무엇? 저건 위에 넣었던 2같은데?&lt;/p&gt;

&lt;p&gt;이게 화나는 이유다&lt;/p&gt;

&lt;p&gt;이 사진은 &lt;strong&gt;iOS9.0 6s+&lt;/strong&gt; 모델에서 찍었다. 플러스라 그런것이 아니다 &lt;strong&gt;iOS12&lt;/strong&gt;에선 멀쩡,&lt;/p&gt;

&lt;p&gt;저 버전들이 문제다, 지금 시뮬레이터가 10,11이 없어서 그런데&lt;/p&gt;

&lt;p&gt;쟤들도 그랬다. 12만 고정폭이 들어갔나보다. 빡침,,&lt;/p&gt;

&lt;p&gt;다해놨더니!!!!!!!!!!!! 하 딥빡이었다 정말,&lt;/p&gt;

&lt;p&gt;근데 더화나는건 Swift에선 안그런다는거…
Objc 넘나 힘든것&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오 근데 블로그 쓰다 30이 최소인걸 알았는데,&lt;/p&gt;

&lt;p&gt;그럼 기본값으로 30을 다박아서 내일 회사에서 써먹어봐야지지&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;++ 회사에서 써먹어봤는데 회사에선 최신버전에서 24가 먹히네?!!
뭐지 혼란이 온다, 차이점이라면 회사에 네비게이션바는 코드로 작성되었다는점?
이게 차이점을 야기하는건가&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/objective-c/2019/02/19/Objc-%EC%BB%A4%EC%8A%A4%ED%85%80%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%EB%B0%94.html</link>
        <guid isPermaLink="true">http://localhost:4000/objective-c/2019/02/19/Objc-%EC%BB%A4%EC%8A%A4%ED%85%80%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%EB%B0%94.html</guid>
        
        
        <category>Objective-C</category>
        
      </item>
    
      <item>
        <title>(Gossip) 블로그 테마 변경</title>
        <description>&lt;p&gt;블로그가 생각보다 너무 어렵다,&lt;/p&gt;

&lt;p&gt;마지막 테마 변경일줄 알았더니만&lt;/p&gt;

&lt;p&gt;2019년 글이 포스팅이 안되는 문제가 있어서&lt;/p&gt;

&lt;p&gt;19년 되자마자 글썼었지만 올라가지 않아서&lt;/p&gt;

&lt;p&gt;그걸 핑계 삼아 귀차니즘이 살아났다.&lt;/p&gt;

&lt;p&gt;에버노트를 시작하면서 티스토리와 연동이 된다해서&lt;/p&gt;

&lt;p&gt;티스토리도 갔다가 MarkDown로 글쓰는 재미가 떨어져서&lt;/p&gt;

&lt;p&gt;결국 jekyll로 복귀!&lt;/p&gt;

&lt;p&gt;심플 이즈 베스트!&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/gossip/2019/02/17/Gossip-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EB%A7%88-%EB%B3%80%EA%B2%BD.html</link>
        <guid isPermaLink="true">http://localhost:4000/gossip/2019/02/17/Gossip-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EB%A7%88-%EB%B3%80%EA%B2%BD.html</guid>
        
        
        <category>Gossip</category>
        
      </item>
    
      <item>
        <title>(Xcode) Carthage 설치</title>
        <description>&lt;p&gt;Hello! 2019!&lt;/p&gt;

&lt;p&gt;이전편에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt;이란 무엇인지 그리고 Cocoapods보다 장점은 무엇인지 글을 써봤다.&lt;/p&gt;

&lt;p&gt;이전글: [Carthage-서론][https://jiseobkim.github.io/xcode/2018/12/26/Xcode-Cartage.html]&lt;/p&gt;

&lt;p&gt;오늘도 짧게! 설치법만 적어야겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Homebrew 설치&lt;/li&gt;
  &lt;li&gt;Homebrew를 이용한 Carthage 설치&lt;/li&gt;
  &lt;li&gt;Carthage를 통한 라이브러리 설치( Alamofire 로 설치 예정! )&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;homebrew-설치&quot;&gt;Homebrew 설치&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Homebrew&lt;/em&gt;란? 쉽게 생각하자면 Cocoapods과 Carthage 처럼 Package Manager 같은 것이라 생각하면 될 것 같다!&lt;/p&gt;

&lt;p&gt;그럼 우린 무엇을 할것인가!&lt;/p&gt;

&lt;p&gt;Carthage 란것을 설치해야 하므로 일단 &lt;em&gt;Homebrew&lt;/em&gt;가 설치되어 있다면 Pass&lt;/p&gt;

&lt;p&gt;[Homebrew 사이트][https://brew.sh]가 공식 사이트다. 자세히 보고 싶다면 한번쯤 보면 좋을듯하다.&lt;/p&gt;

&lt;p&gt;하지만 귀찮다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt;을 실행하고  아래 명령어 입력 후 Enter!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기다리면 끝.&lt;/p&gt;

&lt;h3 id=&quot;carthage-설치&quot;&gt;Carthage 설치&lt;/h3&gt;

&lt;p&gt;[Carthage 공식 Github 사이트][https://github.com/Carthage/Carthage]에 굉장히 자세히 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt;을 열고&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R $(whoami) /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;입력하고&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;chown 은 소유자나 소유 그룹을 변경하는것이고,&lt;/p&gt;

  &lt;p&gt;옵션 -R은 해당 경로와 하위 파일들 다 바꾼다는것,&lt;/p&gt;

  &lt;p&gt;$(whoami)는 말그대로 내가 누군지를 나타낸다. 아마 Terminal 명령어 입력하는 곳 앞부분이랑 같을 것이다!&lt;/p&gt;

  &lt;p&gt;뒤에 /usr/local 설정하고자 하는 파일이다.&lt;/p&gt;

  &lt;p&gt;즉, /usr/local 경로와 그하위 목록들의 소유자를 나로 바꿔라! 라는 의미로 해석할 수 있다.&lt;/p&gt;

  &lt;p&gt;안해도 되는 경우가 있지만 iTerm2를 쓰면서 oh-my-zip을 써서 그런가? 안해주면 안되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;입력하면 끝.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;carthage를-통한-라이브러리-설치&quot;&gt;Carthage를 통한 라이브러리 설치&lt;/h3&gt;

&lt;p&gt;Cocoapods 사용자라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;을 해서 Podfile을 만들었을 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Podfile은 설치할 라이브러리 이름을 적는곳 (추가 정보도 입력가능)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Carthage 사용자라면 Cartfile이란것을 만들어 줘야한다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;편집기가 열리면 설치하고자 하는 라이브러리 주소 정보 및 버젼 정보를 적으면 된다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;github &quot;Alamofire/Alamofire&quot; ~&amp;gt; 4.7.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt; 4.7.2&lt;/code&gt; 는 생략 가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podfile에 비해 Cartfile은 파일 내용이 심플해서 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;pod install 같이 설치가 필요하다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 심플한만큼 후자업이 조금 있다…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Framework 수동 추가&lt;/li&gt;
  &lt;li&gt;Run Script 생성&lt;/li&gt;
  &lt;li&gt;shell script 작성 (이 표현이 맞는지 모르겠…..)&lt;/li&gt;
  &lt;li&gt;Input Files에 루트 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;졸리므로-나머진-내일-작성&quot;&gt;졸리므로 나머진 내일 작성.&lt;/h1&gt;

</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2019/01/02/Xcode-Cartage%EC%84%A4%EC%B9%98.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2019/01/02/Xcode-Cartage%EC%84%A4%EC%B9%98.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Xcode) Carthage 서론</title>
        <description>&lt;p&gt;게으름 때문에 오랜만에 글을 쓰는 기분!&lt;/p&gt;

&lt;p&gt;그 동안 귀차니즘에 빠져 나만의 시간을 가졌던것 같다! 다시 열심히!&lt;/p&gt;

&lt;p&gt;우선 기존에는 너무 시간이 많이 소요가되어서 평일에 쓰기가 더욱 힘들었던거 같기에&lt;/p&gt;

&lt;p&gt;분량을 조금 줄이면서 도전!&lt;/p&gt;

&lt;p&gt;(세벌식 도전중)&lt;/p&gt;

&lt;p&gt;오늘 쓰려는 주제는 Carthage에 관한것이며,&lt;/p&gt;

&lt;p&gt;기존 앱에 적용하다 충돌을 일으켜 이를 해결하면서 굉장히 이상했던점도 있었던거 같다.&lt;/p&gt;

&lt;p&gt;오늘은 서론정도만!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;swift-package-manager란&quot;&gt;Swift Package Manager란?&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;우선 주제인 Carthage 라는것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt;의 일종이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Swift Package Manager? 어렵다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이에 속하는것은 CocoaPods! 라이브러리들을 좀 더 쉽게 관리하는 것!&lt;/p&gt;

&lt;p&gt;자세한 내용들은 나중에보는것으로 하고,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로 CocoaPods이 편한 이유&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;라이브러리 관리 및 새로 추가가 쉽다.&lt;/li&gt;
  &lt;li&gt;구글등 큰 회사에서 Cocoapods으로 라이브러리를 제공하는것이 많다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아마 1의 이유 때문에 2가 생긴게 아닐까?&lt;/p&gt;

&lt;p&gt;이번에 회사에서 추가한 Google CloudSpeechAPI도 Cocoapods으로 제공해서 쉽게 설치가 가능했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;설치는 쉬웠으나 담당하던 앱 셋팅이 꼬일때로 꼬여서
Cocoapods 적용자체 하는데 5일 걸렸다, 5일 동안 정신병 걸리는줄… 성공하고 소리지를뻔..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
아무튼! 그런데 단점이 있으니 이 글을 포스팅하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 생각하는 단점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빌드를 할때 프레임워크도 빌드를 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이것의 같은 말은 프레임워크 사이즈가 쫌 된다면, 빌드시간이 길어질텐데 (gRPC 프레임워크가 내가 본것중 가장 어마무시)&lt;/p&gt;

&lt;p&gt;그렇다면! 하루에도 수십번 빌드를 하는데 시간 낭비가 그만큼 심해진다는것이다!&lt;/p&gt;

&lt;p&gt;그런데 Carthage 라는걸 알게 되었는데, 이 점을 커버한다고 한다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;carthage&quot;&gt;Carthage&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;(발음: 카르타고, 영어 발음은 카르타지)&lt;/p&gt;

&lt;p&gt;&lt;u&gt;CocoaPods의 단점을 커버하는 이유는 간단하다.&lt;/u&gt;
&lt;u&gt;미리 빌드가 되어있고, 다시 빌드를 안한다는것?&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;깔끔하게 상쇄한다. 이 점이 굉장히 매력적이었다.&lt;/p&gt;

&lt;p&gt;실제로 스터디에서 만들었던 MemCoo(홍보)라는 앱에 TesseractOCR 라이브러리에 적용 해봤더니 빌드할때 700 몇개던 것이 4~500대로 떨어졌던것 같았고, RxSwift도 빼봤더니 100대로 떨어진거 같다.  맥북이 회사에 있어서 정확한 수치는 다음글에!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또 하나의 장점이 있다.&lt;/p&gt;

&lt;p&gt;Workspace를 안쓰고 프로젝트 단위로만 가능하다는것?&lt;/p&gt;

&lt;p&gt;Cocoapods을 쓰면 처음 생성되는 프로젝트에 들어갈일이 없었다. 코코아팟을 쓰게되면 Workspace를 써야 라이브러리를 쓸 수 있으니깐! 근데 안써도 된다니 참 좋군!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다른 장점들도 있지만 단점을 얘기하자면&lt;/p&gt;

&lt;p&gt;CocoaPods보다 라이브러리가 적다는것? 하지만 다른 블로그들에 의하면 빠르게 늘어나고 있다고 한다!&lt;/p&gt;

&lt;p&gt;다음 편에선 간단하게 사용법에 대하여 적어보려한다!&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2018/12/26/Xcode-Cartage.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2018/12/26/Xcode-Cartage.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
  </channel>
</rss>
