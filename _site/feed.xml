<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😀😍😉 JS의 개발 블로그 😁😆😄</title>
    <description>나만의 공간</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 Apr 2019 19:39:34 +0900</pubDate>
    <lastBuildDate>Sun, 28 Apr 2019 19:39:34 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>(Tool) Fastlane 기본 설치 방법과 1달 사용후기</title>
        <description>&lt;p&gt;설치는 글내용이 별로 없을듯 하니 짧게 나마 사용 후기를 같이 써보고자 한다.&lt;/p&gt;

&lt;p&gt;지난 글에는 Fastlane의 개념을 간략히 알아 보았다.  &lt;a href=&quot;https://jiseobkim.github.io/tool/2019/03/30/Tool-Fastlane을-알아보자.html&quot;&gt;지난글: Fastlane을 알아보자&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;1달-사용-후기&quot;&gt;1달 사용 후기&lt;/h1&gt;
&lt;p&gt;설치 방법을 알아보기전, 회사에서 사용해본 장단점을 먼저 얘기하자면,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;IPA 추출할때, 셋팅을 걱정할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;IPA 추출을 하는 동안 맥북 앞에 앉아있을 필요가 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;생각보다 사용할 일이 적어서 익숙해지기 힘들다.&lt;/li&gt;
  &lt;li&gt;아직 기능의 반의 반의 반도 못쓰는 기분이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 장점 부분을 얘기하자면,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;장점 1. IPA 추출할때, 셋팅을 걱정할 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
실제 IPA를 추출하다보면 과정들이 은근 신경 써야한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;빌드 클린은 했나?&lt;/li&gt;
  &lt;li&gt;빌드 타겟은 잘맞췄나?&lt;/li&gt;
  &lt;li&gt;아카이브 하는 동안 인증서 선택은 잘했나?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 사소하지만 은근~히 신경이 쓰이는 것들이 필요한데, 이미 모든 작업을 어떻게 진행 할지 셋팅을 했기 때문에
IPA로 추출을 할때 터미널에 명령어 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane IPA_Adhoc&lt;/code&gt; (IPA_Adhoc은 미리 작성한 Lane)만 입력해주면, 손쉽게 파일 추출이 끝난다. 신경 쓸것은 Adhoc, Development, Distribution 등등 미리 작성해둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lane&lt;/code&gt; 이름만 생각 해내면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;장점 2. IPA 추출을 하는 동안 맥북 앞에 앉아있을 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2의 경우는 1의 연장선이라고도 볼수있다. 아카이브 하고 추출까지 프로젝트 사이즈에 따라 다르지만, 3분~5분 정도였던것 같다. 그렇지만, 1에서 본것과 같이 중간 중간 버튼을 누른다던가 인증서를 선택 등등 할일이 있다, 그래서 짧다면 짧지만, 길다고 볼수도 있는 시간동안 맥북 앞에서 기다리고 있어야 한다.
그치만 이 귀찮은 행동은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;을 사용함으로써 해결이 되었다. 명령어 치고 화장실도 다녀오고, 물도 마시고 돌아오면 추출이 끝나있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단점이라 하기엔 애매하지만!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;단점 1. 생각보다 사용할 일이 적어서 익숙해지기 힘들다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;은 배포, 추출, 인증서 관리 등등 도와주는 편리한 도구이다, 하지만 그것들을 할일이 자주 있는편이 아니다.
자주 써야 익숙해지던가 할텐데, 한 3번 정도 썼나,,,? 그러다보니 한달가량 썼지만 아직도 친숙함이 안느껴진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점 2. 아직 기능의 반의 반의 반도 못쓰는 기분이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이건 단점이라 적긴 했지만, 나의 귀차니즘이 크긴 했지만 1에서 말한바와 같이 잘 쓸일이 없었기에 순간 아쉬운점이 있어도 자주 안쓰니 까먹고 기능을 추가 안했다.. (쓰고보니 변명)
써봐야겠다 생각드는 기능은 아래와 같았다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;슬랙으로 작업 완료 알리기&lt;/li&gt;
  &lt;li&gt;인증서 Git Hub로 관리&lt;/li&gt;
  &lt;li&gt;자동 심사 제출&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt; 
좀더 쓰게 되면 더 적어봐야지&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h1&gt;
&lt;p&gt;가장 좋은건 아무래도 공식 사이트 문서라 생각하므로 첨부! &lt;a href=&quot;https://docs.fastlane.tools/getting-started/ios/setup/&quot;&gt;공식 설치 문서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;문서가 잘나와 있으니, 문서에 없는 세세한거라도 설명 추가!&lt;/p&gt;

&lt;h2 id=&quot;기본-단계&quot;&gt;기본 단계&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;순서 1 커맨드 라인 툴 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이것을 안하면 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 명령어 사용시 오류 발생할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;strong&gt;순서 2 Ruby Gem을 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt; 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sudo : 높은 권한으로 설치하기 위해!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install fastlane -NV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;strong&gt;순서 3 프로젝트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt; 적용(초기화)하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cocoapod을 사용해보았다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;이랑 같은 개념&lt;/li&gt;
  &lt;li&gt;꼭 적용하려는 폴더로 이동후 명령어 입력하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;init-과정&quot;&gt;init 과정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;하게 되면 몇가지 셋팅을 과정이 있다. 아래 과정은 대부분 비슷하겠지만 프로젝트 셋팅 상태에 따라 뜰수도, 안뜰수도 있는 부분도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 1. 폴더내의 project 혹은 workspace가 여러개 존재한다면?&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 폴더 내에 여러 프로젝트가 존재한다면 어떤 프로젝트에 적용할건지 물어보는 화면이다,
이런것도 판단 해주고 참 좋은 툴이네!&lt;/p&gt;

&lt;p&gt;선택지에서 골라서 해당 숫자 입력후 엔터!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 2. 사용 목적 셋팅&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 나오는 화면은 예전엔 없었나보다, 다른 블로그들에선 없었던 화면이라 당황스러웠었다.
“주 사용 목적이 스크린샷, 테스트플라이트, 배포용 어느거야?” 라고 묻는다고 보면 되고
지금 하기 싫다면 4번을 선택하면 된다, (4로 진행)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서 3. 완료&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-04-21/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 하면 명령어들의 간단한 설명과 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;의 과정은 끝이난다.&lt;/p&gt;

&lt;p&gt;그치만 위에 말했듯이 위와 다른 설명을 보았다면, 그곳엔 저 화면들이 아닌 애플 개발자 계정 셋팅 화면이 나왔을것이다. 하지만 바뀐후 달라진건지 애플 개발자 계정 넣는 부분이 안보였다.&lt;/p&gt;

&lt;p&gt;그렇기에 그냥 진행할 경우 오류도 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;계정-셋팅&quot;&gt;계정 셋팅&lt;/h2&gt;

&lt;p&gt;위에 말했듯 계정을 따로 설정을 해줘야 한다.&lt;/p&gt;

&lt;p&gt;Xcode 내에서 해야할 일을 외부에서 처리해야하니 계정에 대한 정보는 필수다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 과정이 끝난후 설치된 폴더내에 fastlane이란 폴더가 생겼을 것이다.
 위2번 상황에서 4번을 택했으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppFile&lt;/code&gt; 항목이 생겼을 것이다. (다른것을 선택했다면 더 있을 수 있다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Appfile : 개발자 계정 설정하는 파일&lt;/li&gt;
  &lt;li&gt;Fastlane : Lane을 셋팅하는 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 역할들을 하며, Fastlane은 다음 포스팅때 하고 여기선 Appfile만!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Appfile&lt;/code&gt; 폴더의 내용은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # app_identifier(&quot;[[APP_IDENTIFIER]]&quot;) # The bundle identifier of your app
 # apple_id(&quot;[[APPLE_ID]]&quot;) # Your Apple email address
 
 
 # For more information about the Appfile, see:
 #     https://docs.fastlane.tools/advanced/#appfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 설정해야할 부분은 처음 두줄.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1,2번줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 제거&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[APP_IDENTIFIER]]&lt;/code&gt;에는 해당 프로젝트 BundleID 넣기.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[APPLE_ID]]&lt;/code&gt; 에는 개발자 계정 넣기.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
그리고나서 인증서 받기(sign), 혹은 itunesConnect에 앱생성(produce) 명령어를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane produce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;Appflie&lt;/code&gt; 에 설정한 애플 계정의 패스워드를 요구한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;애플 이중인증 사용중일시 appleid.apple.com 사이트에서 이중인증 비밀번호를 발급 받아서 입력!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 작업을 통한다면 계정 연결은 끝난것이고, 입력한 명령어를 수행하게 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위의 연결 없이 IPA추출했다가 오류가 발생했었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;중요한건 &lt;strong&gt;애플 계정 연결&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt; 
여기까지 했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fastlane&lt;/code&gt;의 기본적 사용을 위한 준비는 끝이나게 되고 다음 포스팅에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt; 사용법에 대해서 포스팅할 예정이다.&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2019/04/21/Tool-Fastlane-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5-%E1%84%87%E1%85%A1%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/04/21/Tool-Fastlane-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5-%E1%84%87%E1%85%A1%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Tool) Fastlane을 알아보자 (개념)</title>
        <description>&lt;p&gt;오늘 포스팅 주제는 Fastlane&lt;/p&gt;

&lt;p&gt;Fastlane은 자료도 굉장히 많고, 사용자도 많고, 많은 기업에서도 사용중으로 보인다
그럼 이게 뭘까? 앱에 사용되는 라이브러리는 아니고, 배포를 도와주는 프로그램, 툴이라 생각하면 좋을것 같다.&lt;/p&gt;

&lt;p&gt;아직 초짜라 기능 5%도 못쓰는것 같으니 더 배움이 쌓이면 추가 포스팅 예정!&lt;/p&gt;

&lt;p&gt;이번껀 개념정도만!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;q-배포를-도와준다는-의미는&quot;&gt;Q. 배포를 도와준다는 의미는?&lt;/h2&gt;

&lt;p&gt;많은 개발자들이 그렇듯, 귀찮고 반복적인 일은 자동화를 시키고 싶어한다,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수도 계속 반복적으로 짜기 싫고 유지보수가 힘드니 나왔겠지?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;포인트는 자동화&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이해하기엔 예시만한게 없는듯하니 예를 들어보자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ex-js님-테스트하게-ipa-말아서-서버에-올려주세요&quot;&gt;ex) JS님 테스트하게 IPA 말아서 서버에 올려주세요&lt;/h3&gt;

&lt;p&gt;Fastlane을 찾게된 이유아닐까 싶다, AdHoc으로 말아서 서버에 올린뒤 테스터들에게 요청을 드리는 작업을할때 아카이브 하는것이 시간을 은근히 잡아먹어서 귀찮은점이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기존-ipa-추출-과정&quot;&gt;기존 IPA 추출 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;타겟 설정&lt;/li&gt;
  &lt;li&gt;빌드 클린&lt;/li&gt;
  &lt;li&gt;빌드&lt;/li&gt;
  &lt;li&gt;아카이브 선택&lt;/li&gt;
  &lt;li&gt;인증서 선택&lt;/li&gt;
  &lt;li&gt;기다리기&lt;/li&gt;
  &lt;li&gt;폴더 선택&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 과정이 나만그런진 모르겠지만 귀찮다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fastlane을-이용한-ipa-추출-과정&quot;&gt;Fastlane을 이용한 IPA 추출 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;터미널 열기&lt;/li&gt;
  &lt;li&gt;명령어 입력 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;기다리기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아주 심플하다 맘에든다, 뭣보다 귀찮은 과정이 코드한줄로 끝나며, 완료되면 프로젝트 폴더에 파일들이 이쁘게 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그게-기능이-끝인가&quot;&gt;그게 기능이 끝인가?&lt;/h2&gt;
&lt;p&gt;아니다, 기능이 아주 많고, 디테일한 설정을 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;무엇을-더-할-수-있나&quot;&gt;무엇을 더 할 수 있나?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;아이튠즈 컨넥트에 앱을 추가할 수 있다.&lt;/li&gt;
  &lt;li&gt;인증서를 생성, 다운로드 할 수 있다.&lt;/li&gt;
  &lt;li&gt;인증서 관리하는 Github가 있다면, 다른 맥에서도 쓸수 있게 해당 github를 통해 매칭시키는 기능이 있다. (협업시 인증서 전달을 따로 할필요 없다)&lt;/li&gt;
  &lt;li&gt;앱 스크린샷을 자동으로 찍을 수 있다. - 아이튠즈컨넥트에 올리는 용도로 사용&lt;/li&gt;
  &lt;li&gt;IPA 파일을 쉽게 만들수 있다.&lt;/li&gt;
  &lt;li&gt;TestFlight에 빌드 제출을 할 수 있다.&lt;/li&gt;
  &lt;li&gt;TestFlight에 구성원 추가, 제거 할 수 있다.&lt;/li&gt;
  &lt;li&gt;특정 작업 완료 후 슬랙으로 알리기 가능&lt;/li&gt;
  &lt;li&gt;앱스토어 빌드 제출 할 수 있다.&lt;/li&gt;
  &lt;li&gt;Lane을 통해서 여러 기능을 묶을 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아직 IPA 추출, 인증서 생성 다운밖에 못해봤다,,&lt;br /&gt;
스토어 빌드 제출은 실패 단계,&lt;br /&gt;
매칭 기능은 성공했으나 아직 이해가 더 필요&lt;/p&gt;

  &lt;p&gt;아직 활용을 잘 못하지만, 못하는 나조차도 위와 같은 기능들을 알고 있고, 다양한걸 할 수 있단걸 알고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;10번은 설명이 더 해야할듯하다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lane을-통해서-여러-기능을-묶다는-의미는-lane이-뭐길래&quot;&gt;Lane을 통해서 여러 기능을 묶다는 의미는? Lane이 뭐길래?&lt;/h2&gt;

&lt;p&gt;우선 이 툴의 이름이 fastlane이니 유추를 해보자&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fast : 빠른 속도를 의미&lt;/li&gt;
  &lt;li&gt;lane : 차선, 통로를 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 기능들과 잘 생각해보면, 특정 기능을 빠르게 수행 해주는 것이라는 생각이 든다. 그렇담, 조금더 생각을 바꿔서&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--예시1&quot;&gt;- 예시1&lt;/h3&gt;

&lt;p&gt;위의  무엇을 할 수 있는지 나열한 것의 1~9 각 기능을 한개의 통로, 차선, lane이라 생각해보자,&lt;/p&gt;

&lt;p&gt;1번 레인 출발을 내가 외치면 1번 주자,운전자가 열심히 뛰어서, 아이튠즈 컨넥트에 앱을 추가하는 작업들을 후다닥 처리해서 완료치는것이라 생각하면 좀더 쉬울듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--예시3&quot;&gt;- 예시3&lt;/h3&gt;

&lt;p&gt;다른 예시!! 출발 드림팀으로 생각해보자
달리면서 여러 미션 거리를 가지고 촬영을 하는 방송이다. 매회 방송마다 미션은 다르다.
주자가 출발해서 여러가지 미션을 통과해서 마지막에 완료!! 라고 외치는게 목표다.&lt;/p&gt;

&lt;p&gt;위의 장점들은 초급 미션들이다&lt;/p&gt;

&lt;p&gt;한번 실행했을때 1가지 하고 완료!! 를 외치면 된다.&lt;/p&gt;

&lt;p&gt;우리가 방송을 보고 더 기쁠때는 어려운 과정을 통과했을때, 기쁨을 느낀다.&lt;/p&gt;

&lt;p&gt;그럼 여러가지를 섞어보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;배포전 스크린샷을 찍기,&lt;/li&gt;
  &lt;li&gt;인증서 최신것 사용하기&lt;/li&gt;
  &lt;li&gt;앱스토어에 빌드 제출하기&lt;/li&gt;
  &lt;li&gt;완료후 슬랙으로 알려주기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 여러가지 섞인 미션을 방송 1편이라 생각한다면
우리는 이 미션 시작!을 외치면 알아서 스크린샷을 찍고 인증서 최신것으로 매칭한담에 앱스토어 빌드 제출한뒤 슬랙으로 알림을 날리고 완료! 라고 하겠지?&lt;/p&gt;

&lt;p&gt;위의 4가지 과정을  해야하는게 미션이고 이 미션이 곧 &lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;을 의미한다.&lt;/p&gt;

&lt;p&gt;난 굉장히 좋은 예시같다 생각하는데, 다른사람한테도 그래야할텐데~~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그와중에 중요한건 fast 라는것~ 빠르게 귀찮지 않게 도와주는 도구&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--q-내-회사앱은-한-프로젝트안에-앱이-여러갠데&quot;&gt;- Q. 내 회사앱은 한 프로젝트안에 앱이 여러갠데?&lt;/h3&gt;

&lt;p&gt;이거 진짜다. 내가 맡은 앱중 하나가 이렇다..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gym&lt;/code&gt;이라는 명령어를 사용하면 아주 쉽게 IPA를 만드는 작업이 된다.
근데, 별다른 셋팅을 안하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym&lt;/code&gt;이라는 명령어를 입력하면 첫번째 타겟(앱)을  IPA 추출해버렸다…&lt;/p&gt;

&lt;p&gt;그래서 별다른 셋팅을 해줬다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane gym(scheme:”AppName”)&lt;/code&gt;
이렇게~ 그랬더니 해당 앱으로 잘 IPA추출을 했다!!&lt;/p&gt;

&lt;p&gt;이런식으로 세세한 설정이 가능하단걸 전달하고 싶었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--q-난-adhoc으로-추출하고-싶은데&quot;&gt;- Q. 난 AdHoc으로 추출하고 싶은데?&lt;/h3&gt;

&lt;p&gt;회사에서 압축할때 AdHoc으로 추출할때가 많았지만, 위의 명령어를 쓰면 배포용이 나온다, 기본값이 앱스토어용인가보다.&lt;/p&gt;

&lt;p&gt;이 점은 옵션을 주면된다!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane gym —-export_method ad-hoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 adhoc으로 잘뽑아준다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;그래서-단점은&quot;&gt;그래서 단점은?&lt;/h2&gt;
&lt;p&gt;단점도 분명 존재한다. 근데 아직 내가 잘몰라서 발생하는 이슈이기도 하지만, 초보자에겐 알기전까진 단점은 단점이니깐! 불편한점 정도?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--ipa-추출할때-오류가-났는데-잘모르겠다&quot;&gt;- IPA 추출할때 오류가 났는데 잘모르겠다&lt;/h3&gt;
&lt;p&gt;뭔가 촤라라라락 터미널을 가득 채운다.
빌드하면서 warning들을 다 뿌린다.  그러다가 오류가 마지막에 난다
대충 읽어보면, 오류났는데! 정확히 몰라!! 아래 명렁어써서 다시 해봐!
이런다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;—verbose&lt;/code&gt;
그럼 로그에 상세히 남나보다. 근데, 로그 잘보면 되겠지만 서툴러서 잘 보지도 못하겠다.. 그래서 Xcode에서 아카이브 해봤더니, 착하게도
빨간 느낌표를 보여주면서 뭐가 문제다라고 잘 얘기해준다.&lt;/p&gt;

&lt;p&gt;물론 로그 잘보면 되겠지, 근데 Xcode보다 불친절하단건 사실!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;
&lt;p&gt;다른 사람들이 많이 칭찬하고 많이 사용한다면, 이유는 분명있는 것은 진리인듯하다.&lt;/p&gt;

&lt;p&gt;RxSwift도 더 해봐야지! 매력을 느낄때까지…&lt;/p&gt;

&lt;p&gt;아무튼, Fastlane의 매력은 충분히 있는듯하고, 
다음 편에서 설치랑 간단한 사용법을 다뤄봐야겠다.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/tool/2019/03/30/Tool-Fastlane%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A1%E1%84%87%E1%85%A9%E1%84%8C%E1%85%A1.html</link>
        <guid isPermaLink="true">http://localhost:4000/tool/2019/03/30/Tool-Fastlane%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A1%E1%84%87%E1%85%A9%E1%84%8C%E1%85%A1.html</guid>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>(Objective-C) 커스텀 네비게이션바</title>
        <description>&lt;p&gt;오늘의 주제는 커스텀 네비게이션바.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회사에서 작업하다가  굉장히 정신적 고통을 받았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;네비게이션 왼쪽, 오른쪽 아이템 셋팅하고 가운데 검색 필드가 있는 형태였는데,&lt;/p&gt;

&lt;p&gt;각 영역별로 최소값이 얼만지 몰라서 Swift로 만들어서, 영역별로 확인하고 그 다음 해당 프로젝트 앱의 최소버전이 9.0이었기때문에 9.0에서도 확인하였고 모두 동일함을 확인하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데,, 이게 웬걸 해당앱은 ObjC인데 여기서도 당연히 같을거란 생각을해서 망했다.&lt;/p&gt;

&lt;p&gt;9~11은 왼쪽 오른쪽 아이템과 가운데 영역의 패딩값 (최소 거리값)은 0처럼 보이고, 12에서는 어느정도 들어가고 있다.&lt;/p&gt;

&lt;p&gt;이게 왠말인가,,,,,, 폭망함..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 일단 기본기 좀 잡을겸 추가하는 방법을 포스팅&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 가장 빈 공백으로 시작&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(가운데 백버튼은 없는셈 치기 - 개인 작업별로 모으고 있어서 있는 버튼임다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 여기서 일단 영역은 3가지로 보자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;왼쪽 아이템&lt;/li&gt;
  &lt;li&gt;오른쪽 아이템&lt;/li&gt;
  &lt;li&gt;타이틀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 1과 2는 버튼 형식으로 많이 보았을것이다.&lt;/p&gt;

&lt;p&gt;그리고 타이틀의 경우 보통 이런 형태를 많이 띄고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런건 간단하다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;self.navigationItem.title = @&quot;Title&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;그런데, 간혹 앱들보면 가운데 검색창이 있는게 있다.&lt;/p&gt;

&lt;p&gt;보통 검색이라하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBar&lt;/code&gt; 라는 좋은것도 있지만, 기획자는 많고 세상은 넓으니&lt;/p&gt;

&lt;p&gt;가운데에 특이한것을 넣고 싶을수 있을것이고 그것이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가운데 부분을 View 라고 생각해보면, view라는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; 도 들어갈수 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Label&lt;/code&gt;이 들어 갈수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;즉, 자유성로운 낙서장.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;를 넣어보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 44)];
view.backgroundColor = [UIColor blueColor];
self.navigationItem.titleView = view;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드는 위와 같이 간단하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽버튼, 오른쪽 버튼도 어려울건 없다&lt;/p&gt;

&lt;p&gt;코드를 번저 설명&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// 버튼 초기화
UIButton *leftBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 24, 44)];
UIButton *rightBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 24, 44)];

// 색 지정
leftBtn.backgroundColor = [UIColor blackColor];
rightBtn.backgroundColor = [UIColor blackColor];

// BarButtonItem 생성 - 커스텀 뷰로 위의 버튼들 사용
UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:leftBtn];
UIBarButtonItem *right = [[UIBarButtonItem alloc] initWithCustomView:rightBtn];

// 아이템 지정
self.navigationItem.leftBarButtonItem = left;
self.navigationItem.rightBarButtonItem = right;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아주 간단하고 심플, 하지만 조금 특이하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;을 바로 안만들고 초기화 방식이 &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithCustomView&lt;/code&gt;를 사용했으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;을 이용했다는 점?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;솔직히 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;에 초기화 할때 이미지 넣고 액션 넣고 할수 있다.&lt;/p&gt;

  &lt;p&gt;그런데, 백그라운드 컬러값이 안들어간다 ㅠ 보여줄방법이 음슴체&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 실행해서 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러가지 실험을 해보자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitleView&lt;/code&gt;의 최대값은 어느정도?&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최대값은 어느정도?&lt;/li&gt;
  &lt;li&gt;왼쪽 오른쪽 버튼 둘다크면? 어떤일이 발생???&lt;/li&gt;
  &lt;li&gt;왼쪽,오른쪽 버튼 그리고 타이틀뷰도 크면?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-titleview의-최대값은-어느정도&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;TitleView&lt;/code&gt;의 최대값은 어느정도?&lt;/h3&gt;

&lt;p&gt;1부터 알아보자, 왼쪽, 오른쪽 버튼들 제거하고 버튼만 최대 크기로 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이정도 느낌이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-uibarbuttonitem의-최대값은-어느정도&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최대값은 어느정도?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;검정색이 버튼이었는데, 흥미롭다, 같다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-왼쪽-오른쪽-버튼-둘다크면-어떤일이-발생&quot;&gt;3. 왼쪽 오른쪽 버튼 둘다크면? 어떤일이 발생???&lt;/h3&gt;

&lt;p&gt;그럼 오른쪽 버튼이랑 둘다 최대로 해버리자.&lt;/p&gt;

&lt;p&gt;넉넉하게 200씩 폭을 잡아주고 보면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오,, 이상해 반반이 아니네?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아이템 지정순서 순서도 바꿔보았다, 그래도 같음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-왼쪽오른쪽-버튼-그리고-타이틀뷰도-크면&quot;&gt;4. 왼쪽,오른쪽 버튼 그리고 타이틀뷰도 크면?&lt;/h3&gt;

&lt;p&gt;그럼 아래같이 폭을 잡고 그려보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;타이틀 : 500&lt;/li&gt;
  &lt;li&gt;왼쪽 아이템 : 200&lt;/li&gt;
  &lt;li&gt;오른쪽 아이템 : 200&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 더 흥미로워!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타이틀 영역(파란색)은 안나왔지만, 아이템 영역들이 화면 절반으로 나누어졌다.&lt;/p&gt;

&lt;p&gt;신기한데?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 실험을 이어가보자&lt;/p&gt;

&lt;p&gt;마지막 같은 결과면 타이틀뷰가 제일 최약체라는 것,&lt;/p&gt;

&lt;p&gt;반영은 되었나 확인겸 좌우 버튼들 크기를 줄여보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음 만족스러워!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 또 궁금증&lt;/p&gt;

&lt;p&gt;버튼 최소사이즈는 몇일까?&lt;/p&gt;

&lt;p&gt;각각 가로 폭을&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;으로 줘봤다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음? 10이 아닌거같은데?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 가로 폭을 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;로 줘보자&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;UIButton *leftBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 2, 44)];
UIButton *rightBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 2, 44)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음? 이건 분명 2가 아니다.&lt;/p&gt;

&lt;p&gt;최소값은 저정도가 최소다 그럼 저정도는 몇일까?&lt;/p&gt;

&lt;p&gt;계층 보기로해서 찍어봤더니 &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;이라네?&lt;/p&gt;

&lt;p&gt;아래는 디스크립션 부분에서 긁어왔다. 30이란다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;UIButton: 0x7fb8f2c03030; frame = (0 0; 30 44); opaque = NO; layer = &amp;lt;CALayer: 0x60000205e4a0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uibarbuttonitem의-최소-width는-30&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt;의 최소 &lt;code class=&quot;highlighter-rouge&quot;&gt;Width&lt;/code&gt;는 30!&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본 내용은 여기까지,&lt;/p&gt;

&lt;p&gt;아래 사진을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-02-19/img12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;?????????????????? 이건 무엇? 저건 위에 넣었던 2같은데?&lt;/p&gt;

&lt;p&gt;이게 화나는 이유다&lt;/p&gt;

&lt;p&gt;이 사진은 &lt;strong&gt;iOS9.0 6s+&lt;/strong&gt; 모델에서 찍었다. 플러스라 그런것이 아니다 &lt;strong&gt;iOS12&lt;/strong&gt;에선 멀쩡,&lt;/p&gt;

&lt;p&gt;저 버전들이 문제다, 지금 시뮬레이터가 10,11이 없어서 그런데&lt;/p&gt;

&lt;p&gt;쟤들도 그랬다. 12만 고정폭이 들어갔나보다. 빡침,,&lt;/p&gt;

&lt;p&gt;다해놨더니!!!!!!!!!!!! 하 딥빡이었다 정말,&lt;/p&gt;

&lt;p&gt;근데 더화나는건 Swift에선 안그런다는거…
Objc 넘나 힘든것&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오 근데 블로그 쓰다 30이 최소인걸 알았는데,&lt;/p&gt;

&lt;p&gt;그럼 기본값으로 30을 다박아서 내일 회사에서 써먹어봐야지지&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;++ 회사에서 써먹어봤는데 회사에선 최신버전에서 24가 먹히네?!!
뭐지 혼란이 온다, 차이점이라면 회사에 네비게이션바는 코드로 작성되었다는점?
이게 차이점을 야기하는건가&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/objective-c/2019/02/19/Objc-%EC%BB%A4%EC%8A%A4%ED%85%80%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%EB%B0%94.html</link>
        <guid isPermaLink="true">http://localhost:4000/objective-c/2019/02/19/Objc-%EC%BB%A4%EC%8A%A4%ED%85%80%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%EB%B0%94.html</guid>
        
        
        <category>Objective-C</category>
        
      </item>
    
      <item>
        <title>(Gossip) 블로그 테마 변경</title>
        <description>&lt;p&gt;블로그가 생각보다 너무 어렵다,&lt;/p&gt;

&lt;p&gt;마지막 테마 변경일줄 알았더니만&lt;/p&gt;

&lt;p&gt;2019년 글이 포스팅이 안되는 문제가 있어서&lt;/p&gt;

&lt;p&gt;19년 되자마자 글썼었지만 올라가지 않아서&lt;/p&gt;

&lt;p&gt;그걸 핑계 삼아 귀차니즘이 살아났다.&lt;/p&gt;

&lt;p&gt;에버노트를 시작하면서 티스토리와 연동이 된다해서&lt;/p&gt;

&lt;p&gt;티스토리도 갔다가 MarkDown로 글쓰는 재미가 떨어져서&lt;/p&gt;

&lt;p&gt;결국 jekyll로 복귀!&lt;/p&gt;

&lt;p&gt;심플 이즈 베스트!&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/gossip/2019/02/17/Gossip-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EB%A7%88-%EB%B3%80%EA%B2%BD.html</link>
        <guid isPermaLink="true">http://localhost:4000/gossip/2019/02/17/Gossip-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%8C%EB%A7%88-%EB%B3%80%EA%B2%BD.html</guid>
        
        
        <category>Gossip</category>
        
      </item>
    
      <item>
        <title>(Xcode) Carthage 설치</title>
        <description>&lt;p&gt;Hello! 2019!&lt;/p&gt;

&lt;p&gt;이전편에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt;이란 무엇인지 그리고 Cocoapods보다 장점은 무엇인지 글을 써봤다.&lt;/p&gt;

&lt;p&gt;이전글: [Carthage-서론][https://jiseobkim.github.io/xcode/2018/12/26/Xcode-Cartage.html]&lt;/p&gt;

&lt;p&gt;오늘도 짧게! 설치법만 적어야겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Homebrew 설치&lt;/li&gt;
  &lt;li&gt;Homebrew를 이용한 Carthage 설치&lt;/li&gt;
  &lt;li&gt;Carthage를 통한 라이브러리 설치( Alamofire 로 설치 예정! )&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;homebrew-설치&quot;&gt;Homebrew 설치&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Homebrew&lt;/em&gt;란? 쉽게 생각하자면 Cocoapods과 Carthage 처럼 Package Manager 같은 것이라 생각하면 될 것 같다!&lt;/p&gt;

&lt;p&gt;그럼 우린 무엇을 할것인가!&lt;/p&gt;

&lt;p&gt;Carthage 란것을 설치해야 하므로 일단 &lt;em&gt;Homebrew&lt;/em&gt;가 설치되어 있다면 Pass&lt;/p&gt;

&lt;p&gt;[Homebrew 사이트][https://brew.sh]가 공식 사이트다. 자세히 보고 싶다면 한번쯤 보면 좋을듯하다.&lt;/p&gt;

&lt;p&gt;하지만 귀찮다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt;을 실행하고  아래 명령어 입력 후 Enter!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기다리면 끝.&lt;/p&gt;

&lt;h3 id=&quot;carthage-설치&quot;&gt;Carthage 설치&lt;/h3&gt;

&lt;p&gt;[Carthage 공식 Github 사이트][https://github.com/Carthage/Carthage]에 굉장히 자세히 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt;을 열고&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R $(whoami) /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;입력하고&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;chown 은 소유자나 소유 그룹을 변경하는것이고,&lt;/p&gt;

  &lt;p&gt;옵션 -R은 해당 경로와 하위 파일들 다 바꾼다는것,&lt;/p&gt;

  &lt;p&gt;$(whoami)는 말그대로 내가 누군지를 나타낸다. 아마 Terminal 명령어 입력하는 곳 앞부분이랑 같을 것이다!&lt;/p&gt;

  &lt;p&gt;뒤에 /usr/local 설정하고자 하는 파일이다.&lt;/p&gt;

  &lt;p&gt;즉, /usr/local 경로와 그하위 목록들의 소유자를 나로 바꿔라! 라는 의미로 해석할 수 있다.&lt;/p&gt;

  &lt;p&gt;안해도 되는 경우가 있지만 iTerm2를 쓰면서 oh-my-zip을 써서 그런가? 안해주면 안되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;입력하면 끝.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;carthage를-통한-라이브러리-설치&quot;&gt;Carthage를 통한 라이브러리 설치&lt;/h3&gt;

&lt;p&gt;Cocoapods 사용자라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;을 해서 Podfile을 만들었을 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Podfile은 설치할 라이브러리 이름을 적는곳 (추가 정보도 입력가능)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Carthage 사용자라면 Cartfile이란것을 만들어 줘야한다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;편집기가 열리면 설치하고자 하는 라이브러리 주소 정보 및 버젼 정보를 적으면 된다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;github &quot;Alamofire/Alamofire&quot; ~&amp;gt; 4.7.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt; 4.7.2&lt;/code&gt; 는 생략 가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podfile에 비해 Cartfile은 파일 내용이 심플해서 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;pod install 같이 설치가 필요하다. (Terminal 입력)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 심플한만큼 후자업이 조금 있다…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Framework 수동 추가&lt;/li&gt;
  &lt;li&gt;Run Script 생성&lt;/li&gt;
  &lt;li&gt;shell script 작성 (이 표현이 맞는지 모르겠…..)&lt;/li&gt;
  &lt;li&gt;Input Files에 루트 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;졸리므로-나머진-내일-작성&quot;&gt;졸리므로 나머진 내일 작성.&lt;/h1&gt;

</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2019/01/02/Xcode-Cartage%EC%84%A4%EC%B9%98.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2019/01/02/Xcode-Cartage%EC%84%A4%EC%B9%98.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Xcode) Carthage 서론</title>
        <description>&lt;p&gt;게으름 때문에 오랜만에 글을 쓰는 기분!&lt;/p&gt;

&lt;p&gt;그 동안 귀차니즘에 빠져 나만의 시간을 가졌던것 같다! 다시 열심히!&lt;/p&gt;

&lt;p&gt;우선 기존에는 너무 시간이 많이 소요가되어서 평일에 쓰기가 더욱 힘들었던거 같기에&lt;/p&gt;

&lt;p&gt;분량을 조금 줄이면서 도전!&lt;/p&gt;

&lt;p&gt;(세벌식 도전중)&lt;/p&gt;

&lt;p&gt;오늘 쓰려는 주제는 Carthage에 관한것이며,&lt;/p&gt;

&lt;p&gt;기존 앱에 적용하다 충돌을 일으켜 이를 해결하면서 굉장히 이상했던점도 있었던거 같다.&lt;/p&gt;

&lt;p&gt;오늘은 서론정도만!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;swift-package-manager란&quot;&gt;Swift Package Manager란?&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;우선 주제인 Carthage 라는것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt;의 일종이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Swift Package Manager? 어렵다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이에 속하는것은 CocoaPods! 라이브러리들을 좀 더 쉽게 관리하는 것!&lt;/p&gt;

&lt;p&gt;자세한 내용들은 나중에보는것으로 하고,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로 CocoaPods이 편한 이유&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;라이브러리 관리 및 새로 추가가 쉽다.&lt;/li&gt;
  &lt;li&gt;구글등 큰 회사에서 Cocoapods으로 라이브러리를 제공하는것이 많다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아마 1의 이유 때문에 2가 생긴게 아닐까?&lt;/p&gt;

&lt;p&gt;이번에 회사에서 추가한 Google CloudSpeechAPI도 Cocoapods으로 제공해서 쉽게 설치가 가능했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;설치는 쉬웠으나 담당하던 앱 셋팅이 꼬일때로 꼬여서
Cocoapods 적용자체 하는데 5일 걸렸다, 5일 동안 정신병 걸리는줄… 성공하고 소리지를뻔..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
아무튼! 그런데 단점이 있으니 이 글을 포스팅하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 생각하는 단점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빌드를 할때 프레임워크도 빌드를 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이것의 같은 말은 프레임워크 사이즈가 쫌 된다면, 빌드시간이 길어질텐데 (gRPC 프레임워크가 내가 본것중 가장 어마무시)&lt;/p&gt;

&lt;p&gt;그렇다면! 하루에도 수십번 빌드를 하는데 시간 낭비가 그만큼 심해진다는것이다!&lt;/p&gt;

&lt;p&gt;그런데 Carthage 라는걸 알게 되었는데, 이 점을 커버한다고 한다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;carthage&quot;&gt;Carthage&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;(발음: 카르타고, 영어 발음은 카르타지)&lt;/p&gt;

&lt;p&gt;&lt;u&gt;CocoaPods의 단점을 커버하는 이유는 간단하다.&lt;/u&gt;
&lt;u&gt;미리 빌드가 되어있고, 다시 빌드를 안한다는것?&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;깔끔하게 상쇄한다. 이 점이 굉장히 매력적이었다.&lt;/p&gt;

&lt;p&gt;실제로 스터디에서 만들었던 MemCoo(홍보)라는 앱에 TesseractOCR 라이브러리에 적용 해봤더니 빌드할때 700 몇개던 것이 4~500대로 떨어졌던것 같았고, RxSwift도 빼봤더니 100대로 떨어진거 같다.  맥북이 회사에 있어서 정확한 수치는 다음글에!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또 하나의 장점이 있다.&lt;/p&gt;

&lt;p&gt;Workspace를 안쓰고 프로젝트 단위로만 가능하다는것?&lt;/p&gt;

&lt;p&gt;Cocoapods을 쓰면 처음 생성되는 프로젝트에 들어갈일이 없었다. 코코아팟을 쓰게되면 Workspace를 써야 라이브러리를 쓸 수 있으니깐! 근데 안써도 된다니 참 좋군!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다른 장점들도 있지만 단점을 얘기하자면&lt;/p&gt;

&lt;p&gt;CocoaPods보다 라이브러리가 적다는것? 하지만 다른 블로그들에 의하면 빠르게 늘어나고 있다고 한다!&lt;/p&gt;

&lt;p&gt;다음 편에선 간단하게 사용법에 대하여 적어보려한다!&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2018/12/26/Xcode-Cartage.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2018/12/26/Xcode-Cartage.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Swift) Tag 알아보기</title>
        <description>&lt;p&gt;이번에 주제는 Tag에 관하여 써볼까 한다.&lt;/p&gt;

&lt;p&gt;태그도 참 좋은 기능인데, 책에선 잘 못보다 보니&lt;/p&gt;

&lt;p&gt;간과하던 기능이었다.&lt;/p&gt;

&lt;p&gt;그러다 막상 쓰려니 개념이 헷갈려서&lt;/p&gt;

&lt;p&gt;잠깐 써볼까 하다가 뭐야 하고 나중에 찾아봐야지 하다가&lt;/p&gt;

&lt;p&gt;나중에 병이라도 걸렸나, 결국 안찾음&lt;/p&gt;

&lt;p&gt;그래서 쓰다 서서히 감이 와서 블로그로 써보면서&lt;/p&gt;

&lt;p&gt;정리를 하고자 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이해하기&quot;&gt;이해하기&lt;/h1&gt;
&lt;p&gt;사용 방법은 굉장히 단순하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;태그 번호 입력 ( 입력안할시 default : 0 )&lt;/li&gt;
  &lt;li&gt;어떤 태그가 붙은 오브젝트가 필요하면 태그 번호로 객체 생성하여 처리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;심플하다, 예를 들어 어느 기능상 label을 추가하고 (Tag: 1으로 지정했다 가정)&lt;/p&gt;

&lt;p&gt;다른 곳에서 텍스트라던가, 색을 바꾸고 싶다. 그럼 해당 태그 번호를 가진&lt;/p&gt;

&lt;p&gt;새로운 객체를 만들고, 설정을 바꾸면 된다.&lt;/p&gt;

&lt;p&gt;그런데, 처음에 헷갈린건 오히려 너무 단순해서였다.&lt;/p&gt;

&lt;p&gt;‘더 상위 뷰에서 태그 번호 지정하면 호출이 가능할까?’&lt;/p&gt;

&lt;p&gt;‘같은 번호 넣으면 어떻게 되지? 누가 호출 될까? 둘다? 하나만?’&lt;/p&gt;

&lt;p&gt;아이러니하게도 이러한 단순함에 의해 생긴 어려움 때문에 쓰기 어려웠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;label를 코드로 추가&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Button 을 StoryBoard에 추가 및 연결&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-label를-코드로-추가&quot;&gt;1. label를 코드로 추가&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ViewDidLoad&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// label 생성&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 기본 셋팅&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 중요 **&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 화면에 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 가장 중요한건 Tag를 달아주는것!&lt;/p&gt;

&lt;p&gt;그럼 이미지는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-button-을-storyboard에-추가-및-연결&quot;&gt;2. Button 을 StoryBoard에 추가 및 연결&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;버튼 생성은 간단하니 코드부터 보이자면&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 1.Tag로 지정&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JS Blog!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tag 지정해주는 곳이 가장 중요하다!&lt;/p&gt;

&lt;p&gt;self의 view가 가진 서브뷰들 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;1번&lt;/code&gt; 태그를 가진 뷰를 가지고 온다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;로 다운 캐스팅을 해주고 사용하면 끝이다.&lt;/p&gt;

&lt;p&gt;아주 심플하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결과-화면&quot;&gt;결과 화면&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;실험---헷갈리는-개념-바로-잡기&quot;&gt;실험 - 헷갈리는 개념 바로 잡기&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;몇가지 실험을 하여, 헷갈리는 개념을 잡아보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q1-없는-tag-번호를-호출하면&quot;&gt;Q1. 없는 tag 번호를 호출하면???&lt;/h3&gt;

&lt;h3 id=&quot;a1-nil로-반환한다&quot;&gt;A1. nil로 반환한다.&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q2-mainview에서-tag-1번을-가지고-오면-성공할까&quot;&gt;Q2. MainView에서 tag 1번을 가지고 오면 성공할까?&lt;/h3&gt;

&lt;p&gt;‘더 상위 뷰에서 태그 번호 지정하면 호출이 가능할까?’&lt;/p&gt;

&lt;p&gt;이건 말로하기 어려워서, 화려하게 그렸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러면 조금 더 전달이 잘된것 같다.&lt;/p&gt;

&lt;p&gt;실험을 위해 UI를 다시 셋팅했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mainView 안에 subView가 있고, 그 안에 tag:1인 label이 있다.&lt;/p&gt;

&lt;p&gt;이제 확인 하고 싶은건 이것이다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tag로 지정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JS Blog!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subView&lt;/code&gt;의 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;의 태그 번호를 더 상위뷰인 &lt;code class=&quot;highlighter-rouge&quot;&gt;mainView&lt;/code&gt;에서 사용이 될까?&lt;/p&gt;

&lt;p&gt;Q1에 따르면, 1 태그를 가진 오브젝트가 없으면 nil을 반환했다. 그렇담 이 경우엔? 결과를 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img5.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아주 흥미로운 결과가 나왔다. nil이 아니다 성공 했다.&lt;/p&gt;

&lt;p&gt;글 쓰기 위해 테스트를 하며, 이건 nil일거다 라고 확신에 가득찬 예상을 했다.&lt;/p&gt;

&lt;p&gt;그런데;;;; 아니네?? 충격적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q2. MainView에서 tag 1번을 가지고 오면 성공할까?&lt;/p&gt;

&lt;h3 id=&quot;a2-성공한다&quot;&gt;A2. 성공한다.&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q3-같은-tag값들이-여러개면&quot;&gt;Q3. 같은 Tag값들이 여러개면?&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약, 1의 태그 번호를 가진것이 여러개일 경우&lt;/p&gt;

&lt;p&gt;“오류가 날까?, 안난다면 먼저 tag를 입력한 객체가 선택될까?, 아님 반대로 나중에 입력된 객체가?”&lt;/p&gt;

&lt;p&gt;label 을 2개 만들어서, 누가 되는지 먼저 보자,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 화면 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 버튼 액션&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;        
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JS Blog!&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sizeToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;label 만드는건 생략하고 중요 부분만 가지고 왔다.&lt;/p&gt;

&lt;p&gt;그럼 결과를 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img6.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;예상대로 먼저 지정한게 변했다.&lt;/p&gt;

&lt;p&gt;그럼 당연히 지정 순서를 바꾸면 2가 변하겠지?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 태그 지정 (순서 바뀜)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 화면 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img6.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;p&gt;??????????&lt;/p&gt;

&lt;p&gt;????????????&lt;/p&gt;

&lt;p&gt;아니다… 지정 순서가 중요한것이….&lt;/p&gt;

&lt;p&gt;그럼 추가할때인가?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 화면 추가 (순서 바뀜)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img7.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오… 호…. 이것도 정말 예상 못했다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;**지정 시점보다 중요한건 추가한 시점이다.**&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;그렇담, 태그 지정을 나중에 해주면 다를까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 화면 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img6.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그대로다&lt;/p&gt;

&lt;p&gt;이로써&lt;/p&gt;

&lt;p&gt;지정 시점 &amp;lt; 화면 추가 시점&lt;/p&gt;

&lt;p&gt;이라는것이 확인 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 화면 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 상태에서 버튼 선택시  &lt;code class=&quot;highlighter-rouge&quot;&gt;label1&lt;/code&gt;의 태그를 지정한다면???&lt;/p&gt;

&lt;p&gt;( 해당 태그번호가 사용된 후에도 ‘지정시점 &amp;lt; 화면 추가’ 시점 인지 확인을 위함)&lt;/p&gt;

&lt;p&gt;이번엔 조금 방식이 바뀌어야 한다.&lt;/p&gt;

&lt;p&gt;label 두개를 viewDidLoad안에서 말고 클래스 내부에 선언해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게!&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 버튼 액션쪽엔&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tag로 지정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JS Blog!&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sizeToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 먼저 화면에 추가된 label1에 태그 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img8.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용이 되건 말건 상관이없었다. 오직 중요한건&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘Tag 우선 순위: 지정 시점 &amp;lt; 화면 추가 시점’&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Q3. 같은 Tag값들이 여러개면?&lt;/p&gt;

&lt;h3 id=&quot;a3-tag-셋팅-시점보다-먼저-화면-추가된-오브젝트가--갑이다&quot;&gt;A3. Tag 셋팅 시점보다, 먼저 화면 추가된 오브젝트가  갑이다.&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q4-q2-vs-q3&quot;&gt;Q4. Q2 VS Q3&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 나에게 충격을 줬던 Q2와&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Q2. MainView에서 tag 1번을 가지고 오면 성공할까?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q3을 섞어서 실험 해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// subView의 Label&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선, 이 실험에 지켜봐야할점은&lt;/p&gt;

&lt;p&gt;label의 경우, self.view에 추가된 객체가 아니다.&lt;/p&gt;

&lt;p&gt;self.view에 추가된 mainView의 추가된 subView에 추가된 label이다.&lt;/p&gt;

&lt;p&gt;혹시 그런 계층이라면, 우선순위가 바뀌지 않을까? 라는 혹시나란 생각에였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;label1의 경우 코드로 추가된 오브젝트&lt;/p&gt;

  &lt;p&gt;label의 경우 StoryBoard에 추가된 오브젝트 임을 생각하고 예상해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-11-04/img9.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘A3. Tag 셋팅 시점보다, 먼저 화면 추가된 오브젝트가  갑이다.’ 는 변화가 없었다.&lt;/p&gt;

&lt;p&gt;일관성 있어서 좋다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스토리보드의 경우 ViewDidLoad 보다도 이전에 그려지기 때문에,&lt;/p&gt;

  &lt;p&gt;label이 더빨리 추가 되었다.&lt;/p&gt;

  &lt;p&gt;(정확한 시점 공부할겸 더 알아봐야겠다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가장 중요한것은&lt;/p&gt;

&lt;p&gt;&lt;q&gt;객체가 추가된 시점이 중요하다&lt;/q&gt;는 것이었다.&lt;/p&gt;

&lt;p&gt;부가적으로 헷갈렸던 tag는 어느 범위까지 될것인가 (Q2)도 알게되었다.&lt;/p&gt;

&lt;p&gt;그래도 여러 시도 통해서 이제 감이 왔다 싶어서 블로그에 적은것이었는데,&lt;/p&gt;

&lt;p&gt;실험중 예상이 틀린게 나와서 당황스러웠다.&lt;/p&gt;

&lt;p&gt;당황스러웠던 만큼! 다음에 사용할땐 좀더 잘 사용할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;끝!&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2018/11/04/swift-Tag.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2018/11/04/swift-Tag.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Swift) Notification Center</title>
        <description>&lt;p&gt;&lt;u&gt;**주의 : 혹시 읽지만 끝까지 안보시는 분들은 적용하고 `옵저버 제거`  검색해서 꼭 제거해주세요.&lt;/u&gt;**&lt;/p&gt;

&lt;p&gt;오늘 포스팅 주제는 &lt;strong&gt;Notification Center&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Swift를 사용하면서 사용한적이 없었던것 같아서 배우는김에 글로 포스팅으로!!!&lt;/p&gt;

&lt;p&gt;하지만, 아직도 정말 이때 써야해!! 라는건 잘모르겠다… 이런 경우에 이걸 쓸수있겠다 정도 느낌…?&lt;/p&gt;

&lt;p&gt;마치 if문 배운상태서 guard문을 알게된 느낌…&lt;/p&gt;

&lt;p&gt;간단한 개념적부터 접근을 하자면&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;배우고난-느낌&quot;&gt;배우고난 느낌&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;느낌은 이랬다
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;q&gt; &amp;lt;무언가 액션이 있었을 때,&amp;gt;이 액션이 진행되었으니 담당자들은 처리바람.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;&lt;q&gt; 담당자 수신 완료, 처리하겠음 &lt;/q&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이런 느낌??&lt;/p&gt;

&lt;p&gt;앱에서 예를 들면 다음과 같은 가능할것 같았다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;q&gt;화면이 백그라운드에 들어갔을때, VC에 어떠한 처리를 하고 싶다.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;&lt;q&gt;여러 VC에 영향을 주고 싶다.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
보통의 경우 같은 클래스 내의 메소드나 프로퍼티들이 아니면 접근하기가 까탈스러웠던것 같다.&lt;/p&gt;

&lt;p&gt;델리게이트 패턴을 쓴다거나 프로토콜을 사용해서 접근을 하게되지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification Center&lt;/code&gt;로도 가능하단걸 알게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만, 단순 값전달이라던가, 델리게이트 패턴, 프로토콜이 사용하기 난감한 상황이 아닌이상 Noti Center는 안쓸듯하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;좀더 여러곳에 동시다발적으로 알리는게 가능하겠다란 생각이 들면서&lt;/p&gt;

&lt;p&gt;책들이 왜 방송국에 예시를 드는지 조금 이해가 됐다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용법&quot;&gt;사용법&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;방송국이다 뭐다해도 첨엔 난 이해가 안됐었기에 그런 설명은 생략&lt;/p&gt;

&lt;p&gt;&lt;q&gt; &amp;lt;무언가 액션이 있었을 때,&amp;gt;이 액션이 진행되었으니 담당자들은 처리바람.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;&lt;q&gt; 담당자 수신 완료, 처리하겠음 &lt;/q&gt;&lt;/p&gt;

&lt;p&gt;이렇게 쓴 이유가 있다. 코드 동작을 풀어쓴것이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;post---이-액션이-진행되었으니-담당자들은-처리바람&quot;&gt;Post - “이 액션이 진행되었으니 담당자들은 처리바람”&lt;/h3&gt;

&lt;p&gt;우선 &lt;q&gt; &amp;lt;무언가 액션이 있었을 때,&amp;gt;이 액션이 진행되었으니 담당자들은 처리바람.&lt;/q&gt;는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// doItSomeThing에 해당 되는 것들은 처리 바람&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doItSomeThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중요 - &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;나중 설명 - &lt;code class=&quot;highlighter-rouge&quot;&gt;.doItSomeTing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고로 &lt;code class=&quot;highlighter-rouge&quot;&gt;.doItSomeThing&lt;/code&gt;은 원래 존재하는게 아니고 내가 생성한 프로퍼티,&lt;/p&gt;

  &lt;p&gt;아래에서 설명!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;포스트라는 단어가 중요하다.뭔가 보내는 그런 의미니, 여기선 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;에 해당자들에게 각자 일을 수행하라고 실행시키는 것이라 생각하는게 맞는것 같다.&lt;/p&gt;

&lt;p&gt;그럼 실행하라 명령했으니 명령 받을 애들이 필요하다.&lt;/p&gt;

&lt;p&gt;다소 특이한 개념이 나온다. &lt;code class=&quot;highlighter-rouge&quot;&gt;doItSomeThing&lt;/code&gt;은 정말 name에 해당된다. 무슨 동작하란게 아니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;을 일 처리하는 스텝의 이름이라 생각해야한다.&lt;/p&gt;

&lt;p&gt;스텝마다 각자의 일거리는 다르다.&lt;/p&gt;

&lt;p&gt;그렇담, 일거리와 이름을 셋팅을 하자.&lt;/p&gt;

&lt;p&gt;일단 일거리 하나 만든다. ( = 동작할 함수 생성 )&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printSomeThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;do it something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단하다. 하는일은 그저 print 한번 해주는것뿐.&lt;/p&gt;

&lt;p&gt;눈여겨볼거라면 파라미터 타입이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;이라는 정도???&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@objc 붙은 이유는 NotificationCenter가 원래는 NSNotificationCenter다. Swift 몇인지 기억은 안나지만 이름이 바뀌었다. Objective-c 에서 쓰이는거니 붙여주자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;observer---담당자-수신-완료-처리하겠음&quot;&gt;Observer - “담당자 수신 완료, 처리하겠음”&lt;/h3&gt;

&lt;p&gt;observer = 관찰자, 여기선 일하는 스텝(담당자)이라 생각하자, 스텝들 업무 지정정도?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 담당자 인적사항 및 업무 추가&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printSomeThing(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doItSomeThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중요 - &lt;code class=&quot;highlighter-rouge&quot;&gt;addObserver&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addObserver&lt;/code&gt; - 관찰자를 대기시키겠다는 것,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; - 스테프 업무&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; - 스테프 이름&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 가장 중요한건 이름이라 생각한다. Post 메소드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;에 “누구씨 일해!!” 라고 한다면, 그 이름에 해당 되는 스텝들이 각자 등록된 업무 (= &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;) 수행하게 된다. 이 코드에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;.doItSomeTing&lt;/code&gt;을 부르면 아까 만든 함수(print 한줄짜리)를 실행하게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스텝 이름은 중복가능하다, 다른 addObserver를 작성해도 이미 사용한 이름을 쓸수있다.&lt;/p&gt;

  &lt;p&gt;이럴경우 마지막만이 아닌 해당 이름 모두 실행됨.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;name-등록-방식&quot;&gt;name 등록 방식&lt;/h3&gt;

&lt;p&gt;그럼 슬슬 이름 추가방법에 대해 쓰는게 맞는것 같다.&lt;/p&gt;

&lt;p&gt;2가지 정도가 있다.&lt;/p&gt;

&lt;p&gt;1) addObserver할때 한번에&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Post&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doItSomeThing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Add Observer&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printSomeThing(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doItSomeThing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 “doItSomeThing” 이라는 Notification.Name 데이터 타입을 만들수도 있지만&lt;/p&gt;

&lt;p&gt;별로 추천하고 싶지 않다. 재사용도 힘들고 코드도 안깔끔&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2) Extension으로 프로퍼티 추가&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;doItSomeThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doItSomeThing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification.Name&lt;/code&gt;에 프로퍼티를 추가해주면,&lt;/p&gt;

&lt;p&gt;위 코드들에 나오듯 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;자리에 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;.doItSomeThing&lt;/code&gt;을 쓸수 있기에&lt;/p&gt;

&lt;p&gt;깔끔하고 사용하기도 수월해진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;이런식으로 사용가능하다&lt;/p&gt;

&lt;p&gt;ex) 화면이 VC1 -&amp;gt; VC2 -&amp;gt; VC3 이렇게 있다고 치자, 그리고 각각 Label을 1개씩 가지고 있다.&lt;/p&gt;

&lt;p&gt;네비게이션을 이용할것이며, 화면 이동도 위와 같다. 그림으로 이해돕자면 이정도?&lt;/p&gt;

&lt;p&gt;그리고 그 3에는 버튼이 하나 있고, 이것을 누르면 Post를 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-27/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 이름부터 추가&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;changeLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;changeLabel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고,&lt;/p&gt;

&lt;p&gt;ViewController 3개가 있고&lt;/p&gt;

&lt;p&gt;각 ViewDidLoad에 addObserver해준다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/////////////////VC1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ViewDidLoad&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change1&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change1 함수 내용&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Change Label1!!!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/////////////////VC2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ViewDidLoad&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change2&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change2 함수 내용&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Change Label2!!!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/////////////////VC3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ViewDidLoad&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change3&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change3 함수 내용&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Change Label3!!!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 Bnt 버튼 메소드 정의&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;del&gt;그럼 gif는 할줄 모르니&lt;/del&gt; (방금 배움. 단축어 짱짱)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-27/img2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 Gif에 나온것처럼, 직전 VC2뿐만 아니라 현재 스택에 있는 VC1까지 모두 작동했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;옵저버-제거&quot;&gt;옵저버 제거&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;다른 의미로 여기서 잘 생각해봐야하는게, observer가 계속 살아있다는 것이다.&lt;/p&gt;

&lt;p&gt;그렇담 제거는 따로 해줘야한다는것이다. 불필요한데 계속 남아있어서 좋을것은 1도 없으니깐!&lt;/p&gt;

&lt;p&gt;제거는 간단.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;추가--post할때-값도-전달&quot;&gt;추가 : Post할때 값도 전달&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Post메소드 파라미터에 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;도 있었다. 위에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;을 넣었지만, 이 부분을 통해 값을 보낼수 있다.&lt;/p&gt;

&lt;p&gt;기존 selector에 들어가던 함수를 변경해주자(VC2랑 VC3도 변경!)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 기존&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Change Label1!!!&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 변경&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;getValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Change &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기선 String으로만 보낼것이기 때문에 강제 다운 캐스팅! (as!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;btn의 Post도 이렇게 변경&lt;/p&gt;

&lt;p&gt;타입이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;인 파라미터 &lt;code class=&quot;highlighter-rouge&quot;&gt;notification&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;가 Post에 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 기존&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 변경&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결과-1&quot;&gt;결과&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-27/img3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PS. 더 적절한 예시를 아신다면 댓글 부탁 드립니다!! 같이 공부해요!&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2018/10/27/swift-NotificationCenter.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2018/10/27/swift-NotificationCenter.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Swift) 타입 메소드 &amp; 인스턴스 메소드</title>
        <description>&lt;p&gt;Swift 코드를 보다 그런적이 있었다.&lt;/p&gt;

&lt;p&gt;“이건 분명 클래스인데, 인스턴스를 안만들고 함수를 쓰네??”&lt;/p&gt;

&lt;p&gt;오늘 나오는 메소드의 종류 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인스턴스 메소드&lt;/li&gt;
  &lt;li&gt;타입 메소드&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;메소드의-종류&quot;&gt;메소드의 종류&lt;/h1&gt;
&lt;p&gt;아래의 이미지를 보자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img1.png&quot; alt=&quot;&quot; /&gt;
(App: Scapple)&lt;/p&gt;

&lt;p&gt;오늘의 추천앱! Scapple이란 앱이에요!!&lt;/p&gt;

&lt;p&gt;블로그도 리뉴얼 했으니 추천 카테고리도 만들어야지 ㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
다시 본론으로 넘어가서!&lt;/p&gt;

&lt;p&gt;구성은 다음과 같다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;함수&lt;/li&gt;
  &lt;li&gt;클래스1
    &lt;ul&gt;
      &lt;li&gt;함수1&lt;/li&gt;
      &lt;li&gt;함수2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스2
    &lt;ul&gt;
      &lt;li&gt;함수3&lt;/li&gt;
      &lt;li&gt;함수4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서, &lt;strong&gt;함수는 전역 함수다&lt;/strong&gt;. 즉, 어디서든 접근이 가능하다는 의미이다!&lt;/p&gt;

&lt;p&gt;만약 지금 클래스1의 내부에 코드를 작성하고 있다면,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클래스1이 2를 상속하고 하고 있다&lt;/strong&gt;거나 &lt;strong&gt;클래스2의 인스턴스를 만들었다면&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클래스2 내부의 함수3,4를 접근할 수 있지만 &lt;strong&gt;그 외엔 불가&lt;/strong&gt;하다. 하지만 우리의 &lt;u&gt;전역 함수님에겐 언제든 접근이 가능&lt;/u&gt;하다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 일반적 접근인 &lt;strong&gt;인스턴스 메소드&lt;/strong&gt;를 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인스턴스-메소드&quot;&gt;인스턴스 메소드&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Instance!!&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위처럼 만들고 사용은 어떻게?&lt;/p&gt;

&lt;p&gt;이렇게&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘some’이란 인스턴스를 만들어주고, some의 내부함수인 useInstance()를 호출하여 값을 받아냈다.&lt;/p&gt;

&lt;p&gt;중요한건, &lt;strong&gt;&lt;u&gt;인스턴스를 만들고 내부함수 호출&lt;/u&gt;&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;그렇담!! 인스턴스를 안만들고 호출을 하는 방법은?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입-메소드&quot;&gt;타입 메소드&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;타입 메소드란 타입(여기선 some클래스를 의미) 자체에서 호출을 할 수 있는 메소드이다.
그건 케바케이겠지만? 우선, 책에서 본건 이런게 있었다&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사각형 면 숫자 return 하기&lt;/li&gt;
  &lt;li&gt;괴물 울음 소리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다소 어이없는 예들이지만 공통점은 있다. 당연한 값들이란것 !
코드적으로 본다면 인자값 넣고 그&lt;/p&gt;

&lt;p&gt;말이 낯설어서 이해가 안될수도 있다. 필자도 이번기회에 외움! 이 맛에 포스팅한다.&lt;/p&gt;

&lt;p&gt;내용만 알아도 된다. 이름이야뭐… 일단 이해하는게 중요하니 설명부터!&lt;/p&gt;

&lt;p&gt;일반 내부 함수랑 차이가 거의 없다 있다면 &lt;strong&gt;키워드&lt;/strong&gt; 하나가 더붙는다는것?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;  또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;일반 책에서 잘나오지 않아서 굉장히 낯설었다… 나의 함수들은 func으로만 시작하였고,&lt;/p&gt;

&lt;p&gt;그 앞에 뭐가 붙는다는건 상상도 못해봤다. 심지어 한개도 아니고 두개다(사실 하나 더 있다.)(내가모르는게 더있을수도?)&lt;/p&gt;

&lt;p&gt;우선, &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 부터 보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;키워드--class&quot;&gt;키워드 : class&lt;/h3&gt;

&lt;p&gt;일단 코드부터 보자&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 인스턴스 메소드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Instance!!&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 타입 메소드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Type!!&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음 저것을 보았을때, 신선한 충격이었다. 클래스는 클래스고 함수는 함수지 왜 한줄에 다있는걸까? 라고…&lt;/p&gt;

&lt;p&gt;우선 일반적인 클래스랑 쓰임새가 다른건 확실하다!&lt;/p&gt;

&lt;p&gt;그럼, 메인에서 일반적으로 사용을 해보자 (인스턴스 메소드 사용!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;없다. 완소 기능인 자동 완성 기능에 없다…&lt;/p&gt;

&lt;p&gt;그렇다, 타입 메소드로 지정한것은 인스턴스 메소드처럼 사용이 불가능하다.&lt;/p&gt;

&lt;p&gt;그럼, 이제 사용해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;됐다. 인스턴스를 안만들었음에도 불구하고, 사용이 가능하였다!!
그럼 이제 이걸 언제쓰냐가 궁금해질것이다. 책에서 본것들은 이런게 있었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;괴물 울음소리 String받기&lt;/li&gt;
  &lt;li&gt;사각형 면수 받기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;귀여움이 가득한 예제들이었다. 
1의 경우 괴물의 울음소리를 언제 어디서든 인스턴스 없이 가져왔고
2의 경우는 사각형 면수인 4를 가져오는 것이었다.&lt;/p&gt;

&lt;p&gt;공통점으론 당연한 것이었다. 어떻게 쓰냐에 달렸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;키워드-class의-장점&quot;&gt;키워드 class의 장점&lt;/h4&gt;

&lt;p&gt;필자는 이런 경우도 보았다. 통신, UIView가져오기 등등
따로 인스턴스를 만들지 않고 바로 바로 처리를 한 것들을 보았다.&lt;/p&gt;

&lt;p&gt;특정 반복되는 뷰라던가, 인자값으로 받아서 통신을 하고 델리게이트 패턴을 이용해 반복적으로 일어나는것을 처리하였다.&lt;/p&gt;

&lt;p&gt;그런점들이 좋았던거 같다. 인스턴스를 생성하면 이게 해제가 될지도 걱정을 안해도되고 (평소에도 잘안하긴했다..) 고로 ARC 걱정이 없을것 같다.&lt;/p&gt;

&lt;p&gt;다른 것들은 기억이 안난다, 단점으로 가자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;키워드-class의-단점&quot;&gt;키워드 class의 단점&lt;/h4&gt;

&lt;p&gt;음 확장성이 안좋았다. 아니 없었다.
당연한 값들로만 리턴을 한다? 근데 초기화가 안되어있어서 변수를 쓰지도 못한다.
내부의 변수를 사용할 수 없단건 정말 확장성에서 힘들었던거 같다. 다른 사람이 해둔 코드에 내가 변수 하나 추가해서 작업하고 싶은데, 그게 안된다;;;
파라미터를 하나 추가한다? 그럼 모든 그 함수에 추가 시켜버려야한다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;키워드--static&quot;&gt;키워드 : static&lt;/h3&gt;

&lt;p&gt;무엇이 다른걸까?&lt;/p&gt;

&lt;p&gt;우선! 위에 타입메소드의 특징?들은 똑같다. 그런데&lt;/p&gt;

&lt;p&gt;오버라이드가 가능, 불가능이다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wow&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이걸 먼저 보자, &lt;code class=&quot;highlighter-rouge&quot;&gt;class func&lt;/code&gt; 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;override&lt;/code&gt;가 붙었다!
키워드가 굉장히 길다.. 그렇지만 오버라이드 개념만 안다면 쉽게 이해할거라 생각한다.&lt;/p&gt;

&lt;p&gt;결과도 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;굉장히 잘 덮어썼다.&lt;/p&gt;

&lt;p&gt;그럼, 이제 살짝 바꿔서 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;을 써보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-10-05/img6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오오 빨간색이다. &lt;strong&gt;스태틱 메소드라고 오버라이드가 안된다한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그렇다, 큰 차이는 없지만 차이는 분명한 두가지 키워드였다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;class 키워드를 써도 오버라이드를 막을수 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; 키워드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 키워드 앞에 붙이면 된다!!
키워드 많은건 내 취향이 아니니 나는 static을 쓰겠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;ps&quot;&gt;PS&lt;/h1&gt;
&lt;p&gt;처음엔 참 낯선 용어들이었는데, 블로그를 쓰니 머리에 더 들어오는 것 같아서 좋다.&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2018/10/05/swift_basic-%ED%83%80%EC%9E%85-%EB%A9%94%EC%86%8C%EB%93%9C-&-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2018/10/05/swift_basic-%ED%83%80%EC%9E%85-%EB%A9%94%EC%86%8C%EB%93%9C-&-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>(Swift) 화면간 데이터 전달. 2편</title>
        <description>&lt;p&gt;프로토콜을 이용해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jiseobkim.github.io/swift/2018/09/02/swift-DelegatePattern.html&quot;&gt;이전글 보기 : 데이터 전달 1편&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이전 글에 이어서 프로토콜을 통해 VC2 -&amp;gt; VC1으로 데이터를 전달해보겠습니다!&lt;/p&gt;

&lt;h1 id=&quot;이전글-summary&quot;&gt;이전글 Summary&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VC2의 코드중 핵심은 위 이미지 중 아래 코드와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;타입이 VC1클래스 였고, 여기서 꼭! 해줘야하는건 아래 그림처럼 특정 클래스와 연결을 시켜줘야 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연결 방법은 간단했죠&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 “그 delegate는 나야”를 정해주면 데이터 전달이 가능하다는것이 저번 내용이었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;하지만, 이 방법도 좋지만 단점도 있습니다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이전-방식의-단점&quot;&gt;이전 방식의 단점&lt;/h1&gt;

&lt;p&gt;결론부터 말하자면,  **VC1 타입만 이전 방식이 가능하다 ** 입니다.&lt;/p&gt;

&lt;p&gt;이게 무슨말인지 감이 안오신다면! 이렇게 생각해보세요.&lt;/p&gt;

&lt;p&gt;VC2 -&amp;gt; VC1에 이름 값을 전달 해주는 화면이었죠, 그런데&lt;/p&gt;

&lt;p&gt;이름을 전달받는게 저화면뿐만 아니라면 어떻게 될까요?&lt;/p&gt;

&lt;p&gt;다르게 표현 해볼까요? 이번엔 멋진 그림으로&lt;/p&gt;

&lt;p&gt;우선 기존 방식입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VC2가 VC1의 내부 함수를 호출하는 방식이었죠,&lt;/p&gt;

&lt;p&gt;그렇담 아래 같이 새로운 VC3라는 클래스가 나타난다면 문제가 생깁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 여기서 VC2의 아래 코드는 어떻게 변경되어야할까요?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이름을 delegate2라곤 안하겠지만! 개념상 그건 중요치 않으니 패스,&lt;/p&gt;

&lt;p&gt;중요한건 VC3 클래스 타입을 가진 변수가 추가된다는 점입니다.&lt;/p&gt;

&lt;p&gt;크게 문제 될건 없지만,,,,  &lt;strong&gt;&lt;u&gt;프로토콜&lt;/u&gt;&lt;/strong&gt;을 이용한다면 장점이 더 많습니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로토콜&quot;&gt;프로토콜&lt;/h1&gt;

&lt;p&gt;그렇담 프로토콜은 무엇일까요?&lt;/p&gt;

&lt;p&gt;넷플릭스에 나오던 미국 드라마중 ‘지정생존자’란 드라마에서&lt;/p&gt;

&lt;p&gt;무슨 위급한 상황이 생기자,&lt;/p&gt;

&lt;p&gt;“OOO 프로토콜을 발동하지”&lt;/p&gt;

&lt;p&gt;이런 표현을 쓰는게 나오더군요!!&lt;/p&gt;

&lt;p&gt;그러자, 정해진 역할들을 수행해 나가더라구요&lt;/p&gt;

&lt;p&gt;네, 그래도 감이 안오는 경우가 많을거라 생각합니다, 저도 그랬거든요.&lt;/p&gt;

&lt;p&gt;그렇담, 또 다른 표현!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 책에서 주로 나오는 내용을 좀더 쉽게 설명해볼게요.&lt;/p&gt;

&lt;p&gt;‘이동 수단’에 대해 얘기해볼까요?&lt;/p&gt;

&lt;p&gt;이동 수단은 좀 상위 개념이죠, 하위 개념엔 자동차, 자전거, 버스, 택시, 기차 등등이 있을겁니다.&lt;/p&gt;

&lt;p&gt;근데, 이것들이 공통적으로 가져야할 개념이 있죠,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;빵빵이&lt;/strong&gt; 기능입니다, 클락션이라고도 하죠?&lt;/p&gt;

&lt;p&gt;이동 수단이라 하면, 타인에게 자신의 의사를 표현할 방법이 필요하죠! 위험해라던가 뭐라 표현을 해야하니깐요!&lt;/p&gt;

&lt;p&gt;이 빵빵이 기능을 탑재 해야하는 시스템을 &lt;strong&gt;빵빵이 프로토콜&lt;/strong&gt; 이라고 합시다, 클락션 프로토콜이라 하면 이름 생각하다 중요한걸 잊을테니,,&lt;/p&gt;

&lt;p&gt;그럼, 이제 자동차를 만들어 봅시다,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;윗사람이 지시&lt;/strong&gt;를 내립니다, &lt;strong&gt;“자동차를 만들땐 빵빵이 프로토콜을 적용해.”&lt;/strong&gt;라고&lt;/p&gt;

&lt;p&gt;그렇담, &lt;strong&gt;윗사람의 지시 -&amp;gt; 무조건 넣어라&lt;/strong&gt; 겠죠?&lt;/p&gt;

&lt;p&gt;대신 빵빵 소리는 상황에 따라 바꿉니다, 지하철, 버스, 자전거 등등 서로 다르게요.&lt;/p&gt;

&lt;p&gt;이러면 좀 감이 오시나요? 위의 드라마 얘기도 이해 되실겁니다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로토콜을 실행하자 각자 해야할 일들을 수행해나간다&lt;/p&gt;

  &lt;p&gt;=&lt;/p&gt;

  &lt;p&gt;프로토콜을 실행하면 각자 할일들도 있지만 무조건 해야할 것들이 생긴다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 좀더 프로그래밍틱하게 설명을 해볼게요.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프로토콜-선언&quot;&gt;프로토콜 선언&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bbang&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드가 프로토콜을 선언하는 것입니다.&lt;/p&gt;

&lt;p&gt;Bbang(빵-빵빵이의 빵)이라는 이름을 가지고 있고&lt;/p&gt;

&lt;p&gt;함수를 하나 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 뭔가좀 허젼하죠?&lt;/p&gt;

&lt;p&gt;함수명, 인자값등이 있지만 함수 내용이 없습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;반환값도 있다고 보시면 됩니다! 지금은 상황상 표현을 안했지만 Void로 리턴하고있을테고&lt;/p&gt;

  &lt;p&gt;다른 리턴값이 필요하시면 리턴형을 일반 함수때처럼 적어주시면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;자세한 내용은 프로토콜 사용되는곳에서 기술 해주면 됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마치 이런거죠,&lt;/p&gt;

&lt;p&gt;빵빵이 프로토콜을 택시, 자전거에 적용해!&lt;/p&gt;

&lt;p&gt;했을때, 자전거 만들땐 경적소리를 “띵띵” 할거야, 택시는 “빠앙” 할거야 등은 자기가 맘대로지만&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;중요한건 “경적소리 울리는 함수가 들어가야한다는 점입니다.”&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수만 선언 가능한것은 아닙니다! 변수도 선언 가능해요&lt;/p&gt;

  &lt;p&gt;하지만, 마찬가지 값을 넣어주지 않습니다만&lt;/p&gt;

  &lt;p&gt;get,set 은 기입해줘야합니다. 아래처럼요!&lt;/p&gt;

  &lt;p&gt;var text: String {get}&lt;/p&gt;

  &lt;p&gt;var text: String {get set}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자 그럼 어떻게 사용하는지 볼까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;변경된 라인은 42,54 쪽입니다. 프로토콜은 33번에 선언 되어있구요&lt;/p&gt;

&lt;p&gt;기존에 43번 라인의 변경점은 타입이 VC1에서 Bbang으로 바뀌었단 점입니다.&lt;/p&gt;

&lt;p&gt;이건 무슨의미일까요?&lt;/p&gt;

&lt;p&gt;단순하게 타입이 바뀌었다고 볼수 있지만,&lt;/p&gt;

&lt;p&gt;좀더 좋은점을 위의 VC3애기로 들자면, VC1이든  VC3이든, 저 delegate 변수 하나로 사용이 가능하단점이죠!&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런건 안해도 됩니다!&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bbang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것으로 다 해결 했거든요.&lt;/p&gt;

&lt;p&gt;그리고 변경점2(line:54)의 경우엔&lt;/p&gt;

&lt;p&gt;VC1의 함수를 호출은 이제 못하고(당연하죠?), Bbang안에 있던 waring(name:)을 호출해주었습니다!&lt;/p&gt;

&lt;p&gt;그럼 VC1쪽에 바뀐점은 무엇일까요?&lt;/p&gt;

&lt;p&gt;바꾸기전에 아무것도 안하고 나오는 오류를 봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Cannot assign value of type ‘VC1’ to type ‘Bbang?’“&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“(VC1)은 Bbang 타입이 없음 / Bbang에 VC1 넣을 수 없음”&lt;/strong&gt;  이런 의미의 경고가 뜹니다&lt;/p&gt;

&lt;p&gt;그럼 저 빨간점을 누르고 싶겠죠? 하시면 안돼요.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프로토콜-추가&quot;&gt;프로토콜 추가&lt;/h3&gt;

&lt;p&gt;빨간점눌러서 자동 해결 기능을 쓰면&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bbang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 타입을 맞춰서 얼렁뚱땅 넘어가려합니다.&lt;/p&gt;

&lt;p&gt;된다하더라도 우리에게 중요한건 &lt;strong&gt;&lt;u&gt;아직 빵빵이의 상세 기능을 추가안했죠.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;택시일땐 무슨빵빵, 자전거는 무슨빵빵 할지 정해줄겁니다.&lt;/p&gt;

&lt;p&gt;그렇담, 프로토콜 추가는 어떻게 해줄까요?&lt;/p&gt;

&lt;p&gt;클래스 상속 받듯이 하면됩니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIVIewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BBang&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 내용 생략&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로요!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;여기서, 특이한점이 하나 있습니다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;다른 언어 중 일부에선 다중상속이 가능하죠, 그렇지만 Swift에선 하나만 상속이 가능합니다, 그래서 UIVIewController를 상속 받았으면 이젠 다른건 못받습니다.  이유가 있어서 애플에서 막았겠죠? 그렇지만 일부 기능은 아쉬운 기능입니다.&lt;/p&gt;

&lt;p&gt;따라서 애플에선 프로토콜을 이용해 이를 어느정도 해결했다고 합니다!! (좀더 찾아봐야겠어요)&lt;/p&gt;

&lt;p&gt;프로토콜의 경우 클래스 상속과는 다르게 제한이 없습니다, 그래서 한개든 두개든 가능하죠&lt;/p&gt;

&lt;p&gt;그럼 코드를 봐볼까요&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류가 납니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Type ‘VC1’ does not conform to protocol ‘Bbang’“&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“VC1 타입은 Bbang 프로토콜을 따르지 않았다”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“VC1 타입은 Bbang 프로토콜을 준수하지않았다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이런 의미가 나옵니다.&lt;/p&gt;

&lt;p&gt;즉, 위의 예시에서 &lt;u&gt;**빵빵이 프로토콜 적용하라는 윗사람 말을 듣지않았다!!**&lt;/u&gt;가 됩니다.&lt;/p&gt;

&lt;p&gt;프로토콜에 있던 warning 함수를 적용해줘야합니다. 내용까지 채워서요(line:17)&lt;/p&gt;

&lt;p&gt;(여기선 빨간점 눌러서 자동 해결해도됩니다. 좋은 기능)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 함수 내부 내용은 insert(name:_)과 같은 것을 사용했습니다.&lt;/p&gt;

&lt;p&gt;그리고 동작도 똑같이 될것이구요! 이렇게하면 해당 내용은 모두 끝나게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;사실 다른 장점들도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VC3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드같은 문제가&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bbang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 사용하여 여러 VC들에서 사용 가능하단점들 말고도 좋은점은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;협업 하는사람들이 알아보기 쉽다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추가 해야할 것이 명확하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;같은 것들이 있습니다, 물론 더 있습니다! 이런 방식 말고도 다른 방식으로도 사용가능합니다.&lt;/p&gt;

&lt;p&gt;그리고, 윗사람이 시켰으니깐 무조건 따라야한다 « 라고 표현 하긴했지만,&lt;/p&gt;

&lt;p&gt;필수가 아닌 함수, 변수들도 선언이 가능해요.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1의 경우 무슨말이냐, 다른 사람이 내 코드를 볼때 프로토콜 사용하기전에&lt;/p&gt;

&lt;p&gt;insert(name:_) 이 함수를 봤다면 무슨 생각을 할까요?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“이건 이 클래스내에서 호출이 안되는데 왜있어?”&lt;/strong&gt; 라고 생각 할 수 있겠죠,&lt;/p&gt;

&lt;p&gt;검색해도 안나오니깐요, (헉 이때, privite을 쓰면 알 수 있겠네요!!! 구분용으로 써줄수도 있겠네요 ㅜㅜ&lt;/p&gt;

&lt;p&gt;글쓰다 깨닳음,,, 도대체 언제 왜 써야했는데,,, 이게 전부는 아니겠지만 용도 하나는 찾았습니다. 블로그 소재써야지 )&lt;/p&gt;

&lt;p&gt;위에 깨닳음을 통해 말하자면, private인데 검색해서 안나오면 지워도 되겠네요,&lt;/p&gt;

&lt;p&gt;그렇지만 전 안썼고 누가 제 코드를 보고 저 함수를 봤다면, “뭐야 이건 왜안지웠어?” 했을겁니다.&lt;/p&gt;

&lt;p&gt;하지만 프로토콜을 썼다면 다른 사람이 보고, 아 여기엔 이런 함수들이 들어가있겠구만&lt;/p&gt;

&lt;p&gt;그렇다면 다른 화면에서 데이터를 받아오겠네, 라고 생각을 할 것 입니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로토콜은 swift에서 많이 사용되고있습니다.&lt;/p&gt;

&lt;p&gt;테이블뷰를 써보셨다면, cellForRow와 numberOfSection 등등 함수를 적용 안하면 오류 난다고 경고를 뿜죠&lt;/p&gt;

&lt;p&gt;그래서 해당 함수들을 자동완성 기능으로 넣어보면, 내부는 깔끔하게 비어있죠!&lt;/p&gt;

&lt;p&gt;이것도 마찬가지로 해야할 것들을 알려줬을뿐 내용은 자기맘대로 하란것입니다. 리턴 규격도 지켜야하구요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2018-09-16/img8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에 보시는 바와 같이, 프로토콜입니다! 이외에도 UIScrollViewDelegate, UITableViewDelegate등등&lt;/p&gt;

&lt;p&gt;프로토콜로 이루어져있습니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;더 코드를 좋게 하려면 프로토콜 추가 별로 Extension 쓰는게 좋더라구요~&lt;/p&gt;

&lt;p&gt;그래서 다음 주제는 Extension 입니다.&lt;/p&gt;

&lt;p&gt;수고하세요~!&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2018/09/16/swift-DelegatePattern2.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2018/09/16/swift-DelegatePattern2.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
  </channel>
</rss>
