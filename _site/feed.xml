<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😀😍😉 JS의 개발 블로그 😁😆😄</title>
    <description>나만의 공간</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 16 May 2021 18:05:14 +0900</pubDate>
    <lastBuildDate>Sun, 16 May 2021 18:05:14 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>(swift) JSON 파일 불러오기(feat. Codable)</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개발을 하다보면 서버와 같이 일을 해야하는데,&lt;/p&gt;

&lt;p&gt;API가 아직 안나왔다면 조금 돌아가는 일을 선택한 적이 많았다.&lt;/p&gt;

&lt;p&gt;예를 들어 일단 기획에 나온대로 화면 미리 짜고 API가 나오면 추후에 붙인다거나?&lt;/p&gt;

&lt;p&gt;이럴 경우 2가지 경험이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;통신-파트를-제외하고-화면에-필요한-데이터-구조를-내-마음대로-만든다&quot;&gt;통신 파트를 제외하고 화면에 필요한 데이터 구조를 내 마음대로 만든다.&lt;/h3&gt;

&lt;p&gt;눈에 보이는 데이터로 모델을 만들다보니 화면을 구성하기엔 편했다.
단점은 제대로된 API가 나왔을때 구조적으로 틀어진게 너무 많다.&lt;/p&gt;

&lt;p&gt;몇번 겪어보고선 쓰지 않는 방식.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;통신-파트를-제외하고-문서에-나온대로-모델을-만든-후-화면을-구성한다&quot;&gt;통신 파트를 제외하고 문서에 나온대로 모델을 만든 후 화면을 구성한다.&lt;/h3&gt;
&lt;p&gt;고려해야할 부분도 이미 같이 구성했기 때문에 API가 나와도 크게 손댈 곳이 없다.
다만,, 테스트를 위해 더미 데이터를 만드는게 너무나도 귀찮았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;그래서 그 귀찮은 부분을 해결하기 위한 글.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;결론: 프로젝트 안에 json 파일을 생성 후 이 파일을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt; 형태로 불러와서, 실제로 통신 데이터 받은 것처럼
처리를 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점: 리스트 더불러오기 같은 경우는 여전히 API가 나온 후에 해야 편한것 같다. 
좋은 방법이 있으면 공유 해주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;json-파일-만들기&quot;&gt;JSON 파일 만들기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;새 파일을 생성하자
&lt;img src=&quot;/assets/images/2021-05-16/img-1.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;String을 검색해주고
&lt;img src=&quot;/assets/images/2021-05-16/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일명과 확장자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.json&lt;/code&gt;으로 한뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 눌러주면 다음과 같은 창이 뜬다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User .json&lt;/code&gt; 선택
&lt;img src=&quot;/assets/images/2021-05-16/img-3.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 파일의 모든 내용을 제거 한후 다음과 같이 JSON 스타일의 코드를 넣어주자 (나름 친절하게 타입도 써보았다.)&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Type: Dictionary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;totalCount&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 			&lt;span class=&quot;c1&quot;&gt;// value type: Int&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 						&lt;span class=&quot;c1&quot;&gt;// value type: [Dictionary]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그럼 이제 프로젝트내에 준비는 끝났다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-16/img-4.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 파일을 불러오는 코드를 작성&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func load() -&amp;gt; Data? {
    // 1. 불러올 파일 이름
    let fileNm: String = &quot;User&quot;
    // 2. 불러올 파일의 확장자명
    let extensionType = &quot;json&quot;
    
    // 3. 파일 위치
    guard let fileLocation = Bundle.main.url(forResource: fileNm, withExtension: extensionType) else { return nil }
    
    
    do {
        // 4. 해당 위치의 파일을 Data로 초기화하기
        let data = try Data(contentsOf: fileLocation)
        return data
    } catch {
        // 5. 잘못된 위치나 불가능한 파일 처리 (오늘은 따로 안하기)
        return nil
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3을 보면 파일명과 확장자는 나눠서 불러온다는 점을 잘 봐야하고,&lt;/p&gt;

&lt;p&gt;대소문자도 주의해주고,&lt;/p&gt;

&lt;p&gt;4의 부분에서 해당 위치의 파일을 데이터로 초기화 해주는 아주 간단한 코드.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이것을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;로 받은 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;으로 형변환을 하여 출력을 해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guard
    let jsonData = load(),
    let dictData = String(data: jsonData, encoding: .utf8)
else { return }

print(&quot;결과: \(dictData)&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드 결과는 다음과 같다.
&lt;img src=&quot;/assets/images/2021-05-16/img-5.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;codable-더하기&quot;&gt;Codable 더하기&lt;/h1&gt;

&lt;p&gt;위에서 JSON을 잘불러왔으니 모델을 만들어서 Codable을 이용해보자
&lt;a href=&quot;https://jiseobkim.github.io/swift/2018/07/21/swift-Alamofire와-Codable.html&quot;&gt;(Codable 관련 글)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;우선 모델을 생성해주자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct UserList: Codable {
    let totalCount: Int
    let users: [User]
}

struct User: Codable {
    let name: String
    let age: Int
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이번엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;를 Codable을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserList&lt;/code&gt;로 얻어 보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guard
    let jsonData = load(),
    let userList = try? JSONDecoder().decode(UserList.self, from: jsonData)
else { return }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-16/img-6.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;성공!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;예제야 짧으니 실제 작업 파일에 써도 무방하겠지만,&lt;/p&gt;

&lt;p&gt;프로퍼티만 수십가지일 경우 정말 지저분해지는 것을 봐야한다&lt;/p&gt;

&lt;p&gt;위와 같이 JSON 파일을 별도로 생성해야하는 귀찮음은 있지만,&lt;/p&gt;

&lt;p&gt;실제 작업시 더미 데이터 값을 따로 선언 및 초기화 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그래서 개인적으론 API가 아직 문서만 나온 단계라면, 이 방식을 요즘 선호한다&lt;/p&gt;
</description>
        <pubDate>Sun, 16 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/network/2021/05/16/swift-JSON-%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF-%E1%84%87%E1%85%AE%E1%86%AF%E1%84%85%E1%85%A5%E1%84%8B%E1%85%A9%E1%84%80%E1%85%B5(feat-Codable).html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/network/2021/05/16/swift-JSON-%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF-%E1%84%87%E1%85%AE%E1%86%AF%E1%84%85%E1%85%A5%E1%84%8B%E1%85%A9%E1%84%80%E1%85%B5(feat-Codable).html</guid>
        
        
        <category>Swift</category>
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>(swift) ScrollView 뿌시기 실험</title>
        <description>&lt;p&gt;이전편 8번에서부터 이어지므로 보고 오는것을 추천 - &lt;a href=&quot;https://jiseobkim.github.io/swift/ui/2021/03/17/swift-ScrollView-뿌시기.html&quot;&gt;이전글&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 에러부터!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-9.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;실험&quot;&gt;실험&lt;/h1&gt;

&lt;p&gt;위의 8부터 다시보고 차근차근 봐보자, 이것 저것 실험하기!&lt;/p&gt;

&lt;p&gt;컨텐츠의 사이즈가 모호해! 는 사라졌다. 대신에 위와 같이 X,Width 값 잡고 Y, Height도 필요하다고 나온다.&lt;/p&gt;

&lt;p&gt;하나씩 다잡아보자 X 또는 Width, Y 또는 Height.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;센터로 설정을 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-10.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-11.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;x 값을 잡아줬더니 x또는 Width 잡으라는 경고는 사라졌다. 그리곤 ScrollView의 폭만큼 늘어났다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;X는 다시 지워주고 Y만 센터로 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-12.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-13.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마찬가지로 y, height 잡으라는 경고는 사라졌다. 그리곤 ScrollView의 높이만큼 늘어났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X,Y값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;둘다 센터 0으로 잡아보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-14.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 에러가 사라졌다. 그리고 ScrollView와 같은 사이즈가 되었다.&lt;/p&gt;

&lt;p&gt;Content Layout Guide와의 상하좌우를 0으로 맞추고 센터를 0,0잡아준 결과이다.&lt;/p&gt;

&lt;p&gt;스크롤뷰 사이즈 = 컨텐츠 사이즈인 상태이다. 그러므로 &lt;strong&gt;스크롤은 되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 Content Layout Guide와의 좌,우 를 100 잡아보자( Leading만 잡아도 Trailing은 줄어드는 이유는 잘 모르겠다. )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-15.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-17.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가득 차있다가 좌우 여백 100 만큼을 갖는 사이즈로 형성이 된다.&lt;/p&gt;

&lt;p&gt;그렇다는건 반대로 여백을 반대 방향으로 잡는다면 그만큼 스크롤이 가능하게 된다는것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;반대로 하기전 스크롤 됨을 확인하기가 어려우므로 다음과 같이 이쁘게 꾸며주자 (핑크와 오렌지의 폭은 100)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-18.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Leading만 -100을 줘보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-19.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자세히 보면 왼쪽은 두줄이다. 오른쪽은 한줄이고!&lt;/p&gt;

&lt;p&gt;이상태에서 왼쪽-&amp;gt;오른쪽 드래그를 해보면 더이상 갈 수 없다. 빨간색이 bounce 동안은 볼수 있지만 해당 영역으로 스크롤을 갈 수 없다.&lt;/p&gt;

&lt;p&gt;반대로 오른쪽 -&amp;gt; 왼쪽 드래그를 해보면 주황색영역을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이때부터, 뭔가 내 생각대로 안됨을 인식하기 시작했다.&lt;/p&gt;

&lt;p&gt;Leading과 Trailing에 대해 내가 모른단 생각이 들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Trailing에 -100을 줘보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-20.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 오른쪽으로 갈 수 있는 영역이 100 만큼 생겼다. 그치만 Leading과 다르게 좌로는 늘어나지 않고 우로만 늘어났다.&lt;/p&gt;

&lt;p&gt;오.. 혼란이 온다…&lt;/p&gt;

&lt;p&gt;Leading과 Trailing은 다르다.&lt;/p&gt;

&lt;p&gt;이 얘긴 나중에 하자 길어질듯하다.&lt;/p&gt;

&lt;p&gt;공부해서오자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Leading과 Trailing을 복구 시키고 세로로만 스크롤 되게 해보자&lt;/p&gt;

&lt;p&gt;y축을 -100 줘보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-23.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;축 자체가 -100이 되기 위해선 x2만큼 늘어나야해서 200이 늘어나게 된다.&lt;/p&gt;

&lt;p&gt;어찌 됐든 스크롤은 되지만 영역잡기엔 굉장히 별로 안좋은 방법이다.&lt;/p&gt;

&lt;p&gt;그냥 상하좌우와 X,Y축 AutoLayout만으로도 스크롤을 가능하게 할 수 있다! 정도만 알게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Height, Width값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Y는 마찬가지로 초기화) 이건 한꺼번에 설정 해도 생각한대로 그려지므로 한꺼번에 설정.&lt;/p&gt;

&lt;p&gt;100, 100 으로 잡아보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-21.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 귀엽게 됐다, 아직은 컨텐츠 양이 작아서 드래그가 안되니 조금 많이 키워보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-22.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 이것도 된다.&lt;/p&gt;

&lt;p&gt;자체적인 Width, Height로도 스크롤은 가능하게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 보통은 X방향 또는 Y방향으로만 스크롤이 되게 하므로 위에 방법들은 보통의 경우에 쓰긴 추천하지 않는다.&lt;/p&gt;

&lt;p&gt;그럼 Y축 스크롤만 예를 들었을때, 좌우 폭을 잡는 방법은 다음과 같은 방식이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Frame Layout Guide와 Width를 동일시한다.&lt;/li&gt;
  &lt;li&gt;ScrollView와 Width를 동일시한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;둘의 차이점은 없다고 생각한다.&lt;/p&gt;

&lt;p&gt;다만, 구조적으로 봤을때 Frame Layout Guide를 사용한다면 스크롤뷰 내의 뷰의 사이즈를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Guide&lt;/code&gt;들을 이용해서 사이즈를 잡을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-24.png&quot; style=&quot;zoom:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스크롤뷰 내의 컨텐츠 사이즈를 정의할때, 괜히 엄한것이랑 AutoLayout 잡지 말고 Guide들로 잡아! 라는 뜻이 아닐까?&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2021/03/18/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A5%E1%86%B7.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2021/03/18/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A5%E1%86%B7.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>(swift) ScrollView 뿌시기</title>
        <description>&lt;p&gt;하 DragAnimation Final을 진행중이었는데,&lt;/p&gt;

&lt;p&gt;스크롤뷰 생성중에 새로 바뀐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guides&lt;/code&gt;을 또 아 이거뭐가 뭐였지? 해버려서&lt;/p&gt;

&lt;p&gt;이거부터 진행.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guides&lt;/code&gt; 라는 것이 어느새 새로운것이 추가 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이거 전에도 스크롤뷰 생성은 공부가 필요했다. 자체 사이즈도 잡아줘야하고, 내용물의 사이즈는 얼마일지도 잡아줘야했다.&lt;/p&gt;

&lt;p&gt;위의 옵션을 체크해주면, 스크롤뷰 하위에 다음과 같은 2개가 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새롭게 추가된 이것은 위에 말한것과 같이 기존에 필요했던 &lt;strong&gt;자체 사이즈, 내용물 사이즈를 명시&lt;/strong&gt;한 느낌이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;autolayout-적용하기&quot;&gt;AutoLayout 적용하기&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 스크롤뷰 추가하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. AutoLayout 상하좌우 걸기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-3.png&quot; style=&quot;zoom:60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 오류 구경하기&lt;/strong&gt;(컨텐츠 값을 모르겠다! 라는 대충 그런 의미)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-4.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 스크롤뷰 안에 내용물(UIView) 추가하기 - 모호 하다니깐 해주기, 여전히 스크롤뷰 누르면 4같은 에러가 보인다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-5.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 추가한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;의 상하좌우 AutoLayout을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guide&lt;/code&gt; 의 상하좌우에 걸어준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(이 부분 귀찮은데 ㅜ 쉽게 하는 방법이 궁금하다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-6.png&quot; style=&quot;zoom:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 뷰의 Size Inspector에서 Autolayout 값들을 보자, 이상한 값으로 들어가있다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-7.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이는 5와 같은 방식으로 잡아줄 경우 현재의 비율에 비례해서 걸리게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 6의 값들을 전부 1 으로 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-8.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. ScrollView 에러를 다시 보자 - 새로운 에러가 나타난다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-9.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;컨텐츠의 사이즈가 모호해! 는 사라졌다. 대신에 위와 같이 X&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Width 값 잡고 Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Height도 필요하다고 나온다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. 컨텐츠의 사이즈를 잡아준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가장 일반적으로 세로 스크롤이 되는것이 많다. 이때 Width는 스크롤뷰와 동일하게, 높이는 커스텀하게.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이때, 우리는 생각을 해야한다. 컨텐츠 레이아웃을 잡았고 필요한건 프레임의 사이즈다.&lt;/p&gt;

&lt;p&gt;따라서, 높이는 수동으로 잡아주고 폭은 스크롤뷰의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프레임&lt;/code&gt;과 같게! 걸어주며, 
이때 초반에 나온 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame Layout Guide&lt;/code&gt;를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;폭은 Frame Layout Guide와 동일하게, Height는 400으로 잡아주면 다음과 같이 되며 에러가 사라진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-16.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지만 해도 충분히 스크롤뷰 사용하는데는 문제가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;다음편은 조금 실험을 하려한다.&lt;/strong&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왜 이전 스크롤뷰 사이즈 잡는 것과 같이 프레임 자체는 ScrollView의 Width나 다른 Width를 안잡고 Frame Layout Guide를 썼을까? 라는 생각을 시작으로 다른것과도 AutoLayout을 잡아볼 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 편의 결론을 얘기하면, 다 가능하다 이전과 같이 다른것과 AutoLayout을 걸어도 된다.&lt;/p&gt;

&lt;p&gt;초반에 얘기한것처럼 컨텐츠 사이즈와 자체 사이즈를 명시한다는 느낌을 주기위해 Frame Layout Guide를 추가한 것 같다.
&lt;br /&gt;&lt;br /&gt;
애플의 의도는 아마 이것 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사이즈를 잡을때 스크롤뷰를 안벗어나고  &lt;strong&gt;Content Layout Guide&lt;/strong&gt;와 &lt;strong&gt;Frame Layout Guide&lt;/strong&gt;만으로 잡아!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 17 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2021/03/17/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2021/03/17/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>(DesignPattern) Builder</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오랫만에 블로그 글 남기기.&lt;/p&gt;

&lt;p&gt;참고 서적: gof의 디자인 패턴&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구성-요소&quot;&gt;구성 요소&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Builder&lt;/li&gt;
  &lt;li&gt;Concrete Builder&lt;/li&gt;
  &lt;li&gt;Director&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;builder&quot;&gt;Builder&lt;/h3&gt;

&lt;p&gt;Protocol&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;concrete-builder&quot;&gt;Concrete Builder&lt;/h3&gt;

&lt;p&gt;builder를 준수한 구현 클래스&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;director&quot;&gt;Director&lt;/h3&gt;

&lt;p&gt;Concrete Builder를 이용하여 객체를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; 해주는 구현 클래스&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핵심 = Builder&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Builder는 product를 속성 값을 셋팅하는 함수는 builder를 반환한다. (Chain을 쓰기 위함.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 생성시 묶을 수 있는 부분은 같이 묶는다&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) UIButton에 테두리를 만들때 보통 Color와 Width는 둘다 입력하게 되므로 인자값에 Color와 Width를 넣어 하나로 묶는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rxswift때처럼 체인 기능을 이용하여, 객체 생성때 필요한 모든 것을 한 라인(줄바꿈은 당연!)으로 생성이 가능하여, 해당 코드 분산이 적다.&lt;/li&gt;
  &lt;li&gt;위의 예시처럼 Bolder의 Width와 Color는 보통 묶어서 처리가 가능하므로 코드 라인이 더 적어진다.&lt;/li&gt;
  &lt;li&gt;product를 생성시 미리 받은 속성 값을 이용해 필수 값을 누락 했는지 안했는지 확인 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그러면 Director는?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;배우면서 개인적인 생각으론, Builder와 Concrete Builder만으로 시작 했을 듯하다.&lt;/p&gt;

&lt;p&gt;체인 기능을 쓰며, 자기가 Builder에 추상화한대로 명확하게 새로운 객체 생성이 가능해졌으며,&lt;/p&gt;

&lt;p&gt;하단의 버튼들이라던가 특정 뷰들이 생성하다보면 분명 같은 코드가 나올것이다.&lt;/p&gt;

&lt;p&gt;그럼, 이런 공통의 Concrete Builder들을 관리하는 것이 필요하다 느끼고 Builder를 Return하는 class를 만들고&lt;/p&gt;

&lt;p&gt;이름을 Director라고 붙여준것 같다는 느낌을 받았다. 개인적으로 &amp;lt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;uml---class-diagram&quot;&gt;UML - Class Diagram&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-11-12/img1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 구조로 이루어져 있으며 눈여겨 볼 것은 다음과 같다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build를 통해 객체를 돌려준다.&lt;/li&gt;
  &lt;li&gt;테두리 적용시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;를 같이 받는다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고, Director는 미리 정의한 버튼의 Builder를 준수한 객체를 반환 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;code&quot;&gt;CODE&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;builder--concretebuilder&quot;&gt;Builder &amp;amp; ConcreteBuilder&lt;/h3&gt;

&lt;p&gt;메소드들중 일부만 코드로 보자&lt;/p&gt;

&lt;p&gt;(프로토콜은 위에 그림으로 충분하므로 코드 생략.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonConcreteBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;생략&lt;/span&gt;
 		&lt;span class=&quot;c1&quot;&gt;// 텍스트 입력&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 테두리 적용 (컬러와 폭을 한번에 받아 보다 쉽게 적용)&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 객체 반환&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;director-1&quot;&gt;Director&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonDirector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;highLightColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;withAlphaComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bgColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boldSystemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;screenFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;screenSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;45.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


      	&lt;span class=&quot;c1&quot;&gt;// 1. Chain을 이용하여 값 셋팅&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonConcreteBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setBGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitleHighlightedColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highLightColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Director도 프로토콜을 생성하여 준수하게 만들면 좋겠지만? 얘는 일단 이렇게 합시다. 내가 필요한건 공통적으로 하단에서 쓰일 버튼이니깐!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 눈 여겨 보아야할 것은 주석 부분이다.&lt;/p&gt;

&lt;p&gt;체인을 이용하여 연달아서 값을 적용 할 수 있으며, 분산이 안됨을 느낄 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 마무리론 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build()&lt;/code&gt;하여 버튼 객체 반환.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;사용&quot;&gt;사용&lt;/h1&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 아주 간단하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Director&lt;/code&gt;를 통해 화면에 버튼을 추가했다.&lt;/p&gt;

&lt;p&gt;결과는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-11-12/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;한줄평&quot;&gt;한줄평&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Builder 패턴은 명확하고 통일성 있게 객체를 생성할 수 있으며 간단한 컴포넌트에 적당한 느낌.&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/designpattern/2020/11/12/designPattern-DesignPattern-Builder.html</link>
        <guid isPermaLink="true">http://localhost:4000/designpattern/2020/11/12/designPattern-DesignPattern-Builder.html</guid>
        
        
        <category>DesignPattern</category>
        
      </item>
    
      <item>
        <title>(xcode) 반성글 - 다크모드 적용 안하기</title>
        <description>&lt;p&gt;원래는 DragAnimation 글을 이어 가야하나, &lt;br /&gt;
반성과 다시는 같은 실수 안하자는 의미로 글을 적는다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최근 배포를 위해 빌드를 올리다보면 &lt;br /&gt;
4월부터 Xcode11을 강제로 적용해야 업뎃이 가능하다고  &lt;br /&gt;
경고문을 띄워주었다. &lt;br /&gt;
그래서 회사 앱중 하나를 Xcode11로 적용하기로 했었다. &lt;br /&gt;
근데 회사 앱들이 오래전에 만들어져 &lt;br /&gt;
라이브러리도 업뎃한지 오래전이고, 스위프트 버젼도 4.1이었다. &lt;br /&gt;
이것도 내가 3버젼대에서 올려둔거였었다.  &lt;br /&gt;
이 이상은 올리면 오류가 많이 터졌었어서 어찌보면 방치되었었다. &lt;br /&gt; 
이참에 버젼도 5대로 올려야겠다 싶어서 올렸었지만 라이브러리들이 오류 뿜뿜해서 &lt;br /&gt;
4.2갔다가 여기서 일부 업뎃하고, 5로 가서 나머지 충돌들을 해결했다.  &lt;br /&gt;
사용자들이야 버젼이 어찌되고 라이브러리가 어찌되고 모르겠지만,  &lt;br /&gt;
나름 미루었던 큰일을 해내서 기뻐하고 있었다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 기쁨은 오래가지 않았다. &lt;br /&gt;
배포후에 오류 문의가 하나 들어왔는데, 화면이 이상하다고 한다.&lt;br /&gt; 
이유를 찾아보니 다크모드가 문제였다. 보고 정말 충격이었다. &lt;br /&gt;
앱이 완전 개판이 되었다.&lt;br /&gt;
세상 끔찍했다. 앱스토어 리뷰를 보니 관련 댓글들도 읽고 충격이었다. &lt;br /&gt;
사용자 입장에선 많이 불편했을거란&lt;br /&gt;
심정을 느낄 수 있는 글들이었다. &lt;br /&gt; 
연예인들이 악플에 고생 많을거 같단걸 직접 체험했달까.&lt;br /&gt;
후,, 그거는 심정들을 이해하니 그럴수 있다고 생각해서 금방 이겨냈지만, &lt;br /&gt;
가장 안타까웠던건 내가 그런걸 배포했다는게 아직도 충격이다. &lt;br /&gt;
나름 테스트 꼼꼼하게 했다 생각했지만, &lt;br /&gt; 
언어, 라이브러리, 요청사항에 대한 것들만 해당되었고,&lt;br /&gt;
툴 업데이트에 대한 것을 찾아보지않은 점을 다시 한번 반성한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나름 회사 입사 후에 배포 사고 한번 안쳤고, 잘 해왔다고 생각했지만, &lt;br /&gt;
경력 3년차인 지금 입사 이후 가장 큰 사고를 쳤다.&lt;br /&gt;
이로 인해, 영업과 운영측 분들이 &lt;br /&gt;
처리해야할 사항들이 생겼던 점을 죄송스럽게 생각하며,&lt;br /&gt;
큰 사고라 생각됨에도 한마디도 타박하지않은 부장님과 &lt;br /&gt;
그런걸 다 할 수 있으면 여기 있었겠냐며 말을 해주신 영업 팀장님과 &lt;br /&gt;
위로의 말을 해준 다른 부서분들에게 감사함을 느끼고 있다. &lt;br /&gt;
정말 좋은 사람들이 많은 회사다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 일을 계기로, &lt;br /&gt;
툴 업데이트에 대한건 함부로 하면 안된다는 점을 알게 되었고, &lt;br /&gt;
또 내가 모르는 사항들이 있을 수 있으니 &lt;br /&gt;
배포전 전체적으로 테스트 할 수 있는 &lt;br /&gt; 
그런 프로세스를 구축해두어야겠다 느꼈다.&lt;br /&gt; 
UnitTest가 앱 셋팅이 문제인지 &lt;br /&gt;
Test Run 조차 되지 않는 문제가 있어서 포기했었는데,&lt;br /&gt; 
이거도 손봐야겠다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;다크모드-적용-안하기&quot;&gt;다크모드 적용 안하기&lt;/h1&gt;

&lt;p&gt;Xcode11로 앱을 빌드할 경우, 시스템의 다크 or 라이트 모드를 따라서 자동으로 셋팅이 되버린다.&lt;br /&gt;
다크 모드에 대한 셋팅을 하는 방법은 2가지가 있다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;plist 파일에 선언&lt;/li&gt;
  &lt;li&gt;코드 적용 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;plist-파일에-선언&quot;&gt;plist 파일에 선언&lt;/h2&gt;

&lt;p&gt;현재 다크 모드를 준비하기 여건이 마땅치 않다면, &lt;br /&gt;
Xcode11로 올리고 강제로 라이트 모드처럼만 보이고 싶을것이다. 나처럼.&lt;br /&gt;
위의 반성껀도 해결을 plist에 선언 해줌으로써 우선 해결을 하였다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;plist에 아래와 같이 두가지 보기 방식이 있으니 둘다 적어보자. 난 반성해야하니깐&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;property-list&quot;&gt;Property List&lt;/h3&gt;

&lt;p&gt;우선, 기본 상태인 Property List에서 오른쪽 클릭을 하면 다음과 같은 메뉴가 나오며,&lt;br /&gt;
이 상태에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Row&lt;/code&gt;를 누르면 한 줄이 추가가 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img2.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 새로운 Key와 Value를 적을 수 있는데,&lt;br /&gt; 
key 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;정도 까지만 적어도 아래 이미지와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Interface Style&lt;/code&gt;이라는 항목이 보일 것이다. &lt;br /&gt;
이것을 선택 or 입력해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img3.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;으로 기본 셋팅이 될것이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; 부분에 올 수 있는것은 2가지다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Light&lt;/li&gt;
  &lt;li&gt;Dark &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대소문자 신경쓰자. 스펠링 틀리거나 대문자로 시작 안할 경우 디폴트 값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Light&lt;/code&gt;로 적용이 된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img4.jpg&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;위에 보면 Key, Value 값으로 들어간다는건 Dictionary 형태라는걸 알 수 있었고,&lt;br /&gt;
소스코드 상으로 보면 아래 이미지와 같고, 
시작을 알리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dict&amp;gt;&lt;/code&gt;와 끝을 적어주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/code&gt;인 빨간 부분이 보일것이다.&lt;br /&gt;
그 사이에 노란 부분처럼 다음코드를 적당한 위치에 아무곳에 적어주면 적용이 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img5.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드로-적용&quot;&gt;코드로 적용&lt;/h2&gt;

&lt;p&gt;코드로 적용할때도 2가지 정도로 나누어 진다. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AppDelegate Or SceneDelegate 적용&lt;/li&gt;
  &lt;li&gt;ViewController 적용 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;둘다 기본적으로 방식은 동일하다. 스타일을 override 해주면 된다. &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AppDelegate or SceneDelegate &lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window?.overrideUserInterfaceStyle = .light
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewController &lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.overrideUserInterfaceStyle = .light
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두가지의 차이라 함은 &lt;br /&gt;
1은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt;에 적용하다보니 모든 화면에 적용되는 반면,&lt;br /&gt;
2는 해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;에서만 적용이 된다는 점이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ps-시뮬레이터에-다크모드-키는-방법&quot;&gt;ps. 시뮬레이터에 다크모드 키는 방법&lt;/h2&gt;

&lt;p&gt;홈 - 설정 - 개발자 - Dark Appearance - On &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시는 이런 실수 하지말자.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2020/03/29/xcode-PreventDarkMode.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2020/03/29/xcode-PreventDarkMode.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(swift) DragAnimation(2/3) - Transform</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt; 이란 주제로 설명을 하려다보니 대충 알고 있었음을 알게 되었다. &lt;br /&gt; 
그러다보니 여기서 생각보다 오래걸렸다 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 녀석을 배워보자. 단어부터 보자&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Transform&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;바꾸어 놓다 2. 변화시키다 3. 만들다 4. 변모시키다 5. 변형시키다&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;전부 변화에 관한 얘기다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후에 다음과 같은 코드가 많이 나온다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view.transform = 블라블라
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;블라블라 부분은 뒤에서 설명하고 그 앞만 보면 &lt;br /&gt;
“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;를 변화,변경,변모 시키다.” 로 되겠지? &lt;br /&gt; 
영어권은 코딩이 참 쉬울거 같다. 부럽다 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대충 뭘 하겠단건 알겠고, 무엇을 할 수 있는지 보자.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;크기 (Scale)&lt;/li&gt;
  &lt;li&gt;회전 (Rotate)&lt;/li&gt;
  &lt;li&gt;좌표, 위치 (translation) &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;단어뜻과 아주 잘 맞는 역할들을 한다.&lt;br /&gt;
시각적으로 효과를 먼저 보자.&lt;br /&gt;
(Animation으로 해야 좀더 이해하기 쉬워서 이용하였으며, 기본적으로 적용되지 않는다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;차례대로 크기, 회전, 위치 변경이다. &lt;br /&gt;
(제일 아래 스위치는 크기와 위치 두가지를 동시에 효과를 주는 스위치로 뒤에 나온다.) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;근데, 크기를  바꾸는것을 유심히 보면 특이한 점이 있다. &lt;br /&gt;
안에 하얀색 작은 사각형이 있는데, 이 녀석도 같이 커진다. &lt;br /&gt;
그럼 텍스트를 넣고 이번엔 스위치를 키면 &lt;strong&gt;가로 사이즈는 작아지게&lt;/strong&gt; 하였고 세로는 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 텍스트 세로로 늘어나고, 가로는 줄어 들었다. &lt;br /&gt;
마치 저 자체가 &lt;strong&gt;이미지&lt;/strong&gt;였던것처럼 변화하였다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 녀석에 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAffineTransform&lt;/code&gt;이다. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이 녀석에 대한 문서를 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음.. 자세한건 각자 보도록 하자…. 링크는 &lt;a href=&quot;https://developer.apple.com/documentation/coregraphics/cgaffinetransform?language=objc&quot;&gt;여기..&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAffineTransform&lt;/code&gt;이란 단어 아래 문구는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An affine transformation matrix for use in drawing 2D graphics &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아핀 행렬이 뭔지는 모르겠다만 뒤에 2D graphics를 보니 &lt;strong&gt;Frame&lt;/strong&gt;을 바꾸고 그런게 아니라 &lt;br /&gt; 
&lt;strong&gt;그래픽적&lt;/strong&gt;으로 처리를 하는 방식인가보다. &lt;br /&gt;
이러한 방식이다보니, 단순 도형이 아니라면 효과를 줄때 주의를 해야할 것 같다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 이제 사용법에 대해 알아보자 &lt;br /&gt; 
(스위치 4개를 모두 하나의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IBAction&lt;/code&gt; 함수에 연결 시켰고 그 함수의 내용은 다음과 같다)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 선언
var transform: CGAffineTransform?

// sender = 스위치 / 스위치 종류에 따른 Switch문
switch sender {
case scaleSwitch:
    // 2-1. 초기화(크기)
    transform = CGAffineTransform(scaleX: 0.5, y: 2)
case rotateSwitch:
    // 2-2. 초기화(회전)
    transform = CGAffineTransform(rotationAngle: .pi)
case translationSwitch:
    // 2-3. 초기화(위치)
    transform = CGAffineTransform(translationX: 0, y: -100)
case complexSwitch:
    // 2-4. 초기화(크기 &amp;amp; 위치)
    transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
default:
    return
}

// 애니메이션 효과
UIView.animate(withDuration: 0.3) {
    // 3. 적용
    self.justView.transform = transform!
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;굉장히 단순 하다. &lt;br /&gt;
하나씩 봅시다. (인자들은 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGFloat&lt;/code&gt; 타입) &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;크기&quot;&gt;크기&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(scaleX: 2, y: 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원하는 배율을 적어주면 된다. 가로로 몇배, 세로로 몇배. 쉽다.&lt;/p&gt;

&lt;h2 id=&quot;회전&quot;&gt;회전&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(rotationAngle: .pi)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원하는 회전 각을 적어주면 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pi&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pi / 4&lt;/code&gt;  등등 원하는대로!&lt;/p&gt;

&lt;h2 id=&quot;위치&quot;&gt;위치&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(translationX: 0, y: -100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;은 변환인거 같은데,, &lt;br /&gt; 
솔직히 다른것처럼 확 와닿진 않는다. &lt;br /&gt; 
넣는 x,y 값만큼 기존 값에 더해지게 된다. &lt;br /&gt;
여기선 x는 0, y는 -100 했기 때문에, 가로축 이동은 없고 세로축은 위쪽으로 100만큼 이동하였다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 해당 뷰의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform&lt;/code&gt;에 적용해 주면 된다.&lt;/p&gt;

&lt;h2 id=&quot;원상-복구&quot;&gt;원상 복구&lt;/h2&gt;

&lt;p&gt;적용했으니 되돌리는것도 필요한건 당연 &lt;br /&gt;
아주 간단하다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.justView.transform = CGAffineTransform.identity
// or 
self.justView.transform = .identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;(혹시 누군가 본다면, 아래 주의 꼭 보시길) &lt;br /&gt;
두가지 이상의 조합을 원할땐 어떻게 할까? &lt;br /&gt;
예를 들어, 위치가 이동하면서 크기에 변화를 주고 싶다면? &lt;br /&gt; 
혹은 회전하면서 크기 변화도 같이 주고 싶다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 위의 코드 2-4 부분에 보면 다음과 같은 코드가 있었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 2-4. 초기화(크기 &amp;amp; 위치)
transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;딱보면 누가 봐도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;크기&lt;/code&gt;에 대해 변화도 주고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;위치&lt;/code&gt;값도 조절하게 생겼다. &lt;br /&gt;
 위에 gif에 생략된 마지막 4번째 스위치에 대한 동작을 보자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 짤과 같이 크기(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;)변화가 있으면서 위치(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;)에 대한 변화도 있다.&lt;br /&gt;
저기서 끝이아니라 회전도 가져다 붙여줄 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q.이미 Scale이 있는데, Scale을 한번더 붙이면 어떻게 되나? &lt;br /&gt;
A. scale이 둘다 안먹힐때도 있고 마지막만 먹힐때도 있고 중구 난방이었다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;주의&quot;&gt;주의!!&lt;/h2&gt;
&lt;p&gt;쓰다가 발견했는데, 아래 심화 부분글 쓰다보니 잘못 이해한게 있었다. &lt;br /&gt;
아래 보면 알겠지만, 행렬 곱셈이 들어가기 때문에 두개의 순서가 바뀌면 예상치랑 달라진다. &lt;br /&gt;
A * B와,,, B * A는 다르다…..  더 자세한건 아래에. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;살짝-심화&quot;&gt;살짝 심화&lt;/h2&gt;

&lt;p&gt;(기본적인 사용법은 위가 전부. 아래는 아주 아주 살짝 심화랄까? ..) &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 아이를 콘솔에 찍어보면 어떻게 나올까? &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 원상 복구 값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.identity&lt;/code&gt; 출력 값을 보자 &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CGAffineTransform(a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: 0.0, ty: 0.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;는 1이고 나머진 0이 기본이란걸 알 수 있다.&lt;/p&gt;

&lt;p&gt;위에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;문에 있던 애들을 각각 찍어보자. 아래 코드처럼.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 선언
var transform: CGAffineTransform?

switch sender {
case scaleSwitch:
    // 2-1. 초기화(크기)
    transform = CGAffineTransform(scaleX: 2, y: 2)
case rotateSwitch:
    // 2-2. 초기화(회전)
    transform = CGAffineTransform(rotationAngle: .pi)
case translationSwitch:
    // 2-3. 초기화(위치)
    transform = CGAffineTransform(translationX: 0, y: -100)
case complexSwitch:
    // 2-4. 초기화(크기 &amp;amp; 위치)
    transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
default:
    return
}

// 3. 출력
print(transform!)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3에 보면 transform이란 것에 대해 출력이 추가 되었다.( 이쁘게 출력하기 위해 강제해제&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; )&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 크기
CGAffineTransform(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: 0.0)
// 2. 회전
CGAffineTransform(a: -1.0, b: 1.2246467991473532e-16, c: -1.2246467991473532e-16, d: -1.0, tx: 0.0, ty: 0.0)
// 3. 위치
CGAffineTransform(a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: 0.0, ty: -100.0)
// 4. 크기 &amp;amp; 위치
CGAffineTransform(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: -200.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tx&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ty&lt;/code&gt; &lt;br /&gt;
문서에서 얼핏 본듯 하여 문서를 다시 보았다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img2.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt; 그래픽적으로 표현하는구나 하였었고, 이는 3x3 행렬로 보여주는 형식이었다. &lt;br /&gt; 
근데 아랫줄에 보면 다음과 같이 적혀있다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3번째 컬럼은 항상 (0,0,1)이다. 고로 CGAffineTransform은 1열과 2열에 대한 값을 가지고 있다. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다 한다. &lt;br /&gt; 
그렇지만 아핀행렬에 대해서 공부하기엔,,, ㅎ &lt;br /&gt;
이 문서로만 이해해보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 이미지 같은 형식으로 각각 초기화하게 된다. &lt;br /&gt; 
가장 기본은 위에 나온것 처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tx&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ty&lt;/code&gt; 이며, &lt;br /&gt; 
이건 필자처럼 어렵게 생각하니 쉽게 쓰라고 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotationAngle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;을 이용하여 사용성을 높힌듯 하다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 두가지를 이용한 4를 보면, 저 값은 (위치 행렬 x 크기 행렬)과 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하.. 잘봐야한다.. &lt;br /&gt;
2-4의 순서가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;라서 &lt;br /&gt;
당연히  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;인줄 알았더만 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; 이었다…. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A * B와 B * A는 다르니….. 사용에 굉장히 주의바람 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img5.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(A: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; B: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;)&lt;br /&gt;
의도는 -100 이었지만 -200에 해당되는 이동을 하게된다. 조심바람…. &lt;br /&gt;
-100 만큼 이동하고 2배로 키우고 싶었다면 아래 O 부분처럼 해야한다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// X
transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)

// O
transform = CGAffineTransform(translationX: 0, y: -100).scaledBy(x: 2, y: 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;윗 부분은 스케일도 두배만큼 이동하나보다… &lt;br /&gt;
B * A는 다음과 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img4.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a = 2 x 1&lt;/li&gt;
  &lt;li&gt;d = 2 x 1&lt;/li&gt;
  &lt;li&gt;tx = 0 x 1&lt;/li&gt;
  &lt;li&gt;ty = -100 x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: -200.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 정의가 된다. 위에 4번과 일치 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이것을 정말 잘 이해한다면, 멋지게 사용이 가능할 것 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하 수정을 도대체 몇번을 한건지…. 몇시간이며 끝날줄 알았던 내용이 역대급으로 오래 걸린듯하다.&lt;/p&gt;

&lt;h2 id=&quot;끝&quot;&gt;끝.&lt;/h2&gt;
</description>
        <pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2020/03/25/swift-DragAnimation_Step2_Transform.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2020/03/25/swift-DragAnimation_Step2_Transform.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>(swift) DragAnimation(1/3) - Gesture(Long &amp;pan)</title>
        <description>&lt;p&gt;오랫만에 포스팅…………. 여러모로 힘든 시기였다 ㅠ 기운내자&lt;/p&gt;

&lt;p&gt;개인적으로는 iOS의 장점중 하나가 부드러운 동작이라 생각한다.&lt;/p&gt;

&lt;p&gt;그래서 개인적으론 웹뷰를 선호하지 않는 이유중 하나는 웹뷰로도 동작이 부드러울수는 있으나,&lt;/p&gt;

&lt;p&gt;네이티브의 부드러움을 따라가는 앱은 보지 못했다.&lt;/p&gt;

&lt;p&gt;그리고 부드러운 동작과 잘 맞는 애니메이션은 사용자가 앱에 더 관심을 갖게 해주고, 좋은 경험(UX)를 준다고 생각한다.&lt;/p&gt;

&lt;p&gt;화면 하나를 띄울때도 단순히 보여주는게 아닌 어떻게 해야 더 자연스럽고 좋은 경험을 유저에게 선사할 수 있을지&lt;/p&gt;

&lt;p&gt;고민하고 시도하는 개발자가 좋은것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 시도한 UI 따라하기!&lt;/p&gt;

&lt;p&gt;몇몇 앱들보면 특정 UIView 또는 UIButton 등을 길게 누르면 이동 시키고, &lt;br /&gt; 
다른 뷰 위에 올릴시 새로운 액션이 일어남을 볼 수 있는 앱들이 있었다.&lt;/p&gt;

&lt;p&gt;이런 앱들 보면서 어떻게 하면 저렇게 될까? 라는 생각하다가 시도를 해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 편은 3편으로 이루어질것이고, 순서는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Gesture - Long Press&lt;/li&gt;
  &lt;li&gt;Transform&lt;/li&gt;
  &lt;li&gt;응용하기 (1 + 2)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;무엇을 만들게 될지 결과물부터 보고 이야기를 진행하는게 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-01/gif1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;del&gt;아아… 테마 바꾸고 이미지를 로컬에서 못불러서 푸시하고 확인하는것 반복하다 이건 아니다 싶어서
로컬로 불러오게끔 하는데, 삽질을 너무 많이 했다…..
그건 성공했는데, 이미지 왜케 크니?….
내일 이어서 적어야겠다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에 gif 파일을 보면 특징은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스크롤뷰이며 위 아래 스크롤이 가능하다.&lt;/li&gt;
  &lt;li&gt;롱터치시 터치된 뷰의 Frame과 Alpha값이 변화하며 클릭(터치)한채로 움직이면 따라 움직인다.&lt;/li&gt;
  &lt;li&gt;2의 상태로 가운데 사각형의 영역에 들어가면 가운데 사각형이 반응을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 점이 다른 유명 앱들에서 보이는 액션들이었다. 그렇담 위와 같은 액션에서 주목해야할 점은 무엇일까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스크롤뷰이며 위 아래 스크롤이 가능하다.
    &lt;blockquote&gt;
      &lt;p&gt;롱터치 후에 위아래 움직이는 것과 스크롤뷰의 터치후 위아래 움직이는것의 구분이 필요하다.
(쉽게 말해 터치된 후 위아래로 움직이는데 스크롤뷰도 위아래로 움직이면 안된다는 뜻)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;롱터치시 터치된 뷰의 Frame과 Alpha값이 변화하며 클릭(터치)한채로 움직이면 따라 움직인다.
    &lt;blockquote&gt;
      &lt;p&gt;롱터치 후 Frame과 Alpha값에 변화를 주고 드래그에 따라가도록 해야한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;2의 상태로 가운데 사각형의 영역에 들어가면 가운데 사각형이 반응을 한다.
    &lt;blockquote&gt;
      &lt;p&gt;사각형 안에 들어갔을때 사각형이 반응하게 하려면, 현재 터치된 정확한 위치 정보를 알아야 한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;주의&quot;&gt;주의:&lt;/h3&gt;
  &lt;p&gt;이 시리즈에선 스크롤뷰를 생성하고 적용하는 법은 따로 다루지 않는다. &lt;br /&gt;
필자는 스크롤 뷰 안에 스택뷰를 넣고 코드로 뷰를 추가하는 형식을 이용하였기에 gif 하단에 Add와 Clear버튼이 존재&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 글의 도입부와 같이 3가지로 포스팅을 나눠서 진행!&lt;/p&gt;

&lt;p&gt;이 글에선 상대적으로 쉬운 제스쳐에 관해서 글을 적어본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;gesture&quot;&gt;Gesture?&lt;/h1&gt;

&lt;p&gt;제스처란 순수하게 한글로 얘기하면 동작이라 볼 수 있다.
&lt;br /&gt;&lt;br /&gt;
그렇담 앱에서 동작이란 무엇일까?
사용자의 액션이라고 볼 수 있을 것 같다.
&lt;br /&gt;&lt;br /&gt;
가장 간단한 제스쳐는 터치다.&lt;br /&gt;
기본적으로 앱을 사용하려면 사용자가 해야할 액션은 터치일 것이다.
&lt;br /&gt;&lt;br /&gt;
내가 원하는 화면으로 이동을 해야하고, 원하는 아이템을 선택해야하고,&lt;br /&gt;
그 아이템을 삭제하던 추가하던 저장하던 원하는것을 하려면 그에 해당되는 것을 눌러야한다.
&lt;br /&gt;&lt;br /&gt;
이와 같이 누르는 행위가 하나의 제스쳐이다.&lt;br /&gt; 
이 터치 외엔 무엇이 있을까&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;드래그(두손가락 터치,세손가락, 네손가락…)&lt;/li&gt;
  &lt;li&gt;롱터치&lt;/li&gt;
  &lt;li&gt;스와이프&lt;/li&gt;
  &lt;li&gt;핀치 투 줌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
지금은 여기까지만 생각난다.. &lt;br /&gt;
뭐 아무튼 이런 것들이 있다.
&lt;br /&gt;&lt;br /&gt;
이 글에서는 롱터치 대해서 알아볼 것이다. &lt;br /&gt;
여기서부터는 필요한 내용만 간결하게 씁시다. 읽기 쉽게.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;long-press-gestrue-롱터치&quot;&gt;Long Press Gestrue (롱터치)&lt;/h1&gt;

&lt;p&gt;롱 프레스는 뭔가 거부감이 드니 롱터치라고 하겠다.&lt;/p&gt;

&lt;p&gt;일단 적용하는 코드부터 보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Long Press Gesture - 선언
let longTouchGesture = UILongPressGestureRecognizer(target: self, action: #selector(longTouchAction(_:)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;뒷부분이 어디서 많이 본거 같다. 버튼에 액션 넣을때 많이 봤을 것이다. 그리고 인자들은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;타겟: 롱터치 했을 때, 어디서 처리할거야? &lt;br /&gt;
액션: 롱터치 했을 때, 무슨 처리할래?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 제스쳐에 대한 정의만 된 것이다. 그렇담 이 제스쳐를 어딘가에 적용을 시켜줘야겠지?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Long Press Gesture - 적용
view.addGestureRecognizer(panGestrue)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시말해 의미는 다음과 같다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;를 롱터치 했을 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longTouchAction(_:)&lt;/code&gt; 라는 함수를 실행하자~&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;근데 여기서 longTouchAction이라는 함수를 보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc
func longTouchAction(_ recognizer: UILongPressGestureRecognizer) {
    print(recognizer.state.rawValue)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@objc&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selector&lt;/code&gt;에다 써주려면 써야하고, &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recognizer&lt;/code&gt;라는 애가 제스쳐에 대한 정보를 가지고 있다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이를 통해 많은 것을 알 수 있지만 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.state&lt;/code&gt;에 대해서 알아보자.
&lt;img src=&quot;/assets/images/2020-03-01/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;이고 자료형은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;이다. 그렇단건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;랑 궁합이 잘 맞겠다는 말~&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;이니 종류를 한번 보자.
&lt;img src=&quot;/assets/images/2020-03-01/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뭐가 많다. 세분화해서 사용 가능하다.&lt;/p&gt;

&lt;p&gt;근데 이 글에선 롱터치의 시작, 종료, 변화에 대해서 알면 된다.&lt;/p&gt;

&lt;p&gt;다시말해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.began&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ended&lt;/code&gt; 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.changed&lt;/code&gt;만 알면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래의 코드를 보자.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc
func longTouchAction(_ recognizer: UILongPressGestureRecognizer) {
    switch recognizer.state {
    case .began:
        // 롱터치 시작
        break
    case .ended:
        // 롱터치 종료
        break
    case .changed:
        // 터치 후 변화
        // 1
        let point: CGPoint = recognizer.location(in: self.view)
        // 2
        let point2: CGPoint = recognizer.location(in: self.longTouchView)
    default:
        // 나머지 불필요
        break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.began&lt;/code&gt; &lt;br /&gt;
롱프레스가 시작 됐다를 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ended&lt;/code&gt; &lt;br /&gt;
롱프레스가 끝났다를 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.changed&lt;/code&gt; &lt;br /&gt;
얘를 주목하자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location(in:_)&lt;/code&gt;이 무엇이냐 하면, 문서상 이렇게 써있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Summary&lt;br /&gt;
Returns the point computed as the location in a given view of the gesture represented by the receiver.&lt;br /&gt;&lt;br /&gt;
Declaration&lt;br /&gt;
func location(in view: UIView?) -&amp;gt; CGPoint&lt;br /&gt;&lt;br /&gt;
Discussion&lt;br /&gt;
The returned value is a generic single-point location for the gesture computed by the UIKit framework. It is usually the centroid of the touches involved in the gesture. For objects of the UISwipeGestureRecognizer and UITapGestureRecognizer classes, the location returned by this method has a significance special to the gesture. This significance is documented in the reference for those classes.&lt;br /&gt;&lt;br /&gt;
Parameters&lt;br /&gt;
view    &lt;br /&gt;
A UIView object on which the gesture took place. Specify nil to indicate the window.&lt;br /&gt;&lt;br /&gt;
Returns&lt;br /&gt;
A point in the local coordinate system of view that identifies the location of the gesture. If nil is specified for view, the method returns the gesture location in the window’s base coordinate system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어렵다, 쉽게 말해 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;당신이 터치한 위치 정보(좌표)를 알려 줄게! 어느 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;를 기준으로 할지 알려줘&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 전체 화면상 x,y가 몇인지 알면 좋긴 하겠지만, &lt;br /&gt;
특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;위에서 x,y가 몇인지 계산하기 귀찮으니 기준점을 알려주면 알아서 계산된 값을 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 말해, &lt;br /&gt;
위에 주석 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; 기준으로 x,y를 알려주는 값이고 &lt;br /&gt;
위에 주석 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.panGetstureView&lt;/code&gt; 기준으로 x,y를 알려주는 값이다. &lt;br /&gt;
(마치 view의 frame과 bound 차이 그런 느낌…?)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.changed&lt;/code&gt;를 잘 생각해보자, &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.began&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ended&lt;/code&gt;는 한번만 호출되지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.changed&lt;/code&gt;는 바뀔때마다 호출이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한마디로 롱터치 시작 후 &lt;strong&gt;변화&lt;/strong&gt;되는 &lt;strong&gt;위치값&lt;/strong&gt;을 알 수 있다.&lt;br /&gt;
이를 이용하면, 위에 GIF와 같이 롱터치후 변화 되는 값에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;를 이동시켜줄 수 있다는 말이 된다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(잘 이해가 안된다면 위 코드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point2&lt;/code&gt;를 주석걸고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt;해서 x, y값에 대해 보면 이해에 도움이 될 것 같다.)&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2020/03/01/swift-DragAnimation_Step1_Gesture(Long-&-pan).html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2020/03/01/swift-DragAnimation_Step1_Gesture(Long-&-pan).html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>(Xcode) Configuration 파일 다루기 - (적용)</title>
        <description>&lt;p&gt;처음으로 vi를 이용해 글쓰다가 iterm이 죽음,, 다날라감….. 이 포스팅 절반은 쓴거 같은데……….&lt;/p&gt;

&lt;p&gt;안그래도 아파서 힘든데………. 부들부들&lt;/p&gt;

&lt;p&gt;허허허,, 다시 쓰는거니 좀더 깔끔하게 글이 나올려나?&lt;/p&gt;

&lt;p&gt;최대한 간결하게 해야겠다&lt;/p&gt;

&lt;p&gt;다시 처음 쓰는것 마냥 고고&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 Config 파일을 만들고 적용하는것을 포스팅 할 것이다! &lt;a href=&quot;https://jiseobkim.github.io/xcode/2019/07/22/swift-Configuration-파일-다루기-(개념).html&quot;&gt;이전편 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;새 파일을 만든다. Command + n&lt;/p&gt;

&lt;p&gt;거기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration Settings File&lt;/code&gt; 라는 파일을 찾고, 만약 찾기 힘들다면&lt;/p&gt;

&lt;p&gt;검색 기능을 이용해서 찾자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;총 2개를 만들어 준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개발&lt;/li&gt;
  &lt;li&gt;상용&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 포스팅에서 Config 파일에 적어둘 내용은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;앱 이름&lt;/li&gt;
  &lt;li&gt;Bundle Identifier&lt;/li&gt;
  &lt;li&gt;서버 URL (개발 서버 or 상용 서버)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;간략하게 설명하면, 이 글을 시작한 이유가 개발자인 내가 식권앱을 쓰다가, 개발용을 설치하면 실사용 하기 위해&lt;/p&gt;

&lt;p&gt;재설치를 해야하는 귀차니즘이 있기 생기기 때문에 시작한 포스팅.&lt;/p&gt;

&lt;p&gt;그렇기에 위의 3가지를 예를 들려한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;앱이름&quot;&gt;앱이름&lt;/h3&gt;

&lt;p&gt;앱이 2개 설치될 예정인데, 앱 이름이 동일하면, 구분이 안되니깐!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bundle-identifier&quot;&gt;Bundle Identifier&lt;/h3&gt;

&lt;p&gt;앱을 2개 설치하기 위해!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;서버-url&quot;&gt;서버 URL&lt;/h3&gt;

&lt;p&gt;코드내에 상용서버, 개발 서버 선언할필요 없이 Config 설정에 따라 바뀌게 설치&lt;/p&gt;

&lt;p&gt;ex) 상용 config 셋팅시 URL은 상용 URL을 불러오게 끔 (개발은 개발 URL)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어디를 건들여야하는지 알아보자.&lt;/p&gt;

&lt;p&gt;우선 만든 Config를 설정하는곳은 여기다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보통 Target 안에 부분은 손은 댓었어도 이곳은 손대본적이 없었다.&lt;/p&gt;

&lt;p&gt;근데 이제와서 생각해보니 어차피 Target한테 밀리는 설정들이라서 그랬나보다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사진에 보면, Project(파란색)과 Target(빨간색)이 존재한다.&lt;/p&gt;

&lt;p&gt;우린 각각 Target의 Config를 손볼 예정이다.&lt;/p&gt;

&lt;p&gt;Target의 Config에 &lt;strong&gt;Config_Dis&lt;/strong&gt;를 넣어주자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Target의 BuildSetting 부분을 보자, 기존에는 없던 Level이 추가된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Config.File (Config_dev.xcconfig. None)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이젠 활용만 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bundle-id-적용&quot;&gt;Bundle ID 적용&lt;/h1&gt;

&lt;p&gt;Target의 Build Setting에서 Bundle 이라고 검색하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product BUndle Identifier&lt;/code&gt;라는 항목이 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재는 고정값이 들어가있지만, 이 부분이 Config에 따라 다르게 적용되게 해야한다.&lt;/p&gt;

&lt;p&gt;(사진엔 Config를 넣기 전이라 Config.File 이라는 레벨이 안보임!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 여기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(inherited)&lt;/code&gt;를 넣어줌으로써 Config따라 값이 바뀌게 해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 부분이 가장 중요. 나머진 응용 &amp;amp; 반복!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래처럼 바꿔주기만 하자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 Build setting 말고 General 보면 나오는 Bundle ID는 깔끔하게 결과값만 나온다! 아마 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resolved&lt;/code&gt;값을 표출하는것 아닌가 싶다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 Bundle ID 셋팅이 끝났다.&lt;/p&gt;

&lt;p&gt;Config만 바꿔줘도 Bundle ID가 바뀐다. 이말을 다시 말하면 앱에서는 Config에 따라 서로 다른 앱으로 인식한다는 것이다.&lt;/p&gt;

&lt;p&gt;그렇단건 앱이 2개가 설치가 된다는 것이다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실행해보면 다음과 같이 2개가 설치 될것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;앱-이름-바꾸기&quot;&gt;앱 이름 바꾸기&lt;/h1&gt;

&lt;p&gt;두개 설치까진 됐으나, 뭐가 뭔지 알기가 힘들다.&lt;/p&gt;

&lt;p&gt;그러니 앱이름을 Config에 따라 달리 셋팅을 해주자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 간단하지만 살짝 다르다.&lt;/p&gt;

&lt;p&gt;BuildSetting 부분에 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product Name&lt;/code&gt;이란 부분이 있는데, 이 부분을 수정하고 빌드하면 2개가 설치 되긴하는데,&lt;/p&gt;

&lt;p&gt;두번째꺼 설치후 다시 빌드하면 오류를 뿜는다. 쓰지말자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Config파일에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISPLAY_NAME&lt;/code&gt;이라는 항목을 넣어줬으며, 이것을 검색하면 보인다.&lt;/p&gt;

&lt;p&gt;보면 DISPLAY_NAME 위에 User-Defined 라는 항목이 보이며, 이 부분 아래는 전부&lt;/p&gt;

&lt;p&gt;기존 Build Setting이 아닌 추가된 부분이다. Level 옆에 + 버튼을 눌러서 추가도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼, 이 부분을 가져다 쓰기만 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 Display 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(DISPLAY_NAME)&lt;/code&gt; 이라고 적어주면 끝!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래는 결과&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가장 마지막단의 값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resolved&lt;/code&gt;되니 Config에 정의한 그 값이 곧 그 값!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;서버-url-변경&quot;&gt;서버 URL 변경&lt;/h1&gt;

&lt;p&gt;위에 간략하게 설명한 바와 같이 많은 현업에서 상용 서버, 개발 서버 나눠서 쓰고 있을것이다.&lt;/p&gt;

&lt;p&gt;근데, 지금 회사에선&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isReal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;realServer.com&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;devServer.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 코드를 수정하는 방식을 쓰고있었다.&lt;/p&gt;

&lt;p&gt;간편한 방법이긴 하지만, 배포전 신경을 항상 써줘야했다.&lt;/p&gt;

&lt;p&gt;하지만! Config를 이용하여 셋팅만 잘 해둔다면, 배포시 별다른 걱정을 하지않아도 된다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 이것을 앱에서 어찌 가져다 쓸까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;를 이용!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Info.plist 파일에서 오른쪽 클릭을하면 아래와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Row&lt;/code&gt;가 보일것이다! 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이름은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server URL&lt;/code&gt;이 적당하려나? (다른값 보고 따라함)&lt;/p&gt;

&lt;p&gt;아무튼 그렇게 해주고 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;  값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(SERVER_URL)&lt;/code&gt;! 아래처럼 적용&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 가져다 써보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let url = Bundle.main.object(forInfoDictionaryKey: &quot;Server URL&quot;) as? String {
    print(&quot;plist에서 받은 값은 \(url)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt;에 접근해서 값을 가지고 올 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;object 함수 Summary 부분 발췌&lt;/p&gt;

  &lt;p&gt;Returns the value associated with the specified key in the receiver’s information property list&lt;/p&gt;

  &lt;p&gt;해석: plist꺼 값 꺼내옴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 이미지는  출력 코드는 동일하지만 Config 파일만 교체하고 결과 값이 다른 것을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-29/img12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 나온다면, 충분히 응용 가능할것으로 보인다.&lt;/p&gt;

&lt;p&gt;길어진 관계로 고급편을 만들어야겠다. (vi 쓰다 날아가서 나누는거 암튼 아님)&lt;/p&gt;

&lt;p&gt;크큭크크크ㅡ크ㅋ&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2019/07/29/swift-Configuration-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0-(%EC%A0%81%EC%9A%A9).html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2019/07/29/swift-Configuration-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0-(%EC%A0%81%EC%9A%A9).html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Xcode) Configuration 파일 다루기 - (개념)</title>
        <description>&lt;p&gt;오늘의 주제의 제목은 뭔가 애매하다&lt;/p&gt;

&lt;p&gt;하지만 Configuration 파일을 잘 이용하면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;같은 앱 다중설치&lt;/li&gt;
  &lt;li&gt;서버 변경 방식&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등등을 유용하게 쓰일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;어쩌다-포스팅하게-되었나&quot;&gt;어쩌다 포스팅하게 되었나?&lt;/h1&gt;

&lt;p&gt;회사 앱중 전자 식권 앱이 있는데, 개발을 하다보니 서버를 왔다, 갔다 할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;그런데, 다음과 같은 문제들이 발생했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서버가 다르다 보니 로그인이 자꾸 풀려서 재로그인해야한다, 귀찮&lt;/li&gt;
  &lt;li&gt;개발 서버 깔고 나갔다가, 결제 직전 알아차려서 앱스토어에서 다시 받아야하는 귀차니즘 발생&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서, 예전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Let's Swift 2017&lt;/code&gt; 이란 Swift 컨퍼런스에서 봤던 세션이 기억이 났다.&lt;/p&gt;

&lt;p&gt;(여러번 시도했었지만 실패,,, 하지만 성공했으니 포스팅을 아하하, 해당 세션 Toss개발자님 사랑합니다. 토스 가고싶어요)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;같은 문제점을 역시나 고민하고 계신 선배 개발자분들이 계셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;핵심은-configuration-파일&quot;&gt;핵심은 Configuration 파일&lt;/h1&gt;

&lt;p&gt;서버 변경, 앱 다중 설치 등등을 Configuration 파일 설정 외에는 다음과 같은 방식들을 알고 있었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scheme 추가&lt;/li&gt;
  &lt;li&gt;Target 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;각각 단점이 보였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-scheme&quot;&gt;1. Scheme&lt;/h3&gt;

&lt;p&gt;이건 선택 가능 옵션이 Release? or Debug? 뿐이었다, 그렇단건 코드에서 아래와 같은 조건으로 주소 변경만 될뿐, 앱을 나눌수 없는거 같다&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var address: String = &quot;&quot;
#if DEBUG
    address = &quot;www.dev.com&quot;
#else
    address = &quot;www.dis.com&quot;
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 주소를 변경할 수 있었다. 하지만! 정작 중요한 앱나누기가 안댐.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PASS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-target-추가&quot;&gt;2. Target 추가&lt;/h3&gt;

&lt;p&gt;이건 좀 괜찮아보였다. Build Setting이 별도이므로, Bundle ID만 따로 해주면 앱 2개 설치도 되며, 손쉽게 변경이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 문제점 있음!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;문제점1: Build Setting이 별도라는건, 수정해야할게 두가지라는 점.&lt;/li&gt;
  &lt;li&gt;문제점2: 새로 파일을 만들경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target Memebership&lt;/code&gt;을 다 체크해줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Target Membership 체크해야하는 화면)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 위에서 언급한 세션 기억이 났고, 이거다! 싶었다.&lt;/p&gt;

&lt;h1 id=&quot;configuration-파일이란&quot;&gt;Configuration 파일이란?&lt;/h1&gt;

&lt;p&gt;깃블로그 하다보니  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 파일에 주로 속성?값이라 해야하나 그런것들이 적혀있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;블로그 타이틀&lt;/li&gt;
  &lt;li&gt;블로그 부제&lt;/li&gt;
  &lt;li&gt;Analytics key값&lt;/li&gt;
  &lt;li&gt;페이징 갯수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등등 뭔가 앱으로 치면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름&lt;/li&gt;
  &lt;li&gt;서버 URL&lt;/li&gt;
  &lt;li&gt;Bundle ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런것들이 들어가기 딱인 느낌이었고, 앱에도 그런 파일이 존재했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;where&quot;&gt;Where?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 Config파일을 설정
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 TARGET이 아닌 PROJECT의 Build Setting을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Level&lt;/code&gt; 형태로 보면  &lt;strong&gt;Configurations&lt;/strong&gt;라는곳이 존재하고 여기에 셋팅을 해주게 된다.&lt;/p&gt;

&lt;p&gt;여기서 눈여겨봐야 할 점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;의 하위 - &lt;strong&gt;Project&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt;의 하위 - &lt;strong&gt;Target&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;속해있다는 점을 잘보고, &lt;strong&gt;Target&lt;/strong&gt;의 &lt;strong&gt;Build Setting&lt;/strong&gt;을 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;빨간 영역을 보면, Resolved - Target - Config - Project 로 되어있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Resolve- 결정하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Resolved&lt;/strong&gt; 는 결정했다! 정도로 보면 될텐데, 무엇을 결정했다는 것일까.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결론적인 예를 들면 이런것이다,&lt;/p&gt;

&lt;p&gt;각각 단계에서 앱 이름을 정의 했다 가정을 하자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 뭔가 결정이 나야하고 여기서는 가장 최하위단에서 적용한것이 이름이 되므로,&lt;/p&gt;

&lt;p&gt;위와 같은 경우 앱 이름은 &lt;strong&gt;C&lt;/strong&gt;라고 표출이 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;수정&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;제일 하단이 비어있을 경우 그 전값 불러옴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 클래스 상속과 같은 상속이 존재하며, $(inherited) 라고 써주면 바로 전단계가 적용된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$(inherited) 같은 경우는 Build Setting에서 많이 보인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 좀더 예를 들어보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; &lt;del&gt;이름 비어있음&lt;/del&gt; 수정: B&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 없음 (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 없음 (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 C (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; C&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 B (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; B&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 없음 (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; &lt;del&gt;이름 비어있음&lt;/del&gt; 재검토 필요&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앱 이름 A (in Project)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Config)&lt;/li&gt;
  &lt;li&gt;앱 이름 $(inherited) (in Target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; A&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이정도면 예시는 됐으려나, 어찌 됐든 중요한건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(inherited)&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;그럼 이걸 이제 어떻게 써먹을지 보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;config-활용&quot;&gt;Config 활용&lt;/h1&gt;

&lt;p&gt;이런건 그림이 이해하기 제일 좋을것 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 여기서 중요한것임 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 이것만 봐도 될정도 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!! 핵심임 !!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JiSeobKim/jiseobkim.github.io/master/static/img/_posts/2019-07-22/img5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Target은 $(inherited)&lt;/li&gt;
  &lt;li&gt;Config를 A 혹은 B로 변경해줌으로써 서버와 앱이름등등을 바꿔준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그렇담 어케 적용하는지는 다음편에!!!&lt;/p&gt;

&lt;p&gt;크큭크ㅋᄏᆨ큭-크ㅡ큭&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2019/07/22/swift-Configuration-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0-(%EA%B0%9C%EB%85%90).html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2019/07/22/swift-Configuration-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0-(%EA%B0%9C%EB%85%90).html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>(Swift) FileManager</title>
        <description>&lt;p&gt;오늘의 주제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰게된 이유는 다음과 같다,&lt;/p&gt;

&lt;p&gt;사이드 프로젝트를 하고 있는데, Photo kit 관련 해본 경험이 없어서, 이 부분을 직접 써볼려고 앨범 라이브러리를 안쓰는데,&lt;/p&gt;

&lt;p&gt;영상, 이미지, 라이브포토를 앱내에 저장하는 방법이 필요했다.&lt;/p&gt;

&lt;p&gt;NSData로 캐스팅해서 Core Data에 넣으려했는데, 이건 좀 아닌거 같아서 여기저기 물어본 결과&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;바이너리 파일(이미지, 영상 등등)&lt;/strong&gt;은 &lt;strong&gt;파일&lt;/strong&gt;에 저장하고,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메타데이터(사진 정보, 관련 정보)&lt;/strong&gt;만 &lt;strong&gt;Core data&lt;/strong&gt;에 저장시키는 방식이 가장 많이 쓰인다고 해서 써보게 됐다.&lt;/p&gt;

&lt;h1 id=&quot;순서&quot;&gt;순서&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File Manager&lt;/code&gt;란?&lt;/li&gt;
  &lt;li&gt;폴더 추가 방법은?&lt;/li&gt;
  &lt;li&gt;파일 추가 방법은?&lt;/li&gt;
  &lt;li&gt;파일 불러오는 방법은?&lt;/li&gt;
  &lt;li&gt;파일 삭제하는 방법은?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;file-manager란&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File Manager&lt;/code&gt;란?&lt;/h1&gt;

&lt;p&gt;아이폰 앱마다 자기만의 공간을 가지고 있는데, 이 공간을 관리하는 매니저라 생각하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;이 공간은 일반 맥, 윈도우처럼 Document 폴더, Download폴더 등등 다양한 종류의 폴더가 있다!&lt;/p&gt;

&lt;p&gt;이 글에선 Document폴더를 사용하여 이것 저것 해보려한다.&lt;/p&gt;

&lt;h1 id=&quot;경로-접근&quot;&gt;경로 접근&lt;/h1&gt;

&lt;p&gt;다른 작업들 하기전 공통 사항인 해당 폴더로 접근 하는 방법을 먼저 알아보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let fileManager = FileManager.default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fileManager&lt;/code&gt;라는 인스턴스를 만들어준다. (default를 해줌으로써 싱글톤 인스턴스!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let documentURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;는 폴더를 정해주는 요소입니다. Download 폴더 혹은 Document 폴더 등등&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;은 제한을 걸어주는 요소입니다. 그 이상은 못가게 하는!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;About - Mask&lt;/strong&gt;&lt;br /&gt;
view.layer.masksToBounds = true 많이 보셨을 겁니다.  &lt;br /&gt;
그렇게 하면 Bound 밖의 UI들은 안보이는!!&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;의 인자들 이름에 붙은 &lt;strong&gt;Mask&lt;/strong&gt;는 이런 의미라 생각하면 좋을 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
애플이 주석을 굉장히 잘써놨으므로 좀더 디테일하게 보자,&lt;/p&gt;

&lt;h3 id=&quot;for-enum-값들-objective-c-enum&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; enum 값들 (Objective C Enum)&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;documentDirectory   // documents (Documents)
developerDirectory  // (Developer) DEPRECATED - there is no one single Developer directory.
desktopDirectory    // location of user's desktop
downloadsDirectory  // location of the user's &quot;Downloads&quot; directory
musicDirectory      // location of user's Music directory (~/Music)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;굉장히 설명을 잘해놨고, 굉장히 많다.  그 중  친숙해 보이는 몇개만 가져왔다. 이런식으로 접근 폴더를 지정해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-enum-값들-swift-enum&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; enum 값들 (Swift Enum)&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static var userDomainMask: FileManager.SearchPathDomainMask { get } 
// user's home directory --- place to install user's personal items (~)

public static var localDomainMask: FileManager.SearchPathDomainMask { get } 
// local to the current machine --- place to install items available to everyone on this machine (/Library)

public static var networkDomainMask: FileManager.SearchPathDomainMask { get } 
// publically available location in the local area network --- place to install items available on the network (/Network)

public static var systemDomainMask: FileManager.SearchPathDomainMask { get } 
// provided by Apple, unmodifiable (/System)

public static var allDomainsMask: FileManager.SearchPathDomainMask { get } 
// all domains: all of the above and future items
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널을 조금이라도 써봤다면 뒤에 괄호만 봐도 쉽게 이해할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;센스있게 저렇게 표현해주니 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;경로-추가&quot;&gt;경로 추가&lt;/h1&gt;

&lt;p&gt;키워드:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appendingPathComponent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;아주 간단하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let newURL = documentsURL.appendingPathComponent(&quot;App Photos&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 예를 써보면&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let oldURL = URL(string: &quot;~/Document&quot;)
let newURL = documentsURL.appendingPathComponent(&quot;Hello&quot;)
print(newURL) // ~/Document/Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아주 간단!&lt;/p&gt;

&lt;h1 id=&quot;폴더-추가-방법은&quot;&gt;폴더 추가 방법은?&lt;/h1&gt;

&lt;p&gt;키워드: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createDirectory&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성
let fileManager = FileManager.default
// 2. 도큐먼트 URL 가져오기
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
// 3. 생성할 폴더 이름 추가해주기
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)
// 4. 생성하기
do {
    try fileManager.createDirectory(at: directoryURL, withIntermediateDirectories: false, attributes: nil)
} catch let e {
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것도 아주 간단!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at&lt;/code&gt; : 경로 및 폴더명, 위에서 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withIntermediateDirectories&lt;/code&gt; : “중간 디렉토리들도 만들꺼야?” 이런 의미.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes&lt;/code&gt; : 파일 접근 권한, 그룹 등등 폴더 속성 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 말해, 현재 존재하는 폴더가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Document&lt;/code&gt;만 있는 상태에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appendingPathComponent&lt;/code&gt;를 여러번해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Document/path1/path2/path3&lt;/code&gt;로 만들었다고 가정하면, 각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt;값에 따라 성공, 실패가 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withIntermediateDirectories: true&lt;/code&gt; - 중간 디렉토리인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path1/path2&lt;/code&gt;도 만들고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path3&lt;/code&gt;까지 만든다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withIntermediateDirectories: false&lt;/code&gt; - 중간 디렉토리가 존재하지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt;로 빠진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;파일-추가-방법은&quot;&gt;파일 추가 방법은?&lt;/h1&gt;

&lt;p&gt;키워드: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write(to:_, atomically:_, encoding:_)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일 저장할 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. File 이름 설정
let fileURL = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// 5. File 내용
let text = NSString(string: &quot;Hello world&quot;)

do {
    // 6-1. 파일 생성
    try text.write(to: fileURL, atomically: true, encoding: String.Encoding.utf8.rawValue)
} catch let e {
    // 6-2. 오류 처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSString&lt;/code&gt;에 내부 함수로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;가 존재하며, 이를 이용해서 &lt;strong&gt;쓰기&lt;/strong&gt;를 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to&lt;/code&gt;: 위에 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;을 써주면 그대로 생성.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomically&lt;/code&gt;: 이거 뭔지 모르겠,,, 읽어도 모르겠,,, 다만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;면 URL이 존재 안해도 시스템상 손상이 없단 뉘앙스를 풍기므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;만,,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encoding&lt;/code&gt;: 인코딩 종류!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 에러가 났던게 파일 경로가 미존재시 “The file “test.txt” doesn’t exist.” 라고 catch로 간다.&lt;/p&gt;

&lt;p&gt;test.txt는 파일을 이제 만들라는건데 왜 없다고 그래,,? 라고 한참 생각했는데, 다른 테스트하느라 경로를 잘못 셋팅했었다.&lt;/p&gt;

&lt;p&gt;허허,, 중간에 다른 경로가 없는건데, 저렇게 설명을 하다니… 그래도 보면 간단하게 이루어진단걸 알 수 있다.&lt;/p&gt;

&lt;p&gt;여기서 또 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; 할 경우엔, 덮어 씌웠었다.&lt;/p&gt;

&lt;h1 id=&quot;파일-불러오는-방법은&quot;&gt;파일 불러오는 방법은?&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일이 있는 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. 불러올 파일 설정
let helloPath = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// Try Catch
do {
    // 5-1. 불러오기
    let text = try String(contentsOf: helloPath, encoding: .utf8)
    print(text) // Hello world
} catch let e {
    // 5-2. 에러처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이건 쓰기보다 간단!&lt;/p&gt;

&lt;h1 id=&quot;파일-삭제하는-방법은&quot;&gt;파일 삭제하는 방법은?&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 인스턴스 생성 - 동일
let fileManager = FileManager.default

// 2. 도큐먼트 URL 가져오기 - 동일
let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]

// 3. 파일이 있는 Directory 설정
let directoryURL = documentsURL.appendingPathComponent(&quot;NewDirectory&quot;)

// 4. 삭제할 파일 설정
let helloPath = directoryURL.appendingPathComponent(&quot;test.txt&quot;)

// Try Catch
do {
    // 5-1. 삭제하기
    try fileManager.removeItem(at: fileURL)
} catch let e {
    // 5-2. 에러처리
    print(e.localizedDescription)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;관리를 담당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fileManager&lt;/code&gt;에게 시켜서 삭제를 시키면 깔끔.&lt;/p&gt;

&lt;p&gt;이후 그 파일을 불러오면 아래와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt;가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The file “test.txt” couldn’t be opened because there is no such file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h1&gt;

&lt;h3 id=&quot;q--텍스트-말고-이미지나-gif-등등-다른건-어떻게&quot;&gt;Q . 텍스트 말고 이미지나 GIF 등등 다른건 어떻게??&lt;/h3&gt;
&lt;p&gt;A. NSData 형식으로!&lt;/p&gt;

&lt;p&gt;아래처럼하면 어떤것이든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;형으로 손쉽게 변경가능!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Archive Data
let archivedData = NSKeyedArchiver.archivedData(withRootObject: file)

// Unarchive Data
let unarchivedData = NSKeyedUnarchiver.unarchiveObject(with: file as Data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;q-애플-내장-앱중-file-app-이랑-관련이-있나&quot;&gt;Q. 애플 내장 앱중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File App&lt;/code&gt; 이랑 관련이 있나?&lt;/h3&gt;
&lt;p&gt;A. Yes, 프로젝트내에 설정을 하면,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File App&lt;/code&gt;이 해당 어플에 접근할 수 있게 된다!&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2019/07/11/swift-File-Manager.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/07/11/swift-File-Manager.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
  </channel>
</rss>
