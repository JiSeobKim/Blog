<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😀😍😉 JS 개발 블로그 😁😆😄</title>
    <description>나만의 공간</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Jun 2021 15:08:16 +0900</pubDate>
    <lastBuildDate>Sun, 13 Jun 2021 15:08:16 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Swift - Property Wrapper - 기본</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 동안 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;에 대한 글은 종종 보았지만,&lt;/p&gt;

&lt;p&gt;정확히 어떻게 어디에 써야겠단 생각이 확실하게 들지 않았었다.&lt;/p&gt;

&lt;p&gt;그나마 많은 글에서 다루었던건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefault&lt;/code&gt;에 쓰이는 것은 조금 흥미로웠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 계속 미루고 미루고 미루고 미루다가 이제서야 흥미가 갈만한 사용처가 발견 되었다.&lt;/p&gt;

&lt;p&gt;최근 글의 주제였던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt;과 관련이 있는 부분이라 마음을 먹게 됐다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 주제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt; 개념부터 잡고 가기.&lt;/p&gt;

&lt;p&gt;익혀가면서 느낀 소감은&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;연산 프로퍼티(getter/setter)의 업그레이드 버전이다. (100% 개인 생각)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한줄로 말하기 정말 어렵다. 몇번을 지운지 모르겠다.&lt;/p&gt;

&lt;p&gt;사용하는 곳이 생각보다 다양하게 이루어져서 그렇다.&lt;/p&gt;

&lt;p&gt;그래서 포스팅은 몇차례 나눠질것이고,&lt;/p&gt;

&lt;p&gt;다양하게 소개를 해볼까한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;property-wrapper-사용전&quot;&gt;Property Wrapper 사용전&lt;/h1&gt;

&lt;h3 id=&quot;가정-푸드트럭-struct가-있고-여기서-판매-되는-음식들은-10000원-이하라는-특징이-있다&quot;&gt;가정: 푸드트럭 Struct가 있고, 여기서 판매 되는 음식들은 10,000원 이하라는 특징이 있다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;첫째로 피자만 판매한다고 가정해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    var pizzaPrice: Int
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;10,000원 이하라는 특징이 없다면 위와 같이 단순하게 값을 넣고 빼고 하게 될 것이다.&lt;/p&gt;

&lt;p&gt;그렇지만 그 특징이 들어간다면 다음과 같이 바뀌어야 할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    // 1. 최대 금액 설정
    private var maxPrice: Int = 10000
    // 2. 접근 제어자를 Private으로 해줌으로써 직접 접근 방지
    private var _pizzaPrice: Int
    
    // 3. setter를 이용하여 값 저장시 maxPrice을 넘을 수 없게 함. 
    var pizzaPrice: Int {
        get { return _pizzaPrice }
        set { _pizzaPrice = min(newValue, maxPrice)}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자 여기까지는 뭐 그냥저냥 이렇게하면 되는거아닌가 싶다.&lt;/p&gt;

&lt;p&gt;맞다.&lt;/p&gt;

&lt;p&gt;근데, 여러개를 판다고 가정해보자. 피자, 파스타, 치킨, 수프, 김치 정도&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    private var maxPrice: Int = 10000
    private var _pizzaPrice: Int
    private var _pastaPrice: Int
    private var _chickenPrice: Int
    private var _soupPrice: Int
    private var _kimchiPrice: Int
    
    
    var pizzaPrice: Int {
        get { return _pizzaPrice }
        set { _pizzaPrice = min(newValue, maxPrice)}
    }
    
    var pastaPrice: Int {
        get { return _pastaPrice }
        set { _pastaPrice = min(newValue, maxPrice)}
    }
    
    var chickenPrice: Int {
        get { return _chickenPrice }
        set { _chickenPrice = min(newValue, maxPrice)}
    }
    
    var soupPrice: Int {
        get { return _soupPrice }
        set { _soupPrice = min(newValue, maxPrice)}
    }
    
    var kimchiPrice: Int {
        get { return _kimchiPrice }
        set { _kimchiPrice = min(newValue, maxPrice)}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오 굉장히 길어진다.&lt;/p&gt;

&lt;p&gt;다른 방법은 뭐가 있을까, 지금 떠오르는 정도는 enum을 이용하기?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    
    enum Food {
        case pizza
        case pasta
        case chicken
        case soup
        case kimchi
    }
    
    private var maxPrice: Int = 10000
    private var pizzaPrice: Int
    private var pastaPrice: Int
    private var chickenPrice: Int
    private var soupPrice: Int
    private var kimchiPrice: Int
    
    func getPrice(_ food: Food) -&amp;gt; Int {
        switch food {
        case .pizza: return pizzaPrice
        case .pasta: return pastaPrice
        case .chicken: return chickenPrice
        case .soup: return soupPrice
        case .kimchi: return kimchiPrice
        }
    }
    
    mutating func setPrice(food: Food, price: Int) {
        let realPrice = min(price, maxPrice)
        switch food {
        case .pizza: self.pizzaPrice = realPrice
        case .pasta: self.pastaPrice = realPrice
        case .chicken: self.chickenPrice = realPrice
        case .soup: self.soupPrice = realPrice
        case .kimchi: self.kimchiPrice = realPrice
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;흠, 뭔가 그래도 코드 같긴 하지만 길어진듯하고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;를 보고나니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;도 너무 자리 차지 많이하며&lt;/p&gt;

&lt;p&gt;그에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; 문도 너무 길게 느껴진다.&lt;/p&gt;

&lt;p&gt;심지어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/set&lt;/code&gt; 2개다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음에 느낀점을 말한것 처럼,&lt;/p&gt;

&lt;p&gt;getter와 setter의 업그레이드 버전임을 보여줄 수 있는 항목이라 생각된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;property-wrapper-사용후&quot;&gt;Property Wrapper 사용후&lt;/h1&gt;

&lt;h3 id=&quot;사용-준비&quot;&gt;사용 준비&lt;/h3&gt;

&lt;p&gt;단점이라고 하면 새로운 모델을 만들어줘야 한다는점? 그외에는 잘 모르겠다.&lt;/p&gt;

&lt;p&gt;일단, 금액 제한을 걸린 객체를 하나 구성해보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@propertyWrapper
struct MaxPriceOrLessWrapper {
    private var max = 10000
    private var value = 0
    
    var wrappedValue: Int {
        get { return value }
        set { value = min(newValue,max) }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt;를 만들고 그 위에(혹은 앞에) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@propertyWrapper&lt;/code&gt;를 붙여준다.&lt;/p&gt;

&lt;p&gt;그러면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrappedValue&lt;/code&gt;라는것을 선언해줘야하는데,&lt;/p&gt;

&lt;p&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;가 붙은 모든 값은&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrappedValue&lt;/code&gt; 연산프로퍼티로 값을 뱉고 정의한다.&lt;/p&gt;

&lt;p&gt;이게 핵심이다. 안써주면 오류남!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내용은 아주 간단하다. 최대 금액을 적어주었고, 연산 프로퍼티 하나를 적어주었다.&lt;/p&gt;

&lt;p&gt;그럼 이것을 어떻게 적용하는가?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;사용하기&quot;&gt;사용하기&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    @MaxPriceOrLessWrapper var pizzaPrice: Int
    @MaxPriceOrLessWrapper var pastaPrice: Int
    @MaxPriceOrLessWrapper var chickenPrice: Int
    @MaxPriceOrLessWrapper var soupPrice: Int
    @MaxPriceOrLessWrapper var kimchiPrice: Int
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아주 아주 아주 심플해졌다. 깔끔! 몇줄이 줄은거지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 실제로 잘 동작하는지도 확인해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-06-13/img-1.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 아주 훌륭하다.&lt;/p&gt;

&lt;p&gt;하지만 보는것과 같이 아쉬운점은 조금 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;위와 같이 초기값이 0이라는 점?&lt;/li&gt;
  &lt;li&gt;MaxPrice가 다 다를수도 있잖아? (디저트, 메인 음식 별로?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 아쉬움도 달랠 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property wrapper&lt;/code&gt;를 바꾸어준다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@propertyWrapper
struct MaxPriceOrLessWrapper {
    private var max: Int
    private var value: Int
    
    init(value: Int, maxPrice: Int) {
        self.max = maxPrice
        self.value = min(value, maxPrice)
    }
    
    var wrappedValue: Int {
        get { return value }
        set { value = min(newValue,max) }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;초기 세팅을 커스텀하겠다! 라는 것이고&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;는 마찬가지로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxPrice&lt;/code&gt;를 넘지 않는다.&lt;/p&gt;

&lt;p&gt;어떻게 쓰는가?&lt;/p&gt;

&lt;p&gt;이렇게 쓴다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct FoodTruck {
    @MaxPriceOrLessWrapper(value: 9000, maxPrice: 10000) 
    var pizzaPrice: Int
    
    @MaxPriceOrLessWrapper(value: 12000, maxPrice: 10000) 
    var pastaPrice: Int
    
    @MaxPriceOrLessWrapper(value: 7500, maxPrice: 10000) 
    var chickenPrice: Int
    
    @MaxPriceOrLessWrapper(value: 400, maxPrice: 500) 
    var soupPrice: Int
    
    @MaxPriceOrLessWrapper(value: 1000, maxPrice: 500) 
    var kimchiPrice: Int
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대박.. 간단해..&lt;/p&gt;

&lt;p&gt;그리고 이전 코드를 값 변경없이 처음 print만 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-06-13/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;너무 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;userdefault에-적용해보기&quot;&gt;UserDefault에 적용해보기&lt;/h1&gt;

&lt;p&gt;WWDC 세션에도 등장했다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefault&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt; 쓰기!&lt;/p&gt;

&lt;p&gt;기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefault&lt;/code&gt;라 함은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;를 가지고 값에 접근하여&lt;/p&gt;

&lt;p&gt;쓰거나 얻어 오거나 한다. 다른말로  setter 하거나 getter 한다.&lt;/p&gt;

&lt;p&gt;이 또한 처음에 말한것처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;는 뭐다?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;연산 프로퍼티의 업그레이드 버전이다. (100% 개인 생각입니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼  또 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;가 있기 전과 후를 비교해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;userdefault에-적용해보기---사용-전&quot;&gt;UserDefault에 적용해보기 - 사용 전&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct UserDefaultManager {
    private static var ud = UserDefaults.standard
    
    static var userName: String {
        get {
            return ud.value(forKey: &quot;userName&quot;) as? String ?? &quot;&quot;
        }
        set {
            ud.setValue(newValue, forKey: &quot;userName&quot;)
        }
    }
    
    static var hasMembership: Bool {
        get {
            return ud.value(forKey: &quot;hasMembership&quot;) as? Bool ?? false
        }
        set {
            ud.setValue(newValue, forKey: &quot;hasMembership&quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단 2개를 썼을 뿐인데 괄호와 이것 저것 너무 많다.&lt;/p&gt;

&lt;p&gt;실제로도 저렇게 쓰인 코드 마지못해 썼지만 정말 거슬렸다.&lt;/p&gt;

&lt;p&gt;반복에 반복이 너무 많다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;userdefault에-적용해보기---사용-후&quot;&gt;UserDefault에 적용해보기 - 사용 후&lt;/h2&gt;

&lt;p&gt;차근차근 개선해보자&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;에 대해서만 보자&lt;/p&gt;

&lt;p&gt;필요한 것&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Key&lt;/code&gt; - 빠질 수 없지&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaultValue&lt;/code&gt; - 없을때 얻을 기본값 정도는 있으면 좋겠다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@propertyWrapper
struct UserDefaultWrapper {
    private let ud = UserDefaults.standard
    // 1. 키
    private let key: String
    // 2. 기본 값
    private var defaultValue: String
    // 3. wrappedValue 정의
    var wrappedValue: String {
        get {
            return ud.value(forKey: key) as? String ?? defaultValue
        }
        set {
            ud.setValue(newValue, forKey: key)
        }
    }
    // 4. 초기값 및 키 셋팅
    init(key: String, defaultValue: String) {
        self.key = key
        self.defaultValue = defaultValue
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 이 코드는 어렵지 않을 것이다&lt;/p&gt;

&lt;p&gt;그럼 한번 적용해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct UserDefaultManager {
    private static var ud = UserDefaults.standard
    
    // Property Wrapper 적용
    @UserDefaultWrapper(key: &quot;userName&quot;, defaultValue: &quot;&quot;)
    static var userName: String
    
    static var hasMembership: Bool {
        get {
            return ud.value(forKey: &quot;hasMembership&quot;) as? Bool ?? false
        }
        set {
            ud.setValue(newValue, forKey: &quot;hasMembership&quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasMembership&lt;/code&gt;중에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt;에만 적용을 해보았다.&lt;/p&gt;

&lt;p&gt;너무 심플하다. 괄호와 반복의 지옥에서 벗어난 느낌 ㅠ&lt;/p&gt;

&lt;p&gt;근데, 걱정이 될 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;만 했으니깐 다른 타입들도 다 정의를 해야해? 라는 걱정.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그치만 우리에겐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generics&lt;/code&gt;이 있다.&lt;/p&gt;

&lt;p&gt;적용해보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@propertyWrapper
struct UserDefaultWrapper&amp;lt;T&amp;gt; { // 1. 여기에 제네릭 써주고
    private let ud = UserDefaults.standard
    private let key: String
    
    // 2. 여기도 제네릭 써주고
    private var defaultValue: T
    
    // 3. 여기도 제네릭 써주고
    var wrappedValue: T {
        get {
            // 4. 여기도 제네릭 써주고
            return ud.value(forKey: key) as? T ?? defaultValue
        }
        set {
            ud.setValue(newValue, forKey: key)
        }
    }
    
    // 5. 여기도 제네릭 써주고
    init(key: String, defaultValue: T) {
        self.key = key
        self.defaultValue = defaultValue
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;총 5군데에 제네릭을 적용해주었다.&lt;/p&gt;

&lt;p&gt;이건 이제 타입 불문하고 다 써줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct UserDefaultManager {
    private static var ud = UserDefaults.standard
    
    @UserDefaultWrapper(key: &quot;userName&quot;, defaultValue: &quot;&quot;)
    static var userName: String
    
    @UserDefaultWrapper(key: &quot;hasMembership&quot;, defaultValue: false)
    static var hasMembership: Bool
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와우 미쳤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용은 사용 전후가 다를게 없지만 그래도 쓰는건 다음과 같이.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-06-13/img-3.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;공부를 하며 코드 작성하면서도 놀랬는데, 블로그 글 쓰면서 보니 더 놀라웠다.&lt;/p&gt;

&lt;p&gt;굉장히 간결해진다는 점이 인상적이다.&lt;/p&gt;

&lt;p&gt;왜 이제 공부했지?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;이 굉장히 중요하다.&lt;/p&gt;

&lt;p&gt;없어도 쓸 수는 있지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;이 들어가면 더 활용성이 좋다는것.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 쓰인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;도 있지만, 이전 포스팅중에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;을 이용한  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jiseobkim.github.io/swift/network/2021/05/26/swift-CodingKey-API와-다른-자료형-쓰기.html&quot;&gt;여기 참고&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;init(from decoder: Decoder) throws {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에도 적용을 할 수가 있었다.&lt;/p&gt;

&lt;p&gt;정말 이거 적용해보고 소리 질렀다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 다음 주제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Wrapper&lt;/code&gt;에 관한것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;끝.&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Jun 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/2021/06/13/swift-Property-Wrapper.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2021/06/13/swift-Property-Wrapper.html</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift - API에 잘못된 값 처리 (feat. CodingKey)</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CodingKey 관련 글을 먼저 읽는 것을 추천!
&lt;a href=&quot;https://jiseobkim.github.io/swift/network/2021/05/19/swift-CodingKey-API와-다른-변수명-쓰기.html&quot;&gt;(CodingKey 변수명 다르게 쓰기)&lt;/a&gt; , &lt;a href=&quot;https://jiseobkim.github.io/swift/network/2021/05/19/swift-CodingKey-API와-다른-변수명-쓰기.html&quot;&gt;(CodingKey 자료형 다르게 쓰기)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;오늘은 짧게 쓰기.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;서버에 데이터를 쓰다보면 어김없이 예외처리는 필수.&lt;/p&gt;

&lt;p&gt;오늘의 주제는 그 예외처리를 어떻게 할지이다.&lt;/p&gt;

&lt;p&gt;필자가 아는 선에선 2가지 정도 처리가 있다.&lt;/p&gt;

&lt;p&gt;“만약에 데이터가 잘못 or 안내려온다”&lt;/p&gt;

&lt;p&gt;라는 가정을 해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 여기서는 이렇게 처리 할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;데이터를 nil 처리 해준다&lt;/li&gt;
  &lt;li&gt;기본값을 넣어준다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 2의 방식을 선호하는 편이다&lt;/p&gt;

&lt;p&gt;왜냐면 옵셔널은 정말 좋다 생각하지만,&lt;/p&gt;

&lt;p&gt;결국엔 쓰기 위해선 옵셔널을 벗겨내야하기 때문에&lt;/p&gt;

&lt;p&gt;사용하는 곳에 여기저기 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;문이 붙기 마련이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어차피 안전하게 벗겨서 쓸거면 미리 안전하게 벗기자를 선호하는편!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예시를 들게 될 JSON 형태는 다음과 같다.&lt;/p&gt;

&lt;h3 id=&quot;일반적-형태&quot;&gt;일반적 형태&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;age&quot; : 1,
    &quot;name&quot; : &quot;학생1&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;문제가-발생하는-형태&quot;&gt;문제가 발생하는 형태&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot; : &quot;학생1&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;옵셔널-처리&quot;&gt;옵셔널 처리&lt;/h1&gt;

&lt;p&gt;이 방식은 아주 간단하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Model: Codable {
    let age: Int?
    let name: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 단순하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age&lt;/code&gt;라는 값에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;옵셔널만 붙여주면&lt;/p&gt;

&lt;p&gt;해당 값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;처리가 될뿐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decoding&lt;/code&gt;을 진행해도 문제가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;근데 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt;를 사용한다면?&lt;/p&gt;

&lt;p&gt;약간의 처리가 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전 글에서 방식을 배웠다면 다음과 같이 정의를 할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Model: Codable {
    let age: Int?
    let name: String
    
    enum CodingKeys: String, CodingKey {
        case age
        case name
    }
    
    init(from decoder: Decoder) throws {
        let contianer = try decoder.container(keyedBy: CodingKeys.self)
        // 주석1 - sequence값이 없기 떄문에 에러 발생
        self.age = try contianer.decode(Int.self, forKey: .age)
        self.name = try contianer.decode(String.self, forKey: .name)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주석1에 써둔 이유로 문제의 JSON을 이 코드로 처리하게 된다면 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 2가지 방식이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;try에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;붙여주기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode&lt;/code&gt; 대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeIfPresent&lt;/code&gt;쓰기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1
self.age = try? contianer.decode(Int.self, forKey: .age)

// 2
self.age = try contianer.decodeIfPresent(Int.self, forKey: .age)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;필자의 생각엔 두 방식이 차이는 없다.&lt;/p&gt;

&lt;p&gt;단순하게 nil을 넣어도 초기화는 문제가 없기에 try 해도 문제가 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;기본값-처리&quot;&gt;기본값 처리&lt;/h1&gt;

&lt;p&gt;옵셔널 처리가 되었고, 이전 포스팅을 보았다면 자료형을 변경하듯이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;일 경우 기본값을 넣어주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// age의 값이 nil일 경우 기본값 0 처리 하기
self.age = try? contianer.decodeIfPresent(Int.self, forKey: .age) ?? 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;근데 단점이 있다.&lt;/p&gt;

&lt;p&gt;옵셔널로 쓰면 간단하지만,&lt;/p&gt;

&lt;p&gt;자료형을 바꿀 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;도 정의 해야하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 또한 정의를 해야한다.&lt;/p&gt;

&lt;p&gt;그 말은 즉, 코드가 너무 길어진다.&lt;/p&gt;

&lt;p&gt;이 단점은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Protperty Wrapper&lt;/code&gt;로 해결이 가능할것으로 보인다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Protperty Wrapper&lt;/code&gt; 써보고 싶었는데 이참에 공부해봐야지&lt;/p&gt;

&lt;p&gt;끝.&lt;/p&gt;

</description>
        <pubDate>Sun, 30 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/network/2021/05/30/swift-Codable-Throw-%E1%84%8E%E1%85%A5%E1%84%85%E1%85%B5-(feat.-CodingKey).html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/network/2021/05/30/swift-Codable-Throw-%E1%84%8E%E1%85%A5%E1%84%85%E1%85%B5-(feat.-CodingKey).html</guid>
        
        
        <category>Swift</category>
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Swift - CodingKey - API와 다른 자료형 쓰기(feat. Codable)</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전 글에서 API 결과값의 변수명과 다른 변수명을 쓰는 것에 대해 포스팅을 하였다.
&lt;a href=&quot;https://jiseobkim.github.io/swift/network/2021/05/19/swift-CodingKey-API와-다른-변수명-쓰기.html&quot;&gt;(이전글 링크)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이러한 느낌으로 
이번엔 
“서버에서 내려준 자료형과 다른 자료형을 쓰고 싶다!”
라는 생각이 든적이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 서버에서 다음과 같이 준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;userName&quot; : &quot;JS&quot;,
    &quot;isHidden&quot; : &quot;Y&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담,
일반적으로 서버와 자료명을 맞춰서 쓴다고 가정하면 
모델은 다음과  같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Model: Codable {
    let userName: String
    let isHidden: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 이것을 쓸때 어떻게 쓰는지를 보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let nameLabel: UILabel!

// ...
// label도 어디선가 초기화 했고, Model도 어디선가 Codable로 초기화 되었다고 가정!

// 통신 후 화면 업데이트
func updateView(model: Model) {
    // 1. 이름 적용
    nameLabel.text = model.userName
    // 2. 숨김 적용
    nameLabel.isHidden = (model.isHidden == &quot;Y&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 1의 경우 모델 그대로 가공 없이 넣어주면 그만이었다.&lt;/p&gt;

&lt;p&gt;그런데 2의 경우는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt; 타입으로 가공하여 적용을 해주었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이게 아쉬웠다.&lt;/p&gt;

&lt;p&gt;쓰는 곳에서 별도로 처리하는게 뭔가 귀찮고 깔끔해보이지도 않는다.&lt;/p&gt;

&lt;p&gt;모델 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getter&lt;/code&gt;를 써도 되겠지만 이또한 뭔가 아쉬움이 남는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러다가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt;를 알게 되고, 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Key&lt;/code&gt;가 초기화 할때 사용이 된다는걸 알게 되었고,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;초기화할때 커스텀이 가능함을 알게 되었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;codingkey와-init&quot;&gt;CodingKey와 Init&lt;/h1&gt;

&lt;p&gt;지난편에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; 를 정의를 하였지만 구체적으로 어떻게 사용 되는지는 다루지 않았다.&lt;/p&gt;

&lt;p&gt;마치 타입추론 같이 알아서 가져다 쓰나보다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 코드를 보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let value = try JSONDecoder().decode(Model.self, from: response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자주본 Codable을 이용하여 객체를 얻는 부분이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode&lt;/code&gt;를 기억하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 모델 부분에 CodingKey Enum을 만들어주고&lt;/p&gt;

&lt;p&gt;해당 모델 내에서 init을 입력해서 제안을 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-26/img-1.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;파란줄을 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decoder&lt;/code&gt;가 써있다.&lt;/p&gt;

&lt;p&gt;딱봐도 기억하자한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode&lt;/code&gt;와 아래의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decoder&lt;/code&gt; 뭔가 관련이 있을듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container&lt;/code&gt;라는 변수를 만들어준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container&lt;/code&gt;는 무엇인가?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-26/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;음 대충  &lt;strong&gt;“디코더에 저장된 데이터를 새 키로 박아서 데이터를 반환한다.”&lt;/strong&gt; 라는 것 같다.&lt;/p&gt;

&lt;p&gt;다시 말해,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let value = try JSONDecoder().decode(Model.self, from: response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 decode 했을때 들어간 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;가 위에서 말한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터&lt;/code&gt;이고&lt;/p&gt;

&lt;p&gt;그 데이터와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codingkeys.self&lt;/code&gt; 의 키를 연결해서 뱉어 준값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container&lt;/code&gt;인 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명하자니 어렵다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼,&lt;/p&gt;

&lt;p&gt;그럼 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;이라는 것은 초기화가 되지 않은 상태다.&lt;/p&gt;

&lt;p&gt;이제 할 일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container&lt;/code&gt; 데이터를 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;을 &lt;strong&gt;초기화&lt;/strong&gt; 해주는 것!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;container와-초기화&quot;&gt;Container와 초기화&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    
    // 1. 사용자명 초기화
    self.userName = try container.decode(String.self, forKey: .userName)
    // 2. 숨김처리 초기화
    self.isHidden = try container.decode(String.self, forKey: .isHidden)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1,2의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 부분을 보면 다음과 같이 해석할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“컨테이너(데이터) 안에서 forKey로 넣은 것에 맞는 데이터를 빼오고, String 타입으로 가져와”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;라는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decode&lt;/code&gt;하면 다음과 같이 이쁘게 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-26/img-3.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 방식을 이용하여 글의 주제였던 &lt;strong&gt;“API 결과 값과 다른 자료형 쓰기”&lt;/strong&gt;를 하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자료형-바꾸기&quot;&gt;자료형 바꾸기&lt;/h1&gt;

&lt;p&gt;우리가 바꿀 것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt;의 자료형을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt; 하는 것!&lt;/p&gt;

&lt;p&gt;우선 모델의 자료형부터 바꾸자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let userName: String
let isHidden: Bool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러면 자료형이 안맞기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 부분에서 아래와 같이 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-26/img-4.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 저 결과 값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;이므로 조건을 넣어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt;로 바꿔주자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.isHidden = try container.decode(String.self, forKey: .isHidden) == &quot;Y&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 오류는 사라지게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 빌드해서 브레이크를 걸고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Variables View&lt;/code&gt;를 보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-26/img-5.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt; 타입이라고 정확하게 나왔다!&lt;/p&gt;

&lt;p&gt;그러면 이제 맨 처음 예제를 든 코드의 Before 와 After를 보자&lt;/p&gt;

&lt;h3 id=&quot;before&quot;&gt;Before&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 이름 적용
nameLabel.text = model.userName
// 2. 숨김 적용
nameLabel.isHidden = (model.isHidden == &quot;Y&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;after&quot;&gt;After&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 이름 적용
nameLabel.text = model.userName
// 2. 숨김 적용
nameLabel.isHidden = model.isHidden
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;이건 예제이기 때문에 저 한줄을 위해 너무 많은 코드가 추가된 느낌이 든다면 기분탓으로 치자.&lt;/p&gt;

&lt;p&gt;아래와 같이 이것을 이용하면 많은 것을 내 맘대로 바꿀 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시간 타임 스탬프를 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;로 정의하기&lt;/li&gt;
  &lt;li&gt;enum과 연계하여 정의하기(이게 은근 꿀이다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등등!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;끝!&lt;/p&gt;
</description>
        <pubDate>Wed, 26 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/network/2021/05/26/swift-CodingKey-API%E1%84%8B%E1%85%AA-%E1%84%83%E1%85%A1%E1%84%85%E1%85%B3%E1%86%AB-%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%92%E1%85%A7%E1%86%BC-%E1%84%8A%E1%85%B3%E1%84%80%E1%85%B5.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/network/2021/05/26/swift-CodingKey-API%E1%84%8B%E1%85%AA-%E1%84%83%E1%85%A1%E1%84%85%E1%85%B3%E1%86%AB-%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%92%E1%85%A7%E1%86%BC-%E1%84%8A%E1%85%B3%E1%84%80%E1%85%B5.html</guid>
        
        
        <category>Swift</category>
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Swift - CodingKey - API와 다른 변수명 쓰기(feat. Codable)</title>
        <description>&lt;p&gt;&lt;br /&gt;
일반적으로 Codable을 기본으로만 사용하다보면 프로퍼티의 명칭을 API 문서를 따라갈 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;그치만 이 변수명이 내 개인적인 스타일과 달라 아쉬울때가 있다.&lt;/p&gt;

&lt;p&gt;예를 들어,&lt;/p&gt;

&lt;p&gt;나는 변수명을 짧게 쓰는것보단 길게 쓰는것을 선호한다. 
지금이야 짧아도 쓰기 좋지만&lt;/p&gt;

&lt;p&gt;한달뒤에 나는 “이 변수명이 뭐 줄임말이였지?”를 하게 되기 때문에 명확히 쓰는것을 좋아한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 이 글의 주제는 &lt;strong&gt;API와 다른 변수명 쓰기&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;통신 파트는 지난 번에 포스팅한 JSON 파일 불러오기로 대체한다! 관련 내용은 &lt;a href=&quot;https://jiseobkim.github.io/swift/network/2021/05/16/swift-JSON-파일-불러오기.html&quot;&gt;(여기)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 서버에서 값을 내려준다고 가정해보자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;usrNm&quot; : &quot;js&quot;,
    &quot;seqNo&quot; : 23,
    &quot;ordNo&quot; : 1,
    &quot;addr&quot; : &quot;seoul&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;쉽게 설명하기 위해 간단한 줄임말로 예를 들었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 결과값들을 나였다면 다음과 같이 쓰고 싶어할 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;usrNm -&amp;gt; userName&lt;/li&gt;
  &lt;li&gt;seqNo -&amp;gt; sequenceNo&lt;/li&gt;
  &lt;li&gt;ordNo -&amp;gt; orderNo&lt;/li&gt;
  &lt;li&gt;addr -&amp;gt; address&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왜? 그냥 내마음이 그렇다. 취향이랄까&lt;/p&gt;

&lt;p&gt;그럼 이제 제목에 나온 CodingKey라는 것이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;codingkey&quot;&gt;CodingKey&lt;/h1&gt;

&lt;p&gt;이제 JSON 데이터를 Codable을 이용하기 위해 구조체나 클래스 파일을 만들어보자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로퍼티 명은 내 마음대로!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Model: Codable {
    let userName: String
    let sequenceNo: Int
    let orderNo: Int
    let address: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이런식으로 적어준 다음 Codable을 사용하면 당연히? 오류가 난다.&lt;/p&gt;

&lt;p&gt;왜냐면 프로퍼티명을 내 마음대로 했는데, 모든 타입이 옵셔널이 아니니깐!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-19/img-1.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;간단하게 코드 설명하면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;주석 1: JSON 파일을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;를 받아온것&lt;/li&gt;
  &lt;li&gt;주석 2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt;를 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;프로토콜을 준수하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;이라는 값을 뱉게 한다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throws&lt;/code&gt; 하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;로 받아준다&lt;/li&gt;
  &lt;li&gt;주석 3: 2가 성공시 해당 값 출력&lt;/li&gt;
  &lt;li&gt;주석 4: 2가 실패시 error 내용을 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 오류 출력값을 보면&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keyNotFound(CodingKeys(stringValue: &quot;userName&quot;, intValue: nil), Swift.DecodingError.Context(codingPath: [], debugDescription: &quot;No value associated with key CodingKeys(stringValue: \&quot;userName\&quot;, intValue: nil) (\&quot;userName\&quot;).&quot;, underlyingError: nil))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라고 한다. 첫 프로퍼티인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt;부터 오류가 났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이래저래 복잡하지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt;이라는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;를 찾을 수 없다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codingkey&lt;/code&gt;를 의미하는 것 같다.&lt;/p&gt;

&lt;p&gt;그렇다면 이 키라는 것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt;과 매칭 시켜준다면 될듯하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;codingkey-사용&quot;&gt;CodingKey 사용&lt;/h1&gt;

&lt;p&gt;해당 구조체 안에 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;을 하나 생성해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 곳 보면 CodingKeys라는 enum값을 많이 사용한다. 위 에러에 보듯 한 프로퍼티들을 각각의 키가 존재하니깐 이런 네이밍을 많이 쓰는듯 하다. 뒤에 프로토콜(CodingKey)이랑 항상 헷갈려서 그냥 주저리주저리 적기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Model: Codable {
    let userName: String
    let sequenceNo: Int
    let orderNo: Int
    let address: String
    
    // 추가해주기
    enum CodingKeys: String, CodingKey {
        case userName = &quot;usrNm&quot;
        case sequenceNo = &quot;seqNo&quot;
        case orderNo = &quot;ordNo&quot;
        case address = &quot;addr&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 선언을 해주면 준비 끝! 각각의 키를 수동으로 셋팅을 해주는 것이다.&lt;/p&gt;

&lt;p&gt;보는 바와 같이 각각 케이스들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;들을 가지고 있고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; 프로토콜을 준수한다고 명시를 해줘야한다.&lt;/p&gt;

&lt;p&gt;이것을 안하면 프로퍼티명 자체가 키가 되는듯 하다.&lt;/p&gt;

&lt;p&gt;다시 실행해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-19/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 성공적 크킄 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;이 방식을 이용하면, 서버 변수명에 내 코드가 따라갈 필요가 없어진다.&lt;/p&gt;

&lt;p&gt;이런식으로 하나씩 불편함을 해소하는 CodingKey 시리즈!&lt;/p&gt;

&lt;p&gt;다음 불편함은 타입 자체를 바꾸는 것이다&lt;/p&gt;

&lt;p&gt;예를 들어 useYn = “Y” 라고 오면,&lt;/p&gt;

&lt;p&gt;나는 이것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; 이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt;로 받고 싶을 것이며, 이것은 다음 주제!&lt;/p&gt;

</description>
        <pubDate>Wed, 19 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/network/2021/05/19/swift-CodingKey-API%E1%84%8B%E1%85%AA-%E1%84%83%E1%85%A1%E1%84%85%E1%85%B3%E1%86%AB-%E1%84%87%E1%85%A7%E1%86%AB%E1%84%89%E1%85%AE%E1%84%86%E1%85%A7%E1%86%BC-%E1%84%8A%E1%85%B3%E1%84%80%E1%85%B5.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/network/2021/05/19/swift-CodingKey-API%E1%84%8B%E1%85%AA-%E1%84%83%E1%85%A1%E1%84%85%E1%85%B3%E1%86%AB-%E1%84%87%E1%85%A7%E1%86%AB%E1%84%89%E1%85%AE%E1%84%86%E1%85%A7%E1%86%BC-%E1%84%8A%E1%85%B3%E1%84%80%E1%85%B5.html</guid>
        
        
        <category>Swift</category>
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Swift - JSON 파일 불러오기(feat. Codable)</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개발을 하다보면 서버와 같이 일을 해야하는데,&lt;/p&gt;

&lt;p&gt;API가 아직 안나왔다면 조금 돌아가는 일을 선택한 적이 많았다.&lt;/p&gt;

&lt;p&gt;예를 들어 일단 기획에 나온대로 화면 미리 짜고 API가 나오면 추후에 붙인다거나?&lt;/p&gt;

&lt;p&gt;이럴 경우 2가지 경험이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;통신-파트를-제외하고-화면에-필요한-데이터-구조를-내-마음대로-만든다&quot;&gt;통신 파트를 제외하고 화면에 필요한 데이터 구조를 내 마음대로 만든다.&lt;/h3&gt;

&lt;p&gt;눈에 보이는 데이터로 모델을 만들다보니 화면을 구성하기엔 편했다.
단점은 제대로된 API가 나왔을때 구조적으로 틀어진게 너무 많다.&lt;/p&gt;

&lt;p&gt;몇번 겪어보고선 쓰지 않는 방식.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;통신-파트를-제외하고-문서에-나온대로-모델을-만든-후-화면을-구성한다&quot;&gt;통신 파트를 제외하고 문서에 나온대로 모델을 만든 후 화면을 구성한다.&lt;/h3&gt;
&lt;p&gt;고려해야할 부분도 이미 같이 구성했기 때문에 API가 나와도 크게 손댈 곳이 없다.
다만,, 테스트를 위해 더미 데이터를 만드는게 너무나도 귀찮았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;그래서 그 귀찮은 부분을 해결하기 위한 글.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;결론: 프로젝트 안에 json 파일을 생성 후 이 파일을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt; 형태로 불러와서, 실제로 통신 데이터 받은 것처럼
처리를 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점: 리스트 더불러오기 같은 경우는 여전히 API가 나온 후에 해야 편한것 같다. 
좋은 방법이 있으면 공유 해주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;json-파일-만들기&quot;&gt;JSON 파일 만들기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;새 파일을 생성하자
&lt;img src=&quot;/assets/images/2021-05-16/img-1.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;String을 검색해주고
&lt;img src=&quot;/assets/images/2021-05-16/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일명과 확장자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.json&lt;/code&gt;으로 한뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 눌러주면 다음과 같은 창이 뜬다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User .json&lt;/code&gt; 선택
&lt;img src=&quot;/assets/images/2021-05-16/img-3.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 파일의 모든 내용을 제거 한후 다음과 같이 JSON 스타일의 코드를 넣어주자 (나름 친절하게 타입도 써보았다.)&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Type: Dictionary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;totalCount&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 			&lt;span class=&quot;c1&quot;&gt;// value type: Int&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 						&lt;span class=&quot;c1&quot;&gt;// value type: [Dictionary]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// value: String&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// value: Int&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그럼 이제 프로젝트내에 준비는 끝났다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-16/img-4.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 파일을 불러오는 코드를 작성&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func load() -&amp;gt; Data? {
    // 1. 불러올 파일 이름
    let fileNm: String = &quot;User&quot;
    // 2. 불러올 파일의 확장자명
    let extensionType = &quot;json&quot;
    
    // 3. 파일 위치
    guard let fileLocation = Bundle.main.url(forResource: fileNm, withExtension: extensionType) else { return nil }
    
    
    do {
        // 4. 해당 위치의 파일을 Data로 초기화하기
        let data = try Data(contentsOf: fileLocation)
        return data
    } catch {
        // 5. 잘못된 위치나 불가능한 파일 처리 (오늘은 따로 안하기)
        return nil
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3을 보면 파일명과 확장자는 나눠서 불러온다는 점을 잘 봐야하고,&lt;/p&gt;

&lt;p&gt;대소문자도 주의해주고,&lt;/p&gt;

&lt;p&gt;4의 부분에서 해당 위치의 파일을 데이터로 초기화 해주는 아주 간단한 코드.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이것을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;로 받은 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;으로 형변환을 하여 출력을 해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guard
    let jsonData = load(),
    let dictData = String(data: jsonData, encoding: .utf8)
else { return }

print(&quot;결과: \(dictData)&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드 결과는 다음과 같다.
&lt;img src=&quot;/assets/images/2021-05-16/img-5.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;codable-더하기&quot;&gt;Codable 더하기&lt;/h1&gt;

&lt;p&gt;위에서 JSON을 잘불러왔으니 모델을 만들어서 Codable을 이용해보자
&lt;a href=&quot;https://jiseobkim.github.io/swift/2018/07/21/swift-Alamofire와-Codable.html&quot;&gt;(Codable 관련 글)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;우선 모델을 생성해주자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct UserList: Codable {
    let totalCount: Int
    let users: [User]
}

struct User: Codable {
    let name: String
    let age: Int
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이번엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;를 Codable을 이용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserList&lt;/code&gt;로 얻어 보자&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guard
    let jsonData = load(),
    let userList = try? JSONDecoder().decode(UserList.self, from: jsonData)
else { return }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-05-16/img-6.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;성공!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;예제야 짧으니 실제 작업 파일에 써도 무방하겠지만,&lt;/p&gt;

&lt;p&gt;프로퍼티만 수십가지일 경우 정말 지저분해지는 것을 봐야한다&lt;/p&gt;

&lt;p&gt;위와 같이 JSON 파일을 별도로 생성해야하는 귀찮음은 있지만,&lt;/p&gt;

&lt;p&gt;실제 작업시 더미 데이터 값을 따로 선언 및 초기화 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그래서 개인적으론 API가 아직 문서만 나온 단계라면, 이 방식을 요즘 선호한다&lt;/p&gt;
</description>
        <pubDate>Sun, 16 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/network/2021/05/16/swift-JSON-%ED%8C%8C%EC%9D%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/network/2021/05/16/swift-JSON-%ED%8C%8C%EC%9D%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0.html</guid>
        
        
        <category>Swift</category>
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Swift - ScrollView 뿌시기 실험</title>
        <description>&lt;p&gt;이전편 8번에서부터 이어지므로 보고 오는것을 추천 - &lt;a href=&quot;https://jiseobkim.github.io/swift/ui/2021/03/17/swift-ScrollView-뿌시기.html&quot;&gt;이전글&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 에러부터!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-9.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;실험&quot;&gt;실험&lt;/h1&gt;

&lt;p&gt;위의 8부터 다시보고 차근차근 봐보자, 이것 저것 실험하기!&lt;/p&gt;

&lt;p&gt;컨텐츠의 사이즈가 모호해! 는 사라졌다. 대신에 위와 같이 X,Width 값 잡고 Y, Height도 필요하다고 나온다.&lt;/p&gt;

&lt;p&gt;하나씩 다잡아보자 X 또는 Width, Y 또는 Height.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;센터로 설정을 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-10.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-11.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;x 값을 잡아줬더니 x또는 Width 잡으라는 경고는 사라졌다. 그리곤 ScrollView의 폭만큼 늘어났다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;X는 다시 지워주고 Y만 센터로 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-12.png&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-13.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마찬가지로 y, height 잡으라는 경고는 사라졌다. 그리곤 ScrollView의 높이만큼 늘어났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X,Y값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;둘다 센터 0으로 잡아보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-14.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 에러가 사라졌다. 그리고 ScrollView와 같은 사이즈가 되었다.&lt;/p&gt;

&lt;p&gt;Content Layout Guide와의 상하좌우를 0으로 맞추고 센터를 0,0잡아준 결과이다.&lt;/p&gt;

&lt;p&gt;스크롤뷰 사이즈 = 컨텐츠 사이즈인 상태이다. 그러므로 &lt;strong&gt;스크롤은 되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 Content Layout Guide와의 좌,우 를 100 잡아보자( Leading만 잡아도 Trailing은 줄어드는 이유는 잘 모르겠다. )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-15.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-17.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가득 차있다가 좌우 여백 100 만큼을 갖는 사이즈로 형성이 된다.&lt;/p&gt;

&lt;p&gt;그렇다는건 반대로 여백을 반대 방향으로 잡는다면 그만큼 스크롤이 가능하게 된다는것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;반대로 하기전 스크롤 됨을 확인하기가 어려우므로 다음과 같이 이쁘게 꾸며주자 (핑크와 오렌지의 폭은 100)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-18.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Leading만 -100을 줘보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-19.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자세히 보면 왼쪽은 두줄이다. 오른쪽은 한줄이고!&lt;/p&gt;

&lt;p&gt;이상태에서 왼쪽-&amp;gt;오른쪽 드래그를 해보면 더이상 갈 수 없다. 빨간색이 bounce 동안은 볼수 있지만 해당 영역으로 스크롤을 갈 수 없다.&lt;/p&gt;

&lt;p&gt;반대로 오른쪽 -&amp;gt; 왼쪽 드래그를 해보면 주황색영역을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이때부터, 뭔가 내 생각대로 안됨을 인식하기 시작했다.&lt;/p&gt;

&lt;p&gt;Leading과 Trailing에 대해 내가 모른단 생각이 들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Trailing에 -100을 줘보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-20.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 오른쪽으로 갈 수 있는 영역이 100 만큼 생겼다. 그치만 Leading과 다르게 좌로는 늘어나지 않고 우로만 늘어났다.&lt;/p&gt;

&lt;p&gt;오.. 혼란이 온다…&lt;/p&gt;

&lt;p&gt;Leading과 Trailing은 다르다.&lt;/p&gt;

&lt;p&gt;이 얘긴 나중에 하자 길어질듯하다.&lt;/p&gt;

&lt;p&gt;공부해서오자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Leading과 Trailing을 복구 시키고 세로로만 스크롤 되게 해보자&lt;/p&gt;

&lt;p&gt;y축을 -100 줘보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-23.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;축 자체가 -100이 되기 위해선 x2만큼 늘어나야해서 200이 늘어나게 된다.&lt;/p&gt;

&lt;p&gt;어찌 됐든 스크롤은 되지만 영역잡기엔 굉장히 별로 안좋은 방법이다.&lt;/p&gt;

&lt;p&gt;그냥 상하좌우와 X,Y축 AutoLayout만으로도 스크롤을 가능하게 할 수 있다! 정도만 알게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Height, Width값 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Y는 마찬가지로 초기화) 이건 한꺼번에 설정 해도 생각한대로 그려지므로 한꺼번에 설정.&lt;/p&gt;

&lt;p&gt;100, 100 으로 잡아보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-21.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 귀엽게 됐다, 아직은 컨텐츠 양이 작아서 드래그가 안되니 조금 많이 키워보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-22.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오 이것도 된다.&lt;/p&gt;

&lt;p&gt;자체적인 Width, Height로도 스크롤은 가능하게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 보통은 X방향 또는 Y방향으로만 스크롤이 되게 하므로 위에 방법들은 보통의 경우에 쓰긴 추천하지 않는다.&lt;/p&gt;

&lt;p&gt;그럼 Y축 스크롤만 예를 들었을때, 좌우 폭을 잡는 방법은 다음과 같은 방식이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Frame Layout Guide와 Width를 동일시한다.&lt;/li&gt;
  &lt;li&gt;ScrollView와 Width를 동일시한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;둘의 차이점은 없다고 생각한다.&lt;/p&gt;

&lt;p&gt;다만, 구조적으로 봤을때 Frame Layout Guide를 사용한다면 스크롤뷰 내의 뷰의 사이즈를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Guide&lt;/code&gt;들을 이용해서 사이즈를 잡을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-18/img-24.png&quot; style=&quot;zoom:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스크롤뷰 내의 컨텐츠 사이즈를 정의할때, 괜히 엄한것이랑 AutoLayout 잡지 말고 Guide들로 잡아! 라는 뜻이 아닐까?&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2021/03/18/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A5%E1%86%B7.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2021/03/18/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A5%E1%86%B7.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>Swift - ScrollView 뿌시기</title>
        <description>&lt;p&gt;하 DragAnimation Final을 진행중이었는데,&lt;/p&gt;

&lt;p&gt;스크롤뷰 생성중에 새로 바뀐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guides&lt;/code&gt;을 또 아 이거뭐가 뭐였지? 해버려서&lt;/p&gt;

&lt;p&gt;이거부터 진행.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guides&lt;/code&gt; 라는 것이 어느새 새로운것이 추가 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이거 전에도 스크롤뷰 생성은 공부가 필요했다. 자체 사이즈도 잡아줘야하고, 내용물의 사이즈는 얼마일지도 잡아줘야했다.&lt;/p&gt;

&lt;p&gt;위의 옵션을 체크해주면, 스크롤뷰 하위에 다음과 같은 2개가 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새롭게 추가된 이것은 위에 말한것과 같이 기존에 필요했던 &lt;strong&gt;자체 사이즈, 내용물 사이즈를 명시&lt;/strong&gt;한 느낌이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;autolayout-적용하기&quot;&gt;AutoLayout 적용하기&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 스크롤뷰 추가하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-2.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. AutoLayout 상하좌우 걸기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-3.png&quot; style=&quot;zoom:60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 오류 구경하기&lt;/strong&gt;(컨텐츠 값을 모르겠다! 라는 대충 그런 의미)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-4.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 스크롤뷰 안에 내용물(UIView) 추가하기 - 모호 하다니깐 해주기, 여전히 스크롤뷰 누르면 4같은 에러가 보인다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-5.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 추가한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;의 상하좌우 AutoLayout을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Layout Guide&lt;/code&gt; 의 상하좌우에 걸어준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(이 부분 귀찮은데 ㅜ 쉽게 하는 방법이 궁금하다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-6.png&quot; style=&quot;zoom:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 뷰의 Size Inspector에서 Autolayout 값들을 보자, 이상한 값으로 들어가있다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-7.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이는 5와 같은 방식으로 잡아줄 경우 현재의 비율에 비례해서 걸리게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 6의 값들을 전부 1 으로 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-8.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. ScrollView 에러를 다시 보자 - 새로운 에러가 나타난다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-9.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;컨텐츠의 사이즈가 모호해! 는 사라졌다. 대신에 위와 같이 X&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Width 값 잡고 Y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Height도 필요하다고 나온다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. 컨텐츠의 사이즈를 잡아준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가장 일반적으로 세로 스크롤이 되는것이 많다. 이때 Width는 스크롤뷰와 동일하게, 높이는 커스텀하게.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이때, 우리는 생각을 해야한다. 컨텐츠 레이아웃을 잡았고 필요한건 프레임의 사이즈다.&lt;/p&gt;

&lt;p&gt;따라서, 높이는 수동으로 잡아주고 폭은 스크롤뷰의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프레임&lt;/code&gt;과 같게! 걸어주며, 
이때 초반에 나온 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frame Layout Guide&lt;/code&gt;를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;폭은 Frame Layout Guide와 동일하게, Height는 400으로 잡아주면 다음과 같이 되며 에러가 사라진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021-03-17/img-16.png&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지만 해도 충분히 스크롤뷰 사용하는데는 문제가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;다음편은 조금 실험을 하려한다.&lt;/strong&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왜 이전 스크롤뷰 사이즈 잡는 것과 같이 프레임 자체는 ScrollView의 Width나 다른 Width를 안잡고 Frame Layout Guide를 썼을까? 라는 생각을 시작으로 다른것과도 AutoLayout을 잡아볼 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 편의 결론을 얘기하면, 다 가능하다 이전과 같이 다른것과 AutoLayout을 걸어도 된다.&lt;/p&gt;

&lt;p&gt;초반에 얘기한것처럼 컨텐츠 사이즈와 자체 사이즈를 명시한다는 느낌을 주기위해 Frame Layout Guide를 추가한 것 같다.
&lt;br /&gt;&lt;br /&gt;
애플의 의도는 아마 이것 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사이즈를 잡을때 스크롤뷰를 안벗어나고  &lt;strong&gt;Content Layout Guide&lt;/strong&gt;와 &lt;strong&gt;Frame Layout Guide&lt;/strong&gt;만으로 잡아!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 17 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2021/03/17/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2021/03/17/swift-ScrollView-%E1%84%88%E1%85%AE%E1%84%89%E1%85%B5%E1%84%80%E1%85%B5.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>DesignPattern - Builder</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오랫만에 블로그 글 남기기.&lt;/p&gt;

&lt;p&gt;참고 서적: gof의 디자인 패턴&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구성-요소&quot;&gt;구성 요소&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Builder&lt;/li&gt;
  &lt;li&gt;Concrete Builder&lt;/li&gt;
  &lt;li&gt;Director&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;builder&quot;&gt;Builder&lt;/h3&gt;

&lt;p&gt;Protocol&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;concrete-builder&quot;&gt;Concrete Builder&lt;/h3&gt;

&lt;p&gt;builder를 준수한 구현 클래스&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;director&quot;&gt;Director&lt;/h3&gt;

&lt;p&gt;Concrete Builder를 이용하여 객체를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; 해주는 구현 클래스&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핵심 = Builder&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Builder는 product를 속성 값을 셋팅하는 함수는 builder를 반환한다. (Chain을 쓰기 위함.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 생성시 묶을 수 있는 부분은 같이 묶는다&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) UIButton에 테두리를 만들때 보통 Color와 Width는 둘다 입력하게 되므로 인자값에 Color와 Width를 넣어 하나로 묶는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rxswift때처럼 체인 기능을 이용하여, 객체 생성때 필요한 모든 것을 한 라인(줄바꿈은 당연!)으로 생성이 가능하여, 해당 코드 분산이 적다.&lt;/li&gt;
  &lt;li&gt;위의 예시처럼 Bolder의 Width와 Color는 보통 묶어서 처리가 가능하므로 코드 라인이 더 적어진다.&lt;/li&gt;
  &lt;li&gt;product를 생성시 미리 받은 속성 값을 이용해 필수 값을 누락 했는지 안했는지 확인 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그러면 Director는?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;배우면서 개인적인 생각으론, Builder와 Concrete Builder만으로 시작 했을 듯하다.&lt;/p&gt;

&lt;p&gt;체인 기능을 쓰며, 자기가 Builder에 추상화한대로 명확하게 새로운 객체 생성이 가능해졌으며,&lt;/p&gt;

&lt;p&gt;하단의 버튼들이라던가 특정 뷰들이 생성하다보면 분명 같은 코드가 나올것이다.&lt;/p&gt;

&lt;p&gt;그럼, 이런 공통의 Concrete Builder들을 관리하는 것이 필요하다 느끼고 Builder를 Return하는 class를 만들고&lt;/p&gt;

&lt;p&gt;이름을 Director라고 붙여준것 같다는 느낌을 받았다. 개인적으로 &amp;lt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;uml---class-diagram&quot;&gt;UML - Class Diagram&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-11-12/img1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 구조로 이루어져 있으며 눈여겨 볼 것은 다음과 같다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build를 통해 객체를 돌려준다.&lt;/li&gt;
  &lt;li&gt;테두리 적용시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;를 같이 받는다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고, Director는 미리 정의한 버튼의 Builder를 준수한 객체를 반환 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;code&quot;&gt;CODE&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;builder--concretebuilder&quot;&gt;Builder &amp;amp; ConcreteBuilder&lt;/h3&gt;

&lt;p&gt;메소드들중 일부만 코드로 보자&lt;/p&gt;

&lt;p&gt;(프로토콜은 위에 그림으로 충분하므로 코드 생략.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonConcreteBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;생략&lt;/span&gt;
 		&lt;span class=&quot;c1&quot;&gt;// 텍스트 입력&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 테두리 적용 (컬러와 폭을 한번에 받아 보다 쉽게 적용)&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 객체 반환&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;director-1&quot;&gt;Director&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonDirector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;highLightColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;withAlphaComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bgColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boldSystemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;screenFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;screenSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;45.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


      	&lt;span class=&quot;c1&quot;&gt;// 1. Chain을 이용하여 값 셋팅&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonConcreteBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setBGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitleHighlightedColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highLightColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Director도 프로토콜을 생성하여 준수하게 만들면 좋겠지만? 얘는 일단 이렇게 합시다. 내가 필요한건 공통적으로 하단에서 쓰일 버튼이니깐!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 눈 여겨 보아야할 것은 주석 부분이다.&lt;/p&gt;

&lt;p&gt;체인을 이용하여 연달아서 값을 적용 할 수 있으며, 분산이 안됨을 느낄 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 마무리론 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build()&lt;/code&gt;하여 버튼 객체 반환.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;사용&quot;&gt;사용&lt;/h1&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ButtonDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeBottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 아주 간단하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Director&lt;/code&gt;를 통해 화면에 버튼을 추가했다.&lt;/p&gt;

&lt;p&gt;결과는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-11-12/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;한줄평&quot;&gt;한줄평&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Builder 패턴은 명확하고 통일성 있게 객체를 생성할 수 있으며 간단한 컴포넌트에 적당한 느낌.&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/designpattern/2020/11/12/designPattern-DesignPattern-Builder.html</link>
        <guid isPermaLink="true">http://localhost:4000/designpattern/2020/11/12/designPattern-DesignPattern-Builder.html</guid>
        
        
        <category>DesignPattern</category>
        
      </item>
    
      <item>
        <title>Xcode - 반성글 - 다크모드 적용 안하기</title>
        <description>&lt;p&gt;원래는 DragAnimation 글을 이어 가야하나, &lt;br /&gt;
반성과 다시는 같은 실수 안하자는 의미로 글을 적는다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최근 배포를 위해 빌드를 올리다보면 &lt;br /&gt;
4월부터 Xcode11을 강제로 적용해야 업뎃이 가능하다고  &lt;br /&gt;
경고문을 띄워주었다. &lt;br /&gt;
그래서 회사 앱중 하나를 Xcode11로 적용하기로 했었다. &lt;br /&gt;
근데 회사 앱들이 오래전에 만들어져 &lt;br /&gt;
라이브러리도 업뎃한지 오래전이고, 스위프트 버젼도 4.1이었다. &lt;br /&gt;
이것도 내가 3버젼대에서 올려둔거였었다.  &lt;br /&gt;
이 이상은 올리면 오류가 많이 터졌었어서 어찌보면 방치되었었다. &lt;br /&gt; 
이참에 버젼도 5대로 올려야겠다 싶어서 올렸었지만 라이브러리들이 오류 뿜뿜해서 &lt;br /&gt;
4.2갔다가 여기서 일부 업뎃하고, 5로 가서 나머지 충돌들을 해결했다.  &lt;br /&gt;
사용자들이야 버젼이 어찌되고 라이브러리가 어찌되고 모르겠지만,  &lt;br /&gt;
나름 미루었던 큰일을 해내서 기뻐하고 있었다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 기쁨은 오래가지 않았다. &lt;br /&gt;
배포후에 오류 문의가 하나 들어왔는데, 화면이 이상하다고 한다.&lt;br /&gt; 
이유를 찾아보니 다크모드가 문제였다. 보고 정말 충격이었다. &lt;br /&gt;
앱이 완전 개판이 되었다.&lt;br /&gt;
세상 끔찍했다. 앱스토어 리뷰를 보니 관련 댓글들도 읽고 충격이었다. &lt;br /&gt;
사용자 입장에선 많이 불편했을거란&lt;br /&gt;
심정을 느낄 수 있는 글들이었다. &lt;br /&gt; 
연예인들이 악플에 고생 많을거 같단걸 직접 체험했달까.&lt;br /&gt;
후,, 그거는 심정들을 이해하니 그럴수 있다고 생각해서 금방 이겨냈지만, &lt;br /&gt;
가장 안타까웠던건 내가 그런걸 배포했다는게 아직도 충격이다. &lt;br /&gt;
나름 테스트 꼼꼼하게 했다 생각했지만, &lt;br /&gt; 
언어, 라이브러리, 요청사항에 대한 것들만 해당되었고,&lt;br /&gt;
툴 업데이트에 대한 것을 찾아보지않은 점을 다시 한번 반성한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나름 회사 입사 후에 배포 사고 한번 안쳤고, 잘 해왔다고 생각했지만, &lt;br /&gt;
경력 3년차인 지금 입사 이후 가장 큰 사고를 쳤다.&lt;br /&gt;
이로 인해, 영업과 운영측 분들이 &lt;br /&gt;
처리해야할 사항들이 생겼던 점을 죄송스럽게 생각하며,&lt;br /&gt;
큰 사고라 생각됨에도 한마디도 타박하지않은 부장님과 &lt;br /&gt;
그런걸 다 할 수 있으면 여기 있었겠냐며 말을 해주신 영업 팀장님과 &lt;br /&gt;
위로의 말을 해준 다른 부서분들에게 감사함을 느끼고 있다. &lt;br /&gt;
정말 좋은 사람들이 많은 회사다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 일을 계기로, &lt;br /&gt;
툴 업데이트에 대한건 함부로 하면 안된다는 점을 알게 되었고, &lt;br /&gt;
또 내가 모르는 사항들이 있을 수 있으니 &lt;br /&gt;
배포전 전체적으로 테스트 할 수 있는 &lt;br /&gt; 
그런 프로세스를 구축해두어야겠다 느꼈다.&lt;br /&gt; 
UnitTest가 앱 셋팅이 문제인지 &lt;br /&gt;
Test Run 조차 되지 않는 문제가 있어서 포기했었는데,&lt;br /&gt; 
이거도 손봐야겠다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;다크모드-적용-안하기&quot;&gt;다크모드 적용 안하기&lt;/h1&gt;

&lt;p&gt;Xcode11로 앱을 빌드할 경우, 시스템의 다크 or 라이트 모드를 따라서 자동으로 셋팅이 되버린다.&lt;br /&gt;
다크 모드에 대한 셋팅을 하는 방법은 2가지가 있다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;plist 파일에 선언&lt;/li&gt;
  &lt;li&gt;코드 적용 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;plist-파일에-선언&quot;&gt;plist 파일에 선언&lt;/h2&gt;

&lt;p&gt;현재 다크 모드를 준비하기 여건이 마땅치 않다면, &lt;br /&gt;
Xcode11로 올리고 강제로 라이트 모드처럼만 보이고 싶을것이다. 나처럼.&lt;br /&gt;
위의 반성껀도 해결을 plist에 선언 해줌으로써 우선 해결을 하였다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;plist에 아래와 같이 두가지 보기 방식이 있으니 둘다 적어보자. 난 반성해야하니깐&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;property-list&quot;&gt;Property List&lt;/h3&gt;

&lt;p&gt;우선, 기본 상태인 Property List에서 오른쪽 클릭을 하면 다음과 같은 메뉴가 나오며,&lt;br /&gt;
이 상태에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Row&lt;/code&gt;를 누르면 한 줄이 추가가 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img2.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 새로운 Key와 Value를 적을 수 있는데,&lt;br /&gt; 
key 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;정도 까지만 적어도 아래 이미지와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Interface Style&lt;/code&gt;이라는 항목이 보일 것이다. &lt;br /&gt;
이것을 선택 or 입력해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img3.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;으로 기본 셋팅이 될것이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; 부분에 올 수 있는것은 2가지다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Light&lt;/li&gt;
  &lt;li&gt;Dark &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대소문자 신경쓰자. 스펠링 틀리거나 대문자로 시작 안할 경우 디폴트 값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Light&lt;/code&gt;로 적용이 된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img4.jpg&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;위에 보면 Key, Value 값으로 들어간다는건 Dictionary 형태라는걸 알 수 있었고,&lt;br /&gt;
소스코드 상으로 보면 아래 이미지와 같고, 
시작을 알리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dict&amp;gt;&lt;/code&gt;와 끝을 적어주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/code&gt;인 빨간 부분이 보일것이다.&lt;br /&gt;
그 사이에 노란 부분처럼 다음코드를 적당한 위치에 아무곳에 적어주면 적용이 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-29/img5.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드로-적용&quot;&gt;코드로 적용&lt;/h2&gt;

&lt;p&gt;코드로 적용할때도 2가지 정도로 나누어 진다. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AppDelegate Or SceneDelegate 적용&lt;/li&gt;
  &lt;li&gt;ViewController 적용 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;둘다 기본적으로 방식은 동일하다. 스타일을 override 해주면 된다. &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AppDelegate or SceneDelegate &lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window?.overrideUserInterfaceStyle = .light
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewController &lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.overrideUserInterfaceStyle = .light
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두가지의 차이라 함은 &lt;br /&gt;
1은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt;에 적용하다보니 모든 화면에 적용되는 반면,&lt;br /&gt;
2는 해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;에서만 적용이 된다는 점이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ps-시뮬레이터에-다크모드-키는-방법&quot;&gt;ps. 시뮬레이터에 다크모드 키는 방법&lt;/h2&gt;

&lt;p&gt;홈 - 설정 - 개발자 - Dark Appearance - On &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시는 이런 실수 하지말자.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/xcode/2020/03/29/xcode-PreventDarkMode.html</link>
        <guid isPermaLink="true">http://localhost:4000/xcode/2020/03/29/xcode-PreventDarkMode.html</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Swift - DragAnimation(2/3) - Transform</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt; 이란 주제로 설명을 하려다보니 대충 알고 있었음을 알게 되었다. &lt;br /&gt; 
그러다보니 여기서 생각보다 오래걸렸다 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아무튼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 녀석을 배워보자. 단어부터 보자&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Transform&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;바꾸어 놓다 2. 변화시키다 3. 만들다 4. 변모시키다 5. 변형시키다&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;전부 변화에 관한 얘기다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후에 다음과 같은 코드가 많이 나온다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view.transform = 블라블라
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;블라블라 부분은 뒤에서 설명하고 그 앞만 보면 &lt;br /&gt;
“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;를 변화,변경,변모 시키다.” 로 되겠지? &lt;br /&gt; 
영어권은 코딩이 참 쉬울거 같다. 부럽다 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대충 뭘 하겠단건 알겠고, 무엇을 할 수 있는지 보자.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;크기 (Scale)&lt;/li&gt;
  &lt;li&gt;회전 (Rotate)&lt;/li&gt;
  &lt;li&gt;좌표, 위치 (translation) &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;단어뜻과 아주 잘 맞는 역할들을 한다.&lt;br /&gt;
시각적으로 효과를 먼저 보자.&lt;br /&gt;
(Animation으로 해야 좀더 이해하기 쉬워서 이용하였으며, 기본적으로 적용되지 않는다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;차례대로 크기, 회전, 위치 변경이다. &lt;br /&gt;
(제일 아래 스위치는 크기와 위치 두가지를 동시에 효과를 주는 스위치로 뒤에 나온다.) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;근데, 크기를  바꾸는것을 유심히 보면 특이한 점이 있다. &lt;br /&gt;
안에 하얀색 작은 사각형이 있는데, 이 녀석도 같이 커진다. &lt;br /&gt;
그럼 텍스트를 넣고 이번엔 스위치를 키면 &lt;strong&gt;가로 사이즈는 작아지게&lt;/strong&gt; 하였고 세로는 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 텍스트 세로로 늘어나고, 가로는 줄어 들었다. &lt;br /&gt;
마치 저 자체가 &lt;strong&gt;이미지&lt;/strong&gt;였던것처럼 변화하였다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 녀석에 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAffineTransform&lt;/code&gt;이다. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이 녀석에 대한 문서를 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음.. 자세한건 각자 보도록 하자…. 링크는 &lt;a href=&quot;https://developer.apple.com/documentation/coregraphics/cgaffinetransform?language=objc&quot;&gt;여기..&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAffineTransform&lt;/code&gt;이란 단어 아래 문구는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An affine transformation matrix for use in drawing 2D graphics &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아핀 행렬이 뭔지는 모르겠다만 뒤에 2D graphics를 보니 &lt;strong&gt;Frame&lt;/strong&gt;을 바꾸고 그런게 아니라 &lt;br /&gt; 
&lt;strong&gt;그래픽적&lt;/strong&gt;으로 처리를 하는 방식인가보다. &lt;br /&gt;
이러한 방식이다보니, 단순 도형이 아니라면 효과를 줄때 주의를 해야할 것 같다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇담 이제 사용법에 대해 알아보자 &lt;br /&gt; 
(스위치 4개를 모두 하나의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IBAction&lt;/code&gt; 함수에 연결 시켰고 그 함수의 내용은 다음과 같다)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 선언
var transform: CGAffineTransform?

// sender = 스위치 / 스위치 종류에 따른 Switch문
switch sender {
case scaleSwitch:
    // 2-1. 초기화(크기)
    transform = CGAffineTransform(scaleX: 0.5, y: 2)
case rotateSwitch:
    // 2-2. 초기화(회전)
    transform = CGAffineTransform(rotationAngle: .pi)
case translationSwitch:
    // 2-3. 초기화(위치)
    transform = CGAffineTransform(translationX: 0, y: -100)
case complexSwitch:
    // 2-4. 초기화(크기 &amp;amp; 위치)
    transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
default:
    return
}

// 애니메이션 효과
UIView.animate(withDuration: 0.3) {
    // 3. 적용
    self.justView.transform = transform!
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;굉장히 단순 하다. &lt;br /&gt;
하나씩 봅시다. (인자들은 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGFloat&lt;/code&gt; 타입) &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;크기&quot;&gt;크기&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(scaleX: 2, y: 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원하는 배율을 적어주면 된다. 가로로 몇배, 세로로 몇배. 쉽다.&lt;/p&gt;

&lt;h2 id=&quot;회전&quot;&gt;회전&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(rotationAngle: .pi)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원하는 회전 각을 적어주면 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pi&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pi / 4&lt;/code&gt;  등등 원하는대로!&lt;/p&gt;

&lt;h2 id=&quot;위치&quot;&gt;위치&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform = CGAffineTransform(translationX: 0, y: -100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;은 변환인거 같은데,, &lt;br /&gt; 
솔직히 다른것처럼 확 와닿진 않는다. &lt;br /&gt; 
넣는 x,y 값만큼 기존 값에 더해지게 된다. &lt;br /&gt;
여기선 x는 0, y는 -100 했기 때문에, 가로축 이동은 없고 세로축은 위쪽으로 100만큼 이동하였다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 해당 뷰의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform&lt;/code&gt;에 적용해 주면 된다.&lt;/p&gt;

&lt;h2 id=&quot;원상-복구&quot;&gt;원상 복구&lt;/h2&gt;

&lt;p&gt;적용했으니 되돌리는것도 필요한건 당연 &lt;br /&gt;
아주 간단하다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.justView.transform = CGAffineTransform.identity
// or 
self.justView.transform = .identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;(혹시 누군가 본다면, 아래 주의 꼭 보시길) &lt;br /&gt;
두가지 이상의 조합을 원할땐 어떻게 할까? &lt;br /&gt;
예를 들어, 위치가 이동하면서 크기에 변화를 주고 싶다면? &lt;br /&gt; 
혹은 회전하면서 크기 변화도 같이 주고 싶다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 위의 코드 2-4 부분에 보면 다음과 같은 코드가 있었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 2-4. 초기화(크기 &amp;amp; 위치)
transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;딱보면 누가 봐도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;크기&lt;/code&gt;에 대해 변화도 주고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;위치&lt;/code&gt;값도 조절하게 생겼다. &lt;br /&gt;
 위에 gif에 생략된 마지막 4번째 스위치에 대한 동작을 보자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/gif3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 짤과 같이 크기(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;)변화가 있으면서 위치(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;)에 대한 변화도 있다.&lt;br /&gt;
저기서 끝이아니라 회전도 가져다 붙여줄 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q.이미 Scale이 있는데, Scale을 한번더 붙이면 어떻게 되나? &lt;br /&gt;
A. scale이 둘다 안먹힐때도 있고 마지막만 먹힐때도 있고 중구 난방이었다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;주의&quot;&gt;주의!!&lt;/h2&gt;
&lt;p&gt;쓰다가 발견했는데, 아래 심화 부분글 쓰다보니 잘못 이해한게 있었다. &lt;br /&gt;
아래 보면 알겠지만, 행렬 곱셈이 들어가기 때문에 두개의 순서가 바뀌면 예상치랑 달라진다. &lt;br /&gt;
A * B와,,, B * A는 다르다…..  더 자세한건 아래에. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;살짝-심화&quot;&gt;살짝 심화&lt;/h2&gt;

&lt;p&gt;(기본적인 사용법은 위가 전부. 아래는 아주 아주 살짝 심화랄까? ..) &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt;이란 아이를 콘솔에 찍어보면 어떻게 나올까? &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 원상 복구 값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.identity&lt;/code&gt; 출력 값을 보자 &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CGAffineTransform(a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: 0.0, ty: 0.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;는 1이고 나머진 0이 기본이란걸 알 수 있다.&lt;/p&gt;

&lt;p&gt;위에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;문에 있던 애들을 각각 찍어보자. 아래 코드처럼.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 선언
var transform: CGAffineTransform?

switch sender {
case scaleSwitch:
    // 2-1. 초기화(크기)
    transform = CGAffineTransform(scaleX: 2, y: 2)
case rotateSwitch:
    // 2-2. 초기화(회전)
    transform = CGAffineTransform(rotationAngle: .pi)
case translationSwitch:
    // 2-3. 초기화(위치)
    transform = CGAffineTransform(translationX: 0, y: -100)
case complexSwitch:
    // 2-4. 초기화(크기 &amp;amp; 위치)
    transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)
default:
    return
}

// 3. 출력
print(transform!)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3에 보면 transform이란 것에 대해 출력이 추가 되었다.( 이쁘게 출력하기 위해 강제해제&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; )&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 크기
CGAffineTransform(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: 0.0)
// 2. 회전
CGAffineTransform(a: -1.0, b: 1.2246467991473532e-16, c: -1.2246467991473532e-16, d: -1.0, tx: 0.0, ty: 0.0)
// 3. 위치
CGAffineTransform(a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: 0.0, ty: -100.0)
// 4. 크기 &amp;amp; 위치
CGAffineTransform(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: -200.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tx&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ty&lt;/code&gt; &lt;br /&gt;
문서에서 얼핏 본듯 하여 문서를 다시 보았다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img2.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transform&lt;/code&gt; 그래픽적으로 표현하는구나 하였었고, 이는 3x3 행렬로 보여주는 형식이었다. &lt;br /&gt; 
근데 아랫줄에 보면 다음과 같이 적혀있다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3번째 컬럼은 항상 (0,0,1)이다. 고로 CGAffineTransform은 1열과 2열에 대한 값을 가지고 있다. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다 한다. &lt;br /&gt; 
그렇지만 아핀행렬에 대해서 공부하기엔,,, ㅎ &lt;br /&gt;
이 문서로만 이해해보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 이미지 같은 형식으로 각각 초기화하게 된다. &lt;br /&gt; 
가장 기본은 위에 나온것 처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tx&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ty&lt;/code&gt; 이며, &lt;br /&gt; 
이건 필자처럼 어렵게 생각하니 쉽게 쓰라고 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotationAngle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;을 이용하여 사용성을 높힌듯 하다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 두가지를 이용한 4를 보면, 저 값은 (위치 행렬 x 크기 행렬)과 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하.. 잘봐야한다.. &lt;br /&gt;
2-4의 순서가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;라서 &lt;br /&gt;
당연히  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt;인줄 알았더만 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; 이었다…. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A * B와 B * A는 다르니….. 사용에 굉장히 주의바람 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img5.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(A: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; B: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translation&lt;/code&gt;)&lt;br /&gt;
의도는 -100 이었지만 -200에 해당되는 이동을 하게된다. 조심바람…. &lt;br /&gt;
-100 만큼 이동하고 2배로 키우고 싶었다면 아래 O 부분처럼 해야한다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// X
transform = CGAffineTransform(scaleX: 2, y: 2).translatedBy(x: 0, y: -100)

// O
transform = CGAffineTransform(translationX: 0, y: -100).scaledBy(x: 2, y: 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;윗 부분은 스케일도 두배만큼 이동하나보다… &lt;br /&gt;
B * A는 다음과 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-03-25/img4.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a = 2 x 1&lt;/li&gt;
  &lt;li&gt;d = 2 x 1&lt;/li&gt;
  &lt;li&gt;tx = 0 x 1&lt;/li&gt;
  &lt;li&gt;ty = -100 x 2&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(a: 2.0, b: 0.0, c: 0.0, d: 2.0, tx: 0.0, ty: -200.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 정의가 된다. 위에 4번과 일치 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이것을 정말 잘 이해한다면, 멋지게 사용이 가능할 것 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하 수정을 도대체 몇번을 한건지…. 몇시간이며 끝날줄 알았던 내용이 역대급으로 오래 걸린듯하다.&lt;/p&gt;

&lt;h2 id=&quot;끝&quot;&gt;끝.&lt;/h2&gt;
</description>
        <pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/swift/ui/2020/03/25/swift-DragAnimation_Step2_Transform.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/ui/2020/03/25/swift-DragAnimation_Step2_Transform.html</guid>
        
        
        <category>Swift</category>
        
        <category>UI</category>
        
      </item>
    
  </channel>
</rss>
