[
  
   
      {
        "title"    : "UIButton과 클래스",
        "category" : "",
        "tags"     : " swift, class, UIButton, Enum. CustomClass",
        "url"      : "/2018/07/15/swift-UIButton-%E1%84%80%E1%85%AA-Class.html",
        "date"     : "July 15, 2018",
        "excerpt"  : "<p>이번의 주제는 클래스를 좀 더 잘써보기 위한 글이다\n<!--more-->\n디자인적 요소에서 class를 효율적으로 사용해보자</p>\n\n<p>지금하는 프로젝트도 그렇고 어디서든  디자이너는 있다. 개인 프로젝트도 본인이 디자이너인것이다. 물론 퀄리티 차이는 어마어마하다.</p>\n\n<p>그런데 디자이너건 개인프로젝트건 사용하는 것중에 반복 되는 요소는 있기마련이다.\n예를 들자면 <code class=\"highlighter-rouge\">저...",
        "content"  : "<p>이번의 주제는 클래스를 좀 더 잘써보기 위한 글이다\n<!--more-->\n디자인적 요소에서 class를 효율적으로 사용해보자</p>\n\n<p>지금하는 프로젝트도 그렇고 어디서든  디자이너는 있다. 개인 프로젝트도 본인이 디자이너인것이다. 물론 퀄리티 차이는 어마어마하다.</p>\n\n<p>그런데 디자이너건 개인프로젝트건 사용하는 것중에 반복 되는 요소는 있기마련이다.\n예를 들자면 <code class=\"highlighter-rouge\">저장</code> 같은 버튼?\n통일성도 있을 뿐더러 시간 절약도 되는 것 같다.</p>\n\n<p>이번에도 이전글과 같이 <strong>아!! 이렇게 쓰면 좋겠네!</strong> 하는 경우이다<br /><a href=\"https://jiseobkim.github.io/2018/07/08/swift-class,struct-%EA%B0%92-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D-%EC%B0%A8%EC%9D%B4.html\">이전글: Class, Struct 값 전달 방식이 다른건 알지만 언제쓰지?</a></p>\n\n<p>다루게 내용은 다음과 같다</p>\n<ol>\n  <li>Class 없이 구현</li>\n  <li>Class 사용하여 구현</li>\n  <li>Class의 상속 이용</li>\n</ol>\n\n<p>오늘은 Play Grounds 말고 Xcode가 사용된다.</p>\n\n<p>우선 화면을 보자,\n<img src=\"/assets/img/post/2018-07-15/img1.png\" alt=\"\" />\n(왼쪽부터)</p>\n<ol>\n  <li>네비게이션바</li>\n  <li>메인 화면 - 버튼 선택 -&gt; 입력화면으로 이동</li>\n  <li>입력 화면 - 텍스트 필드 입력 후 저장 -&gt; 메인으로 이동</li>\n</ol>\n\n<p>구성은 오늘도 심플하다.</p>\n\n<p>여담으로 Xcode가 다크모드인것은 WWDC 2018에서 발표한 새로운 macOS인 Mojave에서 지원하는 다크모드이다! 다크모드 발표때 개발자들 환호성이 제일 크게 들렸던 것 같다. 현재 베타에서만 사용 가능하다.</p>\n\n<p>여기서 추가적으로 Xcode beta 10버전에서 오브젝트 라이브러리의 위치가 바뀌었다!</p>\n\n<p>(Xcode9)\n<img src=\"/assets/img/post/2018-07-15/img2.png\" alt=\"\" />\n기존의 위치는 위 사진 처럼 빨간색 영역이 오브젝트 라이브러리 이다.</p>\n\n<p>바뀐 위치를 보자\n(Xcode10 베타)\n<img src=\"/assets/img/post/2018-07-15/img3.png\" alt=\"\" />\n다음과 같다. 기존의 영역은 비어있고. 저렇게 새로운 창으로 영역이 바뀌었다.<br />\n(단축키 : <code class=\"highlighter-rouge\">Shift - option - L</code>)<br />\n(* bear 글쓰기 프로그램에 Xcode 10 베타 코드 복붙하면 이상해서 다시 9로 사용 .. ㅠㅠ)</p>\n\n<p>다시 본론으로 돌아가서</p>\n\n<p>주목해야할 부분은 <code class=\"highlighter-rouge\">저장</code> 버튼이다.</p>\n\n<h2 id=\"기획자-textfield가-글자-있는지-없는지에-따라저장-버튼-비활성화활성화로-해주세요\">기획자: TextField가 글자 있는지 없는지에 따라,<br />저장 버튼 비활성화/활성화로 해주세요.</h2>\n\n<p>이런 경우는 많고 많은 앱들에서도 보인다.</p>\n\n<p>여기서 추가 조건</p>\n\n<h2 id=\"디자이너-비활성화-색은-회색-활성화-색은-기본-파란색이요\">디자이너: 비활성화 색은 회색, 활성화 색은 기본 파란색이요</h2>\n<p>디자이너의 요구사항이라 가정하자.</p>\n\n<p>그럼 요약하자면</p>\n<ol>\n  <li>글자 입력됨 - 기본색, 활성화</li>\n  <li>글자 입력 안됨 - 회색, 비활성화</li>\n</ol>\n\n<p>(기본 화면)\n<img src=\"/assets/img/post/2018-07-15/img4.png\" alt=\"\" /></p>\n\n<h2 id=\"1-class-없이-구현\">1. Class 없이 구현</h2>\n<p>어디서 또는 어떻게 처리할지 부터 보면,</p>\n<ol>\n  <li>화면 진입시, 비활성화 상태 - viewDidLoad()</li>\n  <li>글자 입력시 - (TextField의 Editing Changed 사용)</li>\n</ol>\n\n<p>1을 코드로 하면 다음과 같다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span>\n<span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"o\">*//</span> <span class=\"mi\">1</span><span class=\"o\">.</span> <span class=\"n\">반응</span> <span class=\"n\">없게</span> <span class=\"n\">비활성화</span><span class=\"o\">*</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"o\">*//</span> <span class=\"mi\">2</span><span class=\"o\">.</span> <span class=\"n\">회색으로</span> <span class=\"n\">변경</span><span class=\"o\">*</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/post/2018-07-15/img5.png\" alt=\"\" /></p>\n\n<p>아주 아주 간단하다. 그럼 바로 이어서 2번째 조건</p>\n\n<p>Conection Inspector 에서</p>\n\n<p>연결은 먼저 하고\n<img src=\"/assets/img/post/2018-07-15/img6.png\" alt=\"\" /></p>\n\n<p>코드</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 조건: 글자가 비어있는가??</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 글자</span>\n            <span class=\"c1\">// 1. 반응 없게 비활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n            <span class=\"c1\">// 2. 회색으로 변경</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 글자 o</span>\n            <span class=\"c1\">// 1. 활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            <span class=\"c1\">// 2. 기본 색으로 변경</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"k\">self</span><span class=\"o\">**.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">tintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이것도 아주 간단하다.</p>\n\n<p>그렇지만 같은 코드가 계속 반복 된다.</p>\n\n<p>마음에 안드니 함수로 빼주자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-15/img7.png\" alt=\"\" /></p>\n\n<p>훨씬 깔끔하다.</p>\n\n<p>솔직히 이렇게만 끝내면 Class가 왜필요해? 라고 할 수 있다.\n그런데 위의 활성,비활성화를 함수로 만든 이유를 다시 생각해보자.</p>\n<ul>\n  <li>같은 코드가  반복된다</li>\n  <li>정리 안하면 코드가 지저분해 보인다.</li>\n  <li>만약 1개라도 변경하면 모든 부분을 찾아 바꿔야한다</li>\n</ul>\n\n<p>여기서 솔직하게 2번째 부분은 뭐 그러려니 할수있다. 그치만 1,3번 문제가 정말 크다\n1번 때문에 3번이 발생하는 것인데, 지금이 화면이 1개라 그렇지 많다고 하면 끔찍하다</p>\n\n<h2 id=\"화면이-1개가-아니라면\">화면이 1개가 아니라면?</h2>\n<p>만약에 입력해야할 화면이 1개가 아니고</p>\n<ol>\n  <li>이름 입력</li>\n  <li>이메일 입력</li>\n  <li>전화번호 입력\n<img src=\"/assets/img/post/2018-07-15/img8.png\" alt=\"\" /></li>\n</ol>\n\n<p>위처럼 입력 화면이 여러개일 경우 어떻게 할 것인가?</p>\n\n<p>각 UIVIewController 클래스 마다 함수를 만들것인가??\n그럼 다시 똑같은 문제가 발생한다.</p>\n<ul>\n  <li>같은 코드가  반복된다</li>\n  <li>정리 안하면 코드가 지저분해 보인다.</li>\n  <li>만약 1개라도 변경하면 모든 부분을 찾아 바꿔야한다</li>\n</ul>\n\n<p>그렇다면 어떻게 할까?\n방법은 2가지 정도 생각이 난다</p>\n<ol>\n  <li>Util 클래스를 만들어서 그안에 함수를 만들고 공통적으로 호출한다. (관리하기 편하게 Util에 모음)</li>\n  <li>UIButton을 상속한 클래스를 만들어서 사용한다.</li>\n</ol>\n\n<p>둘은 비슷하다.  차이가 있다면 기능은 같지만 <strong>약간의 차이점이 있는 버튼</strong> 을 만들어야한다면 차이가 발생한다.</p>\n\n<p>예를 들어 아래 사진을 보자\n<img src=\"/assets/img/post/2018-07-15/img9.png\" alt=\"\" />\n새로운 버튼이 생겼다. 저장 후 메인으로 돌아가는 버튼이다.\n기능은 동일하다고 했을때 차이점이 있다.</p>\n<ul>\n  <li>배경색</li>\n  <li>cornerRadius가 있다.</li>\n</ul>\n\n<p>기존 문제였던 바뀌었을 경우 어떻게 할것인가? 와는 다른 문제다.\n왜냐면 함수 내에것을 바꾸면 모두 바뀌지만 이건 성격이 좀 다른애가 생긴거니깐,</p>\n\n<p>물론 인자를 받아서 다르게 처리 할수는 있다!\n그렇지만 클래스의 상속을 이용한다면 더 편하게 할 수 있다.</p>\n\n<h1 id=\"class-사용하여-구현\">Class 사용하여 구현</h1>\n<p>우선 가장 기본이 되는 버튼의 클래스를 만들어보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 1. 스토리보드로 버튼 구현시</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 2. 코드로 버튼을 구현시</span>\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">UIButton</code>을 상속 받은 클래스이다.\n2가지 초기화 구문이 있다.\n위에 주석을 달아 놓은듯이\n<br />1은 스토리보드에서 버튼을 추가할경우 사용될 init 구문\n<br />2는 코드로 구현할시 사용</p>\n\n<p>1을 이용해서도 코드로 짤수는 있지만 해당부분은 아직 필자도 잘모르는 영역</p>\n\n<p>우리가 이용할 상태를 enum을 이용해서 표현해보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 버튼 상태 종류</span>\n    <span class=\"kd\">enum</span> <span class=\"n\">btnState</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">On</span>\n        <span class=\"k\">case</span> <span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 기본 값 = off 상태</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"n\">btnState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n\n    <span class=\"c1\">// on 컬러</span>\n    <span class=\"k\">var</span> <span class=\"nv\">onTintColor</span><span class=\"p\">:</span> <span class=\"kt\">UIColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"p\">(</span><span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"mi\">122</span><span class=\"o\">/</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nv\">alpha</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// off 컬러</span>\n    <span class=\"k\">var</span> <span class=\"nv\">offTintColor</span><span class=\"p\">:</span> <span class=\"kt\">UIColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">gray</span>\n\n<span class=\"c1\">// ----------- 기존 코드</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>기존 클래스에서 추가되었다. enum을 요즘 자주 이용하는데, 딱 필요한 케이스들만 나열하여, 다른 값을 방지할 수 있으며, switch문과 같이 쓰면 굉장히 좋다. 추가적으로 컬러값도 지정해놓았다.</p>\n\n<p>그럼 이제  셋팅을 해보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 버튼 상태 종류</span>\n    <span class=\"kd\">enum</span> <span class=\"n\">btnState</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">On</span>\n        <span class=\"k\">case</span> <span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 기본 값 = off 상태</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"n\">btnState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span> <span class=\"p\">{</span>\n        <span class=\"k\">didSet</span> <span class=\"p\">{</span>\n            <span class=\"nf\">setting</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n\t  <span class=\"c1\">//.. 컬러변수 생략</span>\n    <span class=\"c1\">// 1. 스토리보드로 버튼 구현시</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 기본 셋팅</span>\n        <span class=\"nf\">setting</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 2. 코드로 버튼을 구현시</span>\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 기본 셋팅</span>\n        <span class=\"nf\">setting</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"kd\">func</span> <span class=\"nf\">setting</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// on 컬러 (기본색)</span>\n\n        <span class=\"k\">switch</span> <span class=\"n\">isOn</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kt\">On</span><span class=\"p\">:</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"n\">onTintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kt\">Off</span><span class=\"p\">:</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"n\">offTintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>차이점은 세가지가 있다</p>\n<ol>\n  <li>setting() 함수가 생긴것</li>\n  <li>setting 함수가 init구문에 적용된것</li>\n  <li>isOn 변수에 didSet을 추가</li>\n</ol>\n\n<p>설명이 필요한건 3번만 설명하면 될 것 같다, 3번 didSet의 경우 해당 변수기 초기화 되었을때,  호출되는 내용이다. 이것도 잘 활용하면 장점이 많다.</p>\n\n<p>뭔가 보기엔 <strong>뭐야? 오히려 더 힘든데?</strong> 할수 있다, 그렇지만 처음에 셋팅만 어렵지 사용은 아주 간단하다.</p>\n\n<p>우선 버튼에 클래스를 넣어주고\n<img src=\"/assets/img/post/2018-07-15/img10.png\" alt=\"\" />\nIBOutlet도 변경</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//@IBOutlet var btnSave: UIButton!</span>\n<span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">AnotherBUtton</span><span class=\"o\">!</span>\n</code></pre></div></div>\n\n<p>그럼 이제 사용해보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AddNameViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span><span class=\"o\">!</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"c1\">// 버튼 비활성화</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 조건: 글자가 비어있는가??</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 버튼 비활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 버튼 활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">On</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>심플의 끝이다. 마음에 평화가 찾아온다….</p>\n\n<p>물론 전역 함수로해도 한줄로 하면 끝이긴 하지만 위에 말했듯이 차이점이 있다.\n그리고 enum을 써서 가독성도 훨씬 좋다. 사용성도 좋다, 아래 사진처럼 .을 누르면 알아서 나오니깐 다른곳에서도 적절히 잘 사용하자.\n<img src=\"/assets/img/post/2018-07-15/img11.png\" alt=\"\" /></p>\n\n<p>그렇담 아까 문제가 되었던 활성/ 비활성은 같으나 특성이 다른것은 어떻게 구현을 할까?</p>\n\n<h1 id=\"class-상속을-사용하여-구현\">Class 상속을 사용하여 구현</h1>\n<p>아까 만들어둔 클래스를 상속하는 클래스를 만들고 override를 이용하는 것이 결론이다.</p>\n\n<p>만약 전역 함수나 Util 클래스를 생성해서 거기다가 함수를 만들어서 사용한다면</p>\n<ol>\n  <li>오버로드를 이용해서 같은 이름의 함수를 여러개 만든다</li>\n  <li>인자값에 따라 다르게 처리되게 한다\n라던가, 뭐 방식은 있다. 그렇지만 가독성도 안좋다!</li>\n</ol>\n\n<p>배경색과 cornerRadius이 첨가된 활성/비활성 버튼 클래스를 만들어보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">BtnWithBackGroundColor</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span> <span class=\"p\">{</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 새로운 조건</span>\n        <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 새로운 조건</span>\n        <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">green</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>처음에 만든 클래스보다 굉장히 간단하다. 내가 새로 필요한것만 override 해주고\n기존것은 그대로 가져다 쓴다.</p>\n\n<p>사용법은? 같다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AddNameViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span><span class=\"o\">!</span>\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave2</span><span class=\"p\">:</span> <span class=\"kt\">BtnWithBackGroundColor</span><span class=\"o\">!</span>\n\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"c1\">// 버튼 비활성화</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// 기존 생략..</span>\n\n        <span class=\"c1\">// 배경색 있는 버튼</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"n\">btnSave2</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">btnSave2</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">On</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>실행 사진은? 잘나온다\n<img src=\"/assets/img/post/2018-07-15/img12.png\" alt=\"\" /></p>\n\n<h2 id=\"디자이너-저장후-메인-가는-버튼-글자-크기는-볼드17로-글자색은-비활성흰색-활성-빨간색으로-변경해주세요\">디자이너: 저장후 메인 가는 버튼 글자 크기는 볼드17로, 글자색은 비활성:흰색, 활성: 빨간색으로 변경해주세요</h2>\n\n<p>이럴 경우 어떻게 하면 되는가!</p>\n\n<p><code class=\"highlighter-rouge\">BtnWithBackGroundColor</code> 클래스의 <code class=\"highlighter-rouge\">addSomeThing()</code> 만 손보면 된다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">green</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"c1\">// 추가 요청</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">titleLabel</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"kt\">UIFont</span><span class=\"o\">.</span><span class=\"nf\">boldSystemFont</span><span class=\"p\">(</span><span class=\"nv\">ofSize</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">)</span> <span class=\"c1\">// 폰트 볼드 및 사이즈 17</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">offTintColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">white</span> <span class=\"c1\">// off 컬러 흰색</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">onTintColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"c1\">// on 컬러 레드</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setting</span><span class=\"p\">()</span> <span class=\"c1\">// 바뀐것으로 셋팅 !</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>저렇게만 추가해주면 아래 사진처럼 바뀐게 나오게 된다!\n저기만 손보고 여러곳의 버튼들을 한꺼번에 수정이 된다니 너무좋다.</p>\n\n<p>다만 이해 안될 소지가 있는건  <code class=\"highlighter-rouge\">self.setting()</code>인데, 저것을 안해주면 컬러값이 안변한다. 저 변수들은 setting()에서 사용이 되는데, init 구문에서 부모클래스가 사용을 하고 바뀐 값으론 사용이 안되었기 때문이다!</p>\n\n<p><img src=\"/assets/img/post/2018-07-15/img13.png\" alt=\"\" /></p>\n\n<p>만약 여러가지 복합 적으로 추가할 경우에도 크게 다르지 않지만 만들기 편함과 유지보수 면에서도 굉장히 편리하게 진행할 수 있다.</p>\n\n<p>이렇게 해두면, 요청으로 인해서 변경할때도 한꺼번에 변경 및 수정이 가능하니\n필요한곳에 잘사용하면 좋을 것 같다!</p>\n\n<p>정말 심플한 예제로 시작을 하였고, 아직 복잡한 곳엔 많이 이용안해봤지만\n좀더 쓸곳을 찾아봐야겠다.</p>\n"
      } ,
   
      {
        "title"    : "Class, Struct 값 전달 방식이 &lt;br&gt; 다른건 알지만 언제쓰지?",
        "category" : "",
        "tags"     : " swift, class, struct",
        "url"      : "/2018/07/08/swift-class,struct-%E1%84%80%E1%85%A1%E1%86%B9-%E1%84%8C%E1%85%A5%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AF-%E1%84%87%E1%85%A1%E1%86%BC%E1%84%89%E1%85%B5%E1%86%A8-%E1%84%8E%E1%85%A1%E1%84%8B%E1%85%B5.html",
        "date"     : "July 8, 2018",
        "excerpt"  : "<h3 id=\"swift---값에-의한-전달-그리고-참조에-의한-전달\">Swift - 값에 의한 전달 그리고 참조에 의한 전달</h3>\n\n<!--more-->\n\n<p><br /></p>\n<h2 id=\"차이가-있다는건-나도-안다-그치만-언제-쓸모가-다를지-모르겠다\">차이가 있다는건 나도 안다! 그치만 언제 쓸모가 다를지 모르겠다.</h2>\n<p>마치 고등학교때 배운 미적분 마냥, 배우긴 했지만 어떻게 써먹어야할지 애매했다.</p>\n\n<p>많...",
        "content"  : "<h3 id=\"swift---값에-의한-전달-그리고-참조에-의한-전달\">Swift - 값에 의한 전달 그리고 참조에 의한 전달</h3>\n\n<!--more-->\n\n<p><br /></p>\n<h2 id=\"차이가-있다는건-나도-안다-그치만-언제-쓸모가-다를지-모르겠다\">차이가 있다는건 나도 안다! 그치만 언제 쓸모가 다를지 모르겠다.</h2>\n<p>마치 고등학교때 배운 미적분 마냥, 배우긴 했지만 어떻게 써먹어야할지 애매했다.</p>\n\n<p>많은 책에서 중요하게 다루는 구조체와 클래스,</p>\n\n<p>다르다는 설명은 많다. 전달 방식에 따라 다른 것 외에도 차이점은 많지만</p>\n\n<p>개발 경력이 얼마 안되서 그런지 실제로 다르게 써야한다고 느낀적이 없었다…</p>\n\n<p>둘이 비슷한정도로만 사용했던 것 같다.</p>\n\n<p>그런데! 개발하다가 <strong>아!! 이때 필요하겠는데?</strong> 라고 최근에 느꼈다.</p>\n\n<p>비스무리한 예를 들어서 포스팅을 해야겠다.</p>\n\n<p>중점은 값을 전달 하는것과 주소 값를 전달 하는것에 맞춰서!</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"예시-구조\">예시 구조</h2>\n<p>학교라는 틀에서 설명을 해보려고한다.</p>\n\n<blockquote>\n  <p>학교 : ( 학교 이름 / 학년 리스트 )\n<br />\n학년 : ( 학년 이름 / 반 리스트 )\n<br />\n반 : ( 반 이름 / 학생 리스트 )\n<br />\n학생 정보 : ( 이름 / 번호 )</p>\n</blockquote>\n\n<p>이런식으로 상위 개념이 하위 개념들을 포함하고 있다고 가정을 하자.</p>\n\n<p>이를 코드로 표현을 해보자.</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"struct\">Struct</h2>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학생 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">StudentInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"c1\">// 학생 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>  <span class=\"c1\">// 학생 번호</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 반 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">ClassInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">className</span><span class=\"p\">:</span> <span class=\"kt\">String</span>           <span class=\"c1\">// 반 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">studentList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">StudentInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 반내의 학생들 리스트(배열)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 학년 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">GradeInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학년 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">classList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">ClassInfo</span><span class=\"p\">]</span> <span class=\"c1\">// 학년내의 반 리스트</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 학교 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">SchoolInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학교 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GradeInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 학교내의 학년 리스트</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>우선, 여기서 포인트는 모두 <strong>Struct(구조체)</strong> 로 만들었다는 점이다!</p>\n\n<p>간단하니 바로 이어서 선언과 초기화로!</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"선언-및-초기화\">선언 및 초기화</h2>\n<p>구조상 학교/학년/반/학생이 너무 많으면 헷갈릴테니 아래처럼 심플하게 구성</p>\n<ul>\n  <li>학교.학년,반: 1개</li>\n  <li>학생 : 2명</li>\n</ul>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학생 2명!</span>\n<span class=\"k\">var</span> <span class=\"nv\">student1</span> <span class=\"o\">=</span> <span class=\"kt\">StudentInfo</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"student 1\"</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">var</span> <span class=\"nv\">student2</span> <span class=\"o\">=</span> <span class=\"kt\">StudentInfo</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"student 2\"</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 반 1개! (2명의 학생을 가지고 있다.)</span>\n<span class=\"k\">var</span> <span class=\"nv\">class1</span> <span class=\"o\">=</span> <span class=\"kt\">ClassInfo</span><span class=\"p\">(</span><span class=\"nv\">className</span><span class=\"p\">:</span> <span class=\"s\">\"class 1\"</span><span class=\"p\">,</span> <span class=\"nv\">studentList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">student1</span><span class=\"p\">,</span><span class=\"n\">student2</span><span class=\"p\">])</span>\n\n<span class=\"c1\">// 학년 1개! (1개의 반만 가지고 있고)</span>\n<span class=\"k\">var</span> <span class=\"nv\">grade1</span> <span class=\"o\">=</span> <span class=\"kt\">GradeInfo</span><span class=\"p\">(</span><span class=\"nv\">gradeName</span><span class=\"p\">:</span> <span class=\"s\">\"grade 1\"</span><span class=\"p\">,</span> <span class=\"nv\">classList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">class1</span><span class=\"p\">])</span>\n\n<span class=\"c1\">// 학교 1개! (역시 1개의 학년만 가지고 있다.)</span>\n<span class=\"k\">var</span> <span class=\"nv\">school1</span> <span class=\"o\">=</span> <span class=\"kt\">SchoolInfo</span><span class=\"p\">(</span><span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"s\">\"school 1\"</span><span class=\"p\">,</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">grade1</span><span class=\"p\">])</span>\n\n</code></pre></div></div>\n\n<p>첫번째 상황은 간단하게 내부 구조를 파헤치는 것을 시도해보는 정도로 삼아 간단하게 해보자.</p>\n\n<p><br /><br /></p>\n\n<h1 id=\"상황-1\">상황 1:</h1>\n<h2 id=\"js씨-모든-학생의-이름을--따로-배열로-만들어주세요\">JS씨 모든 학생의 이름을 <br /> 따로 배열로 만들어주세요!</h2>\n\n<p>내부를 순회하는 방법 중 무난한 2개로 가보자.</p>\n<ol>\n  <li>for문</li>\n  <li>forEach문 (closer 사용)</li>\n</ol>\n\n<p>1은 많은 사람들이 기본적으로 사용하겠지만 2의 경우 이해하면 쉽지만 다소 낯설은 감이 있다.</p>\n\n<p>하지만 익숙해지고 forEach를 종종 쓰게 되었다.</p>\n\n<p>익숙한것부터!</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">nameList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>2중에 3중까지,,, 심플해서 다행이다.\n일단 결과값을 보자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 1.png\" alt=\"\" /></p>\n\n<p>학생1과 학생2가 잘들어갔다.</p>\n\n<p>그럼, 필자가 좋아하는 forEach 를 사용해보자.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n        <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>아 좋다. 훨씬 심플하다. 필요한것만 있는 느낌, 마음이 편해진다. (개인취향)</p>\n\n<p>하지만 이건 스위프트 언어 특징인 <code class=\"highlighter-rouge\">타입 추론</code> 이라는 것 덕분에 심플해보인다.</p>\n\n<p>타입추론을 이용하여 ‘어차피 너는 정해져있어’ 하는 애들을 생략한 것이다.</p>\n\n<p>그렇다면 타입 추론 사용을 안한다면?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 생략 x</span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">(</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">row1</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">({</span> <span class=\"p\">(</span><span class=\"n\">row2</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">({</span> <span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>별로다. 괄호가 너무 많아서 별로다.</p>\n\n<p>여기선 row에 관해서만 생략이 되었다.</p>\n\n<p>뭘 어떻게 생략했는지, 아니면 관심이 더간다면 <strong>클로저</strong> 검색!</p>\n\n<p>얘기가 잠시 딴길로 샜다. (그치만 클로저란 좋은것)</p>\n\n<p>이 포스팅의 목적이었던, struct와 class 로 돌아가자</p>\n\n<p>이번엔 구조체와 클래스의 차이점을 확실히 보게 될 상황으로 가보자.</p>\n\n<p>책에서 많이 봤을 내용이다.</p>\n<ul>\n  <li>클래스: 주소 정보를 전달</li>\n  <li>구조체: 값을 전달</li>\n</ul>\n\n<p>많이 봤다, 분명히 봤다, 그치만 몰랐다, 언제 써야해?</p>\n\n<p>상황으로 가보자</p>\n\n<p><br /><br /></p>\n\n<h1 id=\"상황-2\">상황 2.</h1>\n<h2 id=\"js씨-학생들-번호가-0부터-시작했어요-전부-1씩-더해야해요\">JS씨 학생들 번호가 0부터 시작했어요, <br />전부 1씩 더해야해요</h2>\n\n<p>음 말이 안되는 상황이지만? 이해가 쉽게 개발자가 배열 0번부터 시작해서 나온 귀여운 실수로 가정 해보자.</p>\n\n<p>위에서 이름 추가하는 부분을 살짝 바꾸자\n익숙한 for문으로 한다면?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>row3에서 해당을 순서에서 row3.number 값을 +1만 해주면 될까?</p>\n\n<p>결과를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 2.png\" alt=\"\" /></p>\n\n<p>세상에나.. Play Grounds에선 친절하게 한글로 나온다.</p>\n\n<p>근데, 중요한건 에러가 난다는 것이다.  $0은 변경할 수 없다고 한다.</p>\n\n<p>그렇다면 값을 바꾸고 싶다면 어떻게 해야할까?</p>\n\n<p>위에 문법에선 몇번째인지 모른다. row1,2,3의순서가 필요하다</p>\n\n<p>그렇담 이렇게?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n            <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>아아아… 끔찍하다. 최악이다. 너무 싫다.\n결과는 제대로 나왔나???\n<img src=\"/assets/img/post/2018-07-08/image 3.png\" alt=\"\" />\n제대로 나왔다.\n위의 사진에서 프린트 문을 실행한 결과 박스를 보자\n값이 다르다</p>\n\n<p>1번 학생에 대해 보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1. 값 0</span>\n<span class=\"n\">student1</span><span class=\"o\">.</span><span class=\"n\">number</span>\n\n<span class=\"c1\">// 2. 값 1  </span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span>\n</code></pre></div></div>\n<p>분명 학생 리스트에 0번 학생 정보는 student1이었다. 근데 왜 값이 다를까?</p>\n\n<p>이는 위에 말했듯이 <strong>구조체</strong> 이기 때문이다.</p>\n\n<p>구조체는 값에 의한 전달이기 때문에 값을 카피를 한다.</p>\n\n<p>따라서, 주석 번호 1과 2는 별개의 존재이다</p>\n\n<p>코드상 school1에 값을 더했기 때문에\n첫번째 줄은 0이고, 두번째 줄은 1이다</p>\n\n<p>근데 위에 for문은 너무 최악이다. 너무 싫다\n배열의 enumerate()라는 메소드가 딱이다.\n일단 코드를 보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">row1</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">row2</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span> <span class=\"n\">row3</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">(){</span>           \n <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">x3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>오.. 좋다.. 마음에 평화가 오기  시작한다</p>\n\n<blockquote>\n  <p>간단하게 enumerate()에 대해 설명하자면,\n<br />- x :현재 카운트 번호\n<br />- row : 현재 데이터\n<br />라고 생각하자.  그래서 값을 넣을때 각 자리에 x1,x2,x3를 넣어주는 것이다.\n<br />그리고 +1 row3.number에 +1을 하는것이고!\n<br />but. value += 1 이런 방식이면 더 깔끔\n<br />( 이해가 안된다면 천천이 읽어보자.)</p>\n</blockquote>\n\n<p>row -&gt; 현재 데이터<br />\n라고 생각하자.  그래서 값을 넣을때 각 자리에 x1,x2,x3를 넣어주는 것이다.<br />\n그리고 +1 row3.number에 +1을 하는것이고!\nbut. value += 1 이런 방식이면 더 깔끔\n( 이해가 안된다면 천천이 읽어보자.)</p>\n\n<p>그치만 역시나 아쉽다. 값 넣는 부분이 맘에 들지 않는다.</p>\n\n<p>값에 의한 전달이기 때문에 아쉽다. struct라서 아쉽다.</p>\n\n<p><br /><br /></p>\n\n<h3 id=\"그렇다면-주소값을-전달하는-class라면\">그렇다면, 주소값을 전달하는 class라면?</h3>\n\n<p>데이터 변경 예정인 <code class=\"highlighter-rouge\">학생 정보</code>  구조체만 클래스로 바꾸자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학교 정보</span>\n<span class=\"kd\">class</span> <span class=\"kt\">SchoolInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학교 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GradeInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 학교내의 학년 리스트</span>\n\n    <span class=\"c1\">// 초기화 구문</span>\n    <span class=\"nf\">init</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">){</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>클래스에선 구조체와 달리 초기값이 필요하다! 그래서 <code class=\"highlighter-rouge\">init</code> 부분을 넣고!</p>\n\n<p>아까 오류 났던 문법을 다시 보자.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 문법의 결과는???</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 4.png\" alt=\"\" /></p>\n\n<p>짜잔~ 오른쪽에 2x가 보인다. 학생은 2명이니깐 2번 돌았다는 것이다.</p>\n\n<p>코드 실행이 성공했다!  깔끔해!</p>\n\n<p>그럼 결과를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 5.png\" alt=\"\" /></p>\n\n<p>차이점이 보인다.\n아까의 결과는 1,2번줄 결과는 분명 초기 값인 0과 1이었다.</p>\n\n<p>그런데, 지금은 school1에 +1 씩 한값으로 변경이 되었다.</p>\n\n<p>클래스는 참조에 의한 전달이니깐 주소로 찾아가서 원본 값을 바꿔준것이다!</p>\n\n<p><br /><br /></p>\n<h3 id=\"ps\">ps.</h3>\n<p>말로만 듣던\n클래스는 참조에 의한 전달\n구조체는 값에 의한 전달</p>\n\n<p>언제 다르게 써먹을 수 있을지 생각하고 사용할 수 있는 케이스였다.</p>\n\n<p>어디선간 그런말을 들었다. 뭐 여러 가지 이유는 있었지만\n참조에 의한 전달이 아닐땐 구조체를 쓰자~라는?</p>\n\n<p>이번 케이스를 통해 나눌 필요성을 느꼈다.\n하지만 아직 부족하다 좀더 여러케이스가 필요하다.</p>\n\n<p>아참 나는 forEach문 클로저 사용 하는게 더 좋으니깐 이것도 첨부</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// number에 1씩 더하기</span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n        <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Peace!</p>\n"
      } 
   ,
   
     {
       
          "title"    : "MemCoo",
          "category" : "",
          "tags"     : " portfolio",
          "url"      : "/portfolio/memcoo",
          "date"     : "July 1, 2018",
          "excerpt"  : null,
          "content"  : null
       
     } 
   
  
]