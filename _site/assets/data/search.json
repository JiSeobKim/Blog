[
  
   
      {
        "title"    : "서버 연동 기본과 Encodable",
        "category" : "",
        "tags"     : " swift, Alamofire, Network, Server, 서버연동, Codable, Encodable",
        "url"      : "/2018/08/05/swift-%E1%84%89%E1%85%A5%E1%84%87%E1%85%A5-%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%83%E1%85%A9%E1%86%BC-%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%AA-Encodable-(Without-Alamofire).html",
        "date"     : "August 5, 2018",
        "excerpt"  : "<p>라이브러리(Almofire) 없이 통신하기!\n<!--more--></p>\n\n<p>이전편에선 Alamofire를 가지고 통신을 연습했고. 그리고 같이 나왔던 Codable은 &lt; Encodable&amp;Decodable &gt;로 이루어져있었습니다.</p>\n\n<p><a href=\"https://jiseobkim.github.io/2018/07/21/swift-Alamofire와-Codable.html\">참고: Alamofire와 ...",
        "content"  : "<p>라이브러리(Almofire) 없이 통신하기!\n<!--more--></p>\n\n<p>이전편에선 Alamofire를 가지고 통신을 연습했고. 그리고 같이 나왔던 Codable은 &lt; Encodable&amp;Decodable &gt;로 이루어져있었습니다.</p>\n\n<p><a href=\"https://jiseobkim.github.io/2018/07/21/swift-Alamofire와-Codable.html\">참고: Alamofire와 Codable</a>\n<a href=\"https://jiseobkim.github.io/2018/07/29/swift-Alamofire와-Escaping.html\">참고: Alamofire와 Escaping</a></p>\n\n<p>위 내용중 Decodable을 이용하여, 별도의 비강제 해제처리 없이 응답값으로 만든 새 인스턴스를 얻는건 완소기능이었죠.</p>\n\n<p>하지만, Encodable을 사용하진 못했습니다. 실제로 사용할때 Alamofire의 파라미터를 넣을때 형식은 아래와 같습니다</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">param</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">:</span><span class=\"kt\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"nv\">value1</span> <span class=\"p\">:</span> <span class=\"n\">a1</span><span class=\"p\">,</span>\n  <span class=\"nv\">value2</span> <span class=\"p\">:</span> <span class=\"n\">a2</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>딕셔너리 형태이며 키는 String 값은 Any 타입입니다. 하지만 Encodable을 이용한다면, JSON 형태의 데이터로 들어가게 됨으로 사용이 불가능 했죠\n(Alamofire Codable 이라 검색하면 관련 라이브러리는 많이 있습니다.)</p>\n\n<p>솔직히 개인적으론 라이브러리가 많이 추가되는건 좋지 않다고 생각합니다, 훌륭한 라이브러리들이 많지만 내가 원하는 기능 외에도 차지하는것들이 많을 수도 있기에\n자신이 비교적 쉽게 구현을 할 수 있다면, 필요한 정도로만 만들어 쓰는게 좋다고 <strong>개인적으로 생각합니다!</strong></p>\n\n<p>이번엔 Encodable을 이용하기 위해 라이브러리 없이 통신을 구현해보고자 합니다!</p>\n\n<p><br /></p>\n\n<hr />\n\n<h1 id=\"서버-연동-기본\">서버 연동 기본</h1>\n\n<h2 id=\"restful-api\">RESTFul API</h2>\n\n<p>RESTFul API의 자세한건 나중에 알아보고 쉽게 통신을 하기 위해 생긴 구조적 약속? 정도로 생각을 합시다!</p>\n\n<p>RESTFull API를 찾다보면 CRUD라 용어가 나옵니다.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">CRUD</th>\n      <th style=\"text-align: center\">의미</th>\n      <th style=\"text-align: center\">Http Method</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">C</td>\n      <td style=\"text-align: center\">Create</td>\n      <td style=\"text-align: center\">POST</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">R</td>\n      <td style=\"text-align: center\">Read</td>\n      <td style=\"text-align: center\">GET</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">U</td>\n      <td style=\"text-align: center\">Update</td>\n      <td style=\"text-align: center\">PUT</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">D</td>\n      <td style=\"text-align: center\">Delete</td>\n      <td style=\"text-align: center\">DELETE</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>이러한 용어들의 약어이며, 만들고, 읽고, 수정하고, 삭제할때 각각 기능을 쓰게 되는것입니다.</p>\n\n<p>이글에선 CRUD 이런건 모르더라도 해당 메소드들이 사용되기에 (POST / GET / PUT / DELETE) 4가지가 있다는걸 숙지하고,</p>\n\n<p>이 4가지 외엔 사용이 안되기에, 이럴 경우엔 열거형(enum)이 제격입니다</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">HttpMethod</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"s\">\"POST\"</span>\n        <span class=\"k\">case</span> <span class=\"k\">get</span> <span class=\"o\">=</span> <span class=\"s\">\"GET\"</span>\n        <span class=\"k\">case</span> <span class=\"n\">put</span> <span class=\"o\">=</span> <span class=\"s\">\"PUT\"</span>\n        <span class=\"k\">case</span> <span class=\"n\">delete</span> <span class=\"o\">=</span> <span class=\"s\">\"DELETE\"</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이제 해당 필요한 자리엔 <strong><code class=\"highlighter-rouge\">HTTPMethod</code></strong> 를 쓰면 됩니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"구조\">구조</h2>\n\n<p>오늘 필요한 함수를 미리 한번 훑어 보면 아래와 같습니다</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">requestTest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">HttpMethod</span><span class=\"p\">,</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kt\">Data</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// 1. 요청 객체 생성</span>\n    <span class=\"k\">var</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">URLRequest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"c1\">// 2. 요청 방식</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">httpMethod</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">rawValue</span>\n    <span class=\"c1\">// 3. 헤더</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"s\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"nv\">forHTTPHeaderField</span><span class=\"p\">:</span> <span class=\"s\">\"Content-Type\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">// 4. 바디</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">httpBody</span> <span class=\"o\">=</span> <span class=\"n\">body</span>\n    <span class=\"c1\">// 5. Session</span>\n    <span class=\"k\">let</span> <span class=\"nv\">session</span> <span class=\"o\">=</span> <span class=\"kt\">URLSession</span><span class=\"o\">.</span><span class=\"n\">shared</span>\n    <span class=\"k\">let</span> <span class=\"nv\">task</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"nf\">dataTask</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">guard</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">!.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">anyData</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">jsonObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">anyData</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        \n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 6. 실행</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"nf\">resume</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3 id=\"1-요청-객체-생성\">1. 요청 객체 생성</h3>\n\n<p>통신을 요청할때 사용되는 <strong>URLRequest</strong> 라는 Swift 기본 제공 구조체가 있습니다. 여기에 인자 값으로는 URL만 넣어주면 객체가 생성됩니다. 쉽죠?</p>\n\n<p><br /></p>\n\n<h3 id=\"2-요청-방식\">2. 요청 방식</h3>\n\n<p>위에서 만든 열거형이 사용될때가 왔습니다. 함수를 내용없이 다시 보면</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">requestTest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">HttpMethod</span><span class=\"p\">,</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kt\">Data</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>2번째 인자값인  <strong><code class=\"highlighter-rouge\">type</code></strong> 이 위에 만든 열거형입니다!</p>\n\n<p>실제 사용될땐 이렇게 됩니다</p>\n\n<p><img src=\"/assets/img/post/2018-08-05/img1.png\" alt=\"\" /></p>\n\n<p>빨간색 오류 없을때 캡쳐 실패해서 아쉽지만, 중요한건 입력 목록에 (delete / get / post / put) 만 뜨는 점이 매력적이죠</p>\n\n<p>다른 값은 입력이 불가능합니다. 즉, 오타나 다른 값을 넣어서 실수하는것이 방지 되는것이죠.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 2. 요청 방식</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">httpMethod</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">rawValue</span>\n</code></pre></div></div>\n\n<p>위의 코드에 보면 request라는 구조체에는 httpMethod라는 <strong>String 타입</strong>인 저장 프로퍼티가 있습니다. (저에겐 저장 프로퍼티는 잘 안쓰는 말이라 어색하지만 블로그이기에 사용해야할것 같아서 사용했습니다! Struct 내의 선언된 변수로 생각하시면 됩니다.)</p>\n\n<p>근데 보면 <strong>type.rawValue</strong> 라는것이 써있는데 이건 간단합니다. type이라고 안쓰는 이유는 type은 자료형이 HttpMethod입니다. 즉 String이 아니죠, 그렇지만 각각 case의 String값이 부여 되어있었죠. 그 값들을 사용하기 위해 위와 같은 방법으로 값을 꺼내올 수 있습니다.</p>\n\n<p><br /></p>\n\n<h3 id=\"3-헤더-header\">3. 헤더 (Header)</h3>\n\n<p>여기서 통신에 필요한 개념이 나옵니다. 바로 <strong>헤더</strong>와 <strong>바디</strong> 입니다. 좀 더 쉽게 표현하자면, 통신의 정보(Header)와 전달할 내용(Body)라고 생각하고 있습니다. <strong>(통신에 대해 지식이 짧기때문에 조금더 찾아보시는걸 권장합니다)</strong></p>\n\n<p>여긴 헤더 파트이니 헤더만 보면!</p>\n\n<p>적힌곳에 컨텐츠 타입이란 것이 있습니다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 3. 헤더</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"s\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"nv\">forHTTPHeaderField</span><span class=\"p\">:</span> <span class=\"s\">\"Content-Type\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<p>즉, 내가 무언가 정보를 전달할껀데 이건 JSON으로 되어있어! 이런 정보입니다. (틀리다면 말씀해주세요!)</p>\n\n<blockquote>\n  <p>이 통신의 타입(“Content-Type”)은 JSON(“application/json”) 이야! 정도??</p>\n</blockquote>\n\n<p>여기엔 컨텐츠 타입말고도 다른것도 들어갈수 있습니다. 정보를 비밀스럽게 담고있는 토큰(Token)같은 것들?? 자세한건 나중에!</p>\n\n<p><br /></p>\n\n<h3 id=\"4-바디body\">4. 바디(Body)</h3>\n\n<p>그럼 이제 바디를 설명하기전에 로그인 절차를 생각해봅시다</p>\n\n<ol>\n  <li>아이디 입력</li>\n  <li>비밀번호 입력</li>\n  <li>로그인 버튼 클릭</li>\n</ol>\n\n<p>이런 과정이 있겠죠. 여기서 3은 기능이고 1,2번은 정보입니다. 즉 파라미터죠 이게 바디입니다.</p>\n\n<p>(Alamofire에선 [String:Any]에 해당되고 해당 값들은 라이브러리내에선 JSON 데이터로 형변환하게됩니다!)</p>\n\n<p>우리가 로그인을 요청할때 이런 파라미터는 꼭 필요합니다.</p>\n\n<p>하지만 정보를 얻어오기만 한다면? 예를들어 음, 현재 시간을 가져오는 API일 경우 필요가 없죠 그래서</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">requestTest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">HttpMethod</span><span class=\"p\">,</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kt\">Data</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>위와 같이 body에 해당 되는 데이터는 없을수도 있기에 옵셔널 처리 하고 default는 nil로 해놨기에 함수 사용할땐 없애도 되는 부분입니다. 이렇게</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 바디없이 사용</span>\n<span class=\"nf\">requestTest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3 id=\"5-세션-session\">5. 세션 (Session)</h3>\n\n<p>세션은 코드가 위것들보단 조금 어려워보입니다. 일단 코드를 보면</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Session</span>\n\t<span class=\"c1\">// 1. 객체 생성</span>\n    <span class=\"k\">let</span> <span class=\"nv\">session</span> <span class=\"o\">=</span> <span class=\"kt\">URLSession</span><span class=\"o\">.</span><span class=\"n\">shared</span>\n\t<span class=\"c1\">// 2. 이 객체가 할일 (with: 요청값)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">task</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"nf\">dataTask</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n\t\t<span class=\"c1\">// 2-1. error가 발생여부</span>\n        <span class=\"k\">guard</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 2-2. error 출력</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">!.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 2-3. 받은 Data을 Any 형태로 변환</span>\n            <span class=\"k\">let</span> <span class=\"nv\">anyData</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">jsonObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n            <span class=\"c1\">// 2-4. 결과값 출력</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">anyData</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    \n    <span class=\"p\">}</span>\n\t<span class=\"c1\">// 3. 실행    </span>\n\t<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"nf\">resume</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<ol>\n  <li>통신하게될 객체 생성</li>\n  <li>요청값(위에서 만든 URLRequest)를 가지고 통신 및 응답값 처리(클로져)를 구성</li>\n  <li>2번 실행</li>\n</ol>\n\n<p>이렇게 됩니다. 1과 3은 단순하고 2를 좀더 보면</p>\n\n<p>통신을 위한 셋팅이라고 생각하면 됩니다! 뒤에 클로져의 경우 응답이 왔을 경우 처리이며, 그 값들을보면</p>\n\n<ol>\n  <li>data: JSON Data</li>\n  <li>response: 페이지의 응답</li>\n  <li>error: 에러났을 경우 정보</li>\n</ol>\n\n<p>2의 경우엔 여러가지 정보가 있습니다. 인터넷중에 404 에러 페이지라는 오류 보신적있나요?</p>\n\n<p>이는 상태 코드중 하나입니다. 페이지가 없다는 것이고, 200의 경우 이상없이 성공 했을 경우입니다!</p>\n\n<p>여기선 Status Code라고 값을 돌려줍니다. 그리고 “Content-Type” 등등 오는데, 지금은 이값을 이용하여 따로 사용하는건 없습니다!</p>\n\n<p>이건 데이터를 받은게 아니라 이 통신 응답의 정보를 받은 겁니다!</p>\n\n<p>해당 값 출력하면 아래와 같아요</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"kt\">NSHTTPURLResponse</span><span class=\"p\">:</span> <span class=\"mh\">0x604000036ec0</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"kt\">URL</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">주소값이</span> <span class=\"n\">나와요</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"p\">{</span> <span class=\"kt\">Status</span> <span class=\"kt\">Code</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"kt\">Headers</span> <span class=\"p\">{</span>\n    <span class=\"kt\">Connection</span> <span class=\"o\">=</span>     <span class=\"p\">(</span>\n        <span class=\"s\">\"Keep-Alive\"</span>\n    <span class=\"p\">);</span>\n    <span class=\"s\">\"Content-Type\"</span> <span class=\"o\">=</span>     <span class=\"p\">(</span>\n        <span class=\"s\">\"application/json;charset=UTF-8\"</span>\n    <span class=\"p\">);</span>\n    <span class=\"kt\">Date</span> <span class=\"o\">=</span>     <span class=\"p\">(</span>\n        <span class=\"s\">\"Sun, 05 Aug 2018 11:57:54 GMT\"</span>\n    <span class=\"p\">);</span>\n    <span class=\"s\">\"Keep-Alive\"</span> <span class=\"o\">=</span>     <span class=\"p\">(</span>\n        <span class=\"s\">\"timeout=5, max=100\"</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>data == Body</p>\n\n  <p>response == Header</p>\n\n  <p>라고 생각하면 편해요</p>\n\n</blockquote>\n\n<p>2-1,2는 에러났을 땐 출력, 아니면 코드진행 이니 심플하게 패스</p>\n\n<p><br /></p>\n\n<p>이제 여기가 핵심입니다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 2-3. 받은 Data을 Any 형태로 변환</span>\n    <span class=\"k\">let</span> <span class=\"nv\">anyData</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">jsonObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n    <span class=\"c1\">// 2-4. 결과값 출력</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">anyData</span><span class=\"p\">)</span>\n    <span class=\"c1\">// + 추가 확인</span>\n    <span class=\"k\">if</span> <span class=\"n\">anyData</span> <span class=\"k\">is</span> <span class=\"kt\">Any</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"It's Any\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>do ~ try ~ catch</strong>를 짧게 설명하자면</p>\n\n<p><strong>do</strong>는 <strong>“내가 무언가 할건데, 이안에서 오류가 날수있어!!”</strong> 하는 부분입니다</p>\n\n<p>do 안에 <strong>try</strong>는 <strong>“이 코드가 오류 날수 있는부분이야!!”</strong></p>\n\n<p><strong>catch</strong>는 <strong>“오류 났을땐 이렇게 처리해줘!”</strong> 입니다.</p>\n\n<blockquote>\n  <p>try 부분에서 error가 났을 경우 에러를 던진다고 표현합니다. 던졌으면 누가 받아야겠죠?</p>\n\n  <p>그 누군가가 catch 입니다.</p>\n</blockquote>\n\n<p><br /></p>\n\n<p>위 코드에서 에러가 발생할수 있는 부분은 JSON 데이터를 형변환 하다가 오류가 날 수 있습니다.</p>\n\n<p>그래서 try를 써줘서 대응을 하게 됩니다. 그럼 위에 코드에만 추가로 적은 (+ 추가확인)부분은 저번편에서도 나왔지만</p>\n\n<p>“저 객체의 타입 is Any” 이며 결과 값은 Boolean 형입니다. 타입을 확인 하는 용도입니다! 콘솔창 결과는 아래와 같습니다</p>\n\n<p><img src=\"/assets/img/post/2018-08-05/img2.png\" alt=\"\" /></p>\n\n<p>Any 타입입니다! 전에 쓰던 이미지를 가져왔습니다.</p>\n\n<p><img src=\"/assets/img/post/2018-08-05/img3.png\" alt=\"\" /></p>\n\n<p>response라는 응답값을 가지고 통신 성공하였을시 obj로 받았는데 이게 Any 형이었죠.</p>\n\n<p>이게 위에서 anyData에 해당되는겁니다!</p>\n\n<p>그럼 이값을 돌려주고 싶다면 지난편에 썼던 <strong>escaping</strong>을 사용하면 되겠죠? 하지만 여기선 패스</p>\n\n<p><br /></p>\n\n<p>기본 통신이 이렇게 끝났습니다!</p>\n\n<p>그럼 이제 이 함수를 사용해야겠죠</p>\n\n<p><br /></p>\n\n<hr />\n\n<h1 id=\"encodable\">Encodable</h1>\n\n<p>글초반에 말했듯이  <strong><u>기본적인 Alamofire에선 Ecodable을 사용을 못했습니다.</u></strong></p>\n\n<p>여기서 <strong>포인트는</strong> 위의 함수의 바디값에 들어갈 구조체값을 <strong>Encodable을</strong> 이용하여 <strong>JSON 데이터 형식으로</strong> 바꿔주는것입니다.</p>\n\n<p>일단 구조체 부터 만들고.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LoginData</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">pass</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>인스턴스를 만들고!</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">info</span> <span class=\"o\">=</span> <span class=\"kt\">LoginData</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"s\">\"KJS\"</span><span class=\"p\">,</span> <span class=\"nv\">pass</span><span class=\"p\">:</span> <span class=\"s\">\"1234\"</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<p>이제 형변환을!!</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 1. JSON 데이터로 변환</span>\n    <span class=\"k\">let</span> <span class=\"nv\">JSONData</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n    <span class=\"c1\">// 2. 위에 만든 함수 실행</span>\n    <span class=\"nf\">requestTest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kt\">JSONData</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 3. 오류 났을 경우</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>1의 경우 <strong>JSONEncoder</strong>라는 것을 사용하게 됩니다. 이것을 <strong>try</strong> 하게 되고 실패시 <strong>catch</strong> 로 오류를 던지겠죠?</p>\n\n<p>성공적으로 JSONData 객체가 만들어졌을 경우 2를 실행하여 우리가 만든 함수를 실행하게 됩니다! 결과를 볼까요?</p>\n\n<p><strong>( 보안상 URL은 숨김 처리! )</strong></p>\n\n<p><img src=\"/assets/img/post/2018-08-05/img4.png\" alt=\"\" /></p>\n\n<p>네 오류 났습니다. 이유는 Encodable 프로토콜을 구조체에서 빼먹었기때문입니다! 강조를 위해 뺐습니다. 프로토콜을 추가해줍시다.</p>\n\n<p><br /></p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LoginData</span><span class=\"p\">:</span> <span class=\"kt\">Encodable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">pass</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>그리고 실행!</p>\n\n<p><img src=\"/assets/img/post/2018-08-05/img5.png\" alt=\"\" /></p>\n\n<p>네 오류가 없습니다!! 결과창은 보안상 숨겼습니다 ㅎㅎ 그래도 플레이 그라운드에서 빨간줄 안떴으니 JSON 형변환 무사히 마쳤단걸 볼수 있었습니다!!</p>\n\n<p>ps.</p>\n\n<p>글 쓰다보니 네트워크 기본쪽이 많이 빈약한걸 느끼네요, 리스트에 적어놓고 더 공부해야겠습니다. 이만!</p>\n\n"
      } ,
   
      {
        "title"    : "Alamofire와 Escaping",
        "category" : "",
        "tags"     : " swift, Alamofire, Escaping",
        "url"      : "/2018/07/29/swift-Alamofire%E1%84%85%E1%85%B3%E1%86%AF-%E1%84%80%E1%85%A9%E1%86%BC%E1%84%8B%E1%85%AD%E1%86%BC-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE%E1%84%85%E1%85%A9.html",
        "date"     : "July 29, 2018",
        "excerpt"  : "<p>자주 반복되는 Alamofire를 함수로 만들자. feat.Escaping\n<!--more--></p>\n\n<p>Alamofire라는 좋은 라이브러리를 쓰다가 보면 새로운 swift파일을 만들때마다 반복적으로 쓴다는 생각이 든다.</p>\n\n<p>그래서 함수로 만들면 좋겠다! 라고 생각했다가, 졸업작품 당시 포기했다.</p>\n\n<p>포기한 과정을 보기전에 오늘의 구조 먼저, 첨부</p>\n\n<p><img src=\"/assets/img/po...",
        "content"  : "<p>자주 반복되는 Alamofire를 함수로 만들자. feat.Escaping\n<!--more--></p>\n\n<p>Alamofire라는 좋은 라이브러리를 쓰다가 보면 새로운 swift파일을 만들때마다 반복적으로 쓴다는 생각이 든다.</p>\n\n<p>그래서 함수로 만들면 좋겠다! 라고 생각했다가, 졸업작품 당시 포기했다.</p>\n\n<p>포기한 과정을 보기전에 오늘의 구조 먼저, 첨부</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img1.png\" alt=\"\" /></p>\n\n<p>스토리보드도 심플, 코드도 심플, 화면도 심플한 상태이다</p>\n\n<p><br /></p>\n\n<h3 id=\"코드-구성\">코드 구성</h3>\n\n<ol>\n  <li>Alamofire를 사용하기 위해 import</li>\n  <li>사용될 함수</li>\n  <li>url을 선언과 초기화</li>\n  <li>통신 성공시 obj 라는 이름의 Any타입을 가진 데이터를 가져오고 출력\n    <ul>\n      <li>출력 값: 오른쪽 하단</li>\n    </ul>\n  </li>\n  <li>Any 타입 데이터를 딕셔너리로 캐스팅</li>\n  <li>해당 딕셔너리중 ‘text’라는 키의 데이터를 String형으로 캐스팅\n    <ul>\n      <li>값: “Server Text”라는 문자열</li>\n    </ul>\n  </li>\n  <li>Label에 적용</li>\n</ol>\n\n<p>저번편에 간단하게 설명을 참고하면 아주 간단한 코드.</p>\n\n<p><a href=\"https://jiseobkim.github.io/2018/07/21/swift-Alamofire와-Codable.html\">참고: Alamofire와 Codable</a></p>\n\n<p>그런데, 만약 다른 통신을 한다고 하면 2번 부분에서 굉장히 중복이 많이 일어난다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 요청</span>\n<span class=\"k\">let</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">Alamofire</span><span class=\"o\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"c1\">// 응답</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">responseJSON</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n<span class=\"c1\">// Switch문 사용</span>\n<span class=\"k\">switch</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"p\">{</span>                      \n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">obj</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">e</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>위의 코드를 보자,</p>\n\n<ol>\n  <li>요청</li>\n  <li>응답</li>\n  <li>분기문</li>\n</ol>\n\n<p>이것들은 분명 반복이 된다.</p>\n\n<p>앱정보, 사용자 정보, 기타등등  통신할때마다 똑같은 코드를 쳐야한다. 그래서 나는 졸업작품 당시 간소화 시키고 싶었다.</p>\n\n<p>내가 필요한건 <strong>nsDic</strong> 였었다. 그래서 아래와 같은 코드를 사용했었다.</p>\n\n<p>(<strong>주의: 안되는 코드임</strong>)</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img2.png\" alt=\"\" /></p>\n\n<p>1번을 보면 어떤 클래스라도 접근할수 있는 전역함수가 있다.</p>\n\n<p>여기서 중요한건 return 값이 존재하며 타입은 <strong>NSDictionary?</strong> 이다. 위에 쓴바와 같이 원하던 nsDic의 타입이다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1-1. 필요한 nsDic이 될값</span>\n<span class=\"k\">var</span> <span class=\"nv\">returnValue</span><span class=\"p\">:</span> <span class=\"kt\">NSDictionary</span><span class=\"p\">?</span>\n</code></pre></div></div>\n\n<p>돌려줄 값의 타입을 옵셔널로 지정해주고</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 5. returnValue에 지정</span>\n<span class=\"n\">returnValue</span> <span class=\"o\">=</span> <span class=\"n\">nsDic</span>\n</code></pre></div></div>\n\n<p>통신을 통해 받아서 캐스팅한 nsDic 값을 returnValue의 값으로 넣어주고</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 6. 돌려주기</span>\n<span class=\"k\">return</span> <span class=\"n\">returnValue</span>\n</code></pre></div></div>\n\n<p>6번에서 return 해준다!</p>\n\n<p><br /></p>\n\n<p>이게 과연 될까? <strong>결론은 안된다</strong></p>\n\n<p>위 이미지 하단의 콘솔창을 보면 <strong>nil</strong> 임을 알 수 있다.</p>\n\n<p><br /></p>\n\n<h3 id=\"왜-nil일까\">왜 nil일까?</h3>\n\n<p>그 당시 참 멘붕이었는데, 정답은 간단하다. 통신은 얼마나 걸릴지 모른다. 따라서,<strong>비동기</strong>로 진행되야한다.</p>\n\n<p><br /></p>\n\n<h3 id=\"만약-비동기가-아니라면\">만약 비동기가 아니라면??</h3>\n\n<p>앱자체가 멈춰 버릴것이다. 왜냐면 통신이 될때까지 기다렸다가 순차적으로 진행되어야 하기 때문이다.</p>\n\n<p>시간이 좀 지연된다면 사용자는 앱이 죽었나? 라고 생각 할것이다.</p>\n\n<blockquote>\n  <p><strong>너는 통신하고 끝나면 할거 하고와 나는 하던일 계속할게</strong> 이런 느낌이랄까?</p>\n</blockquote>\n\n<p>그래서 <strong>nil</strong>이 발생한것이다.</p>\n\n<p>사용자가 느끼기엔 충분히 빠른시간안에 표현되었지만 아래코드가 진행될때쯤이면</p>\n\n<p>return은 이미 끝난 후이다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 5. returnValue에 지정</span>\n<span class=\"n\">returnValue</span> <span class=\"o\">=</span> <span class=\"n\">nsDic</span> <span class=\"c1\">// 이때, 이미 return은 진행된 상태. 즉, 넣어봤자 소용이 없다.</span>\n</code></pre></div></div>\n\n<p>그렇다면 nsDic을 return 값으로 정해주는게 아니라 nsDic을 return 해준다면?</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img3.png\" alt=\"\" /></p>\n\n<p>안된다. 다른 방식이 필요하다.</p>\n\n<p><br /></p>\n\n<h2 id=\"escaping\">Escaping</h2>\n\n<p>처음엔 이 문법에 대해 도무지 이해가 안갔다. 졸업작품할당시에도 찾았었지만, 시간이 급해서 조금 시도해보다 포기했다.</p>\n\n<p>하지만, 알면 정말 도움이 많이 된다. 혹여나 읽는 분이 계시다면 이리 저리 시도해서 꼭 성공하시길.</p>\n\n<p>일단 코드를 보자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img4.png\" alt=\"\" /></p>\n\n<p>특별히 0번이라 썼다. 책으로만 공부했다면, 정말 정말 생소할 모습일것이다.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">handler</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">NSDictionary</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>혹시, 이런 모습이면 조금이나마 익숙하다. 스위프트는 함수형 언어라고도 가능한데, 그 이유는 스위프트에서 함수는 일급함수에 속하기 때문이다. 여러가지 조건이 있지만 복잡하니, 나중에 더 알아보는걸로 하고. 여기서 관련된 조건들만 말해보면</p>\n\n<ol>\n  <li>인자 값으로 함수를 전달할 수 있다.</li>\n  <li>반환 값으로 함수를 전달할 수 있다.</li>\n</ol>\n\n<p>두가지 정도? 저기서 <strong>handler</strong> 라는 인자는 타입이 <strong>NSDictionary</strong>만 받는게 아니라 <strong>return</strong>이 있다. 이건 누가봐도 함수다. 이런식으로 인자값으로 함수를 받았다. 반환값으로도 가능하고! 일급함수란 표현도 중요하지만 그 내용인 함수를 받았다는게 중요하다. 그렇다면 <strong><code class=\"highlighter-rouge\">@escaping</code></strong> 이 의미하는것은 무엇일까</p>\n\n<blockquote>\n  <p>handler 라는 표현은 보통 ‘다루다’로 사용되고 stackOverFlow 같은 곳에서 보면</p>\n\n  <p>관련 자료에서 종종 인자값에 <strong><code class=\"highlighter-rouge\">completionHandler</code></strong> , <strong><code class=\"highlighter-rouge\">completion</code></strong>라는 단어를 많이 쓰는데,</p>\n\n  <p>이는 완료후 처리할 작업, 완료후 다룰것 이라고 생각하면 좀더 편했던것 같다.</p>\n</blockquote>\n\n<p><br /></p>\n\n<h3 id=\"escaping-1\">@escaping</h3>\n\n<p>이름부터가 탈출이다. 나는 이렇게 이해하고 있다. 현재 함수로부터 도망쳐 나온다. 하지만, 그때 NSDictionary를 가지고 도망친다. 이게 포인트다, 다르지만 비슷하게 생각할 수 있는건, <strong>NSDictionary</strong> 값을 리턴해준다고도 볼 수 있다.</p>\n\n<p>쓰는 방식은 이미 많이들 접했을 것이다. 비슷한 문법을 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img5.png\" alt=\"\" /></p>\n\n<p>1번의 경우는 애니메이션 효과를 사용할때 자주 사용하는 문법이다.</p>\n\n<p>2번의 경우 포스팅에 자주 나온 Alamofire에서 응답 값을 받았을때 처리하는 부분에서 나온것이다.</p>\n\n<p>저런 문법을 만들려면 필요한것은 @escaping을 쓰는 것이라는 결론이 나왔다!</p>\n\n<p>각각의 차이점을 보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1. Animation ( 인자: o , 반환: x)</span>\n<span class=\"p\">((</span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>\n<span class=\"c1\">// 2. Alamofire Response ( 인자: o , 반환: x)</span>\n<span class=\"p\">(</span><span class=\"kt\">DataResponse</span><span class=\"o\">&lt;</span><span class=\"kt\">Any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span>\n<span class=\"c1\">// 3. Use Escaping ( 인자: o , 반환: x)</span>\n<span class=\"p\">(</span><span class=\"kt\">NSDictionary</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<p>쉬운 순서대로 정리했다.  공통점은 반환 값이 전부 없다는것.</p>\n\n<h3 id=\"uiview-animation\">UIView Animation</h3>\n\n<p>1번의 경우 애니메이션 사용할때 생각을 해보자,</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">UIView</span><span class=\"o\">.</span><span class=\"nf\">animate</span><span class=\"p\">(</span><span class=\"nv\">withDuration</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">animations</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">})</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"success\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>자신이 정한 시간(여기선 2초)동안 <strong>animations</strong> 의 내용을 수행하게 된다, 그리고 그 작업이 끝난뒤에 할일은 <strong>completion내용이</strong> 된다. 저기서 뒤에 물음표가 붙어있는데, <strong>nil이</strong> 될수 있다는 것이다. 즉 효과만 주고 그뒤에 다른 작업은 안해도 된다는것! 그렇기에 <strong>animation에</strong> 더 들어가보면 default값으로 <strong>nil이</strong> 들어가있다.</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img6.png\" alt=\"\" /></p>\n\n<p><br /></p>\n\n<h3 id=\"alamofire-response\">Alamofire Response</h3>\n\n<p>다시 본론으로 들어가서 2번째 경우, 데이터 타입이 DataResponse라는 것이고 뒤에 꺽쇠로 된건 <strong>Generic</strong>을 의미한다.</p>\n\n<p>Generic도 나중에 다루기로하고, 함수나 클래스 구조체 등등 하나 선언해서 여러 타입(String, Int 등등)을 대응 한다 생각하고 넘어가자.</p>\n\n<p>여기서 중요한건, 통신 후 <strong>DataResponse라는 타입을 가진 데이터를 받아와서 내가 사용</strong>했다는 것이다.</p>\n\n<p>이게 바로 우리가 필요한것이다. <strong>nsDictionary로 된 데이터를 받아와서 표현</strong>하고 싶은 것이다.</p>\n\n<p><br /></p>\n\n<h3 id=\"escaping-2\">Escaping</h3>\n\n<p>사용법은 위의 Alamofire보다 훨씬 간단하다.</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img7.png\" alt=\"\" /></p>\n\n<p>2-2 부분이 전부이다. 받아온 <strong>NSDictionary</strong> 타입을 가진 데이터 이름을 <strong><code class=\"highlighter-rouge\">nsDic</code></strong> 이라 이름을 붙여주고 정말 딕셔너리 사용하듯 사용하면 끝이다.</p>\n\n<p>그 아래에 쓴것은 위에서 실패했던 방식인 NSDictionary를 return 해주는 방식의 함수를 다시 사용 한것이다.</p>\n\n<p>근데 아래 콘솔창을 보면 당연하지만 재미난 출력물이 보인다.</p>\n\n<p>사용한건 <strong>escaping</strong> 방식이 먼저지만, 출력된건  <strong>return</strong> 방식을 사용 한것이 먼저이다. 이제는 당연하다고 생각이 들것이다.</p>\n\n<p>네트워크가 아무리 빠르다 한들 통신보다 빠를리가… 그리고 비동기방식이기 때문에 가능한일!</p>\n\n<p><br /></p>\n\n<h2 id=\"번외-공통으로-사용하는건-좋다-그렇지만-통신-실패시엔-다르게-대응하고-싶은데-할-경우\">번외: 공통으로 사용하는건 좋다! 그렇지만, 통신 실패시엔 다르게 대응하고 싶은데? 할 경우</h2>\n\n<p>위에 잠시 언급한 일급 함수의 특징을 사용하면 간단하게 해결! 내가 하고 싶은 함수를 만들고, 실패시에 작동하게 하면 그만</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">whenIfFailed</span><span class=\"p\">:</span> <span class=\"p\">(),</span> <span class=\"nv\">handler</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">NSDictionary</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">Alamofire</span><span class=\"o\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">responseJSON</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">switch</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">obj</span><span class=\"p\">):</span>\n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">nsDic</span> <span class=\"o\">=</span> <span class=\"n\">obj</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n            <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">nsDic</span><span class=\"p\">)</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">e</span><span class=\"p\">):</span>\n            <span class=\"c1\">// 통신 실패시</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n            <span class=\"n\">whenIfFailed</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>위와 같이 적어 주자. 하나가 추가 되었다. <strong><code class=\"highlighter-rouge\">whenIfFailed</code></strong>  라는 함수 타입의 인자이다. 그리고 주석 부분에 보면 통신 실패시 작동하게 되어 있다.</p>\n\n<p>하지만, 항상 실패에 대응 할필요가 없을 수도 있다. 위 함수안에 동일하게 대응되게 짜둔다면 굳이 그럴 필요 없다. 그러나! 필요한 경우도 있다! 그렇다면 어떻하면 좋을까?  <strong><code class=\"highlighter-rouge\">whenIfFailed</code></strong> 를 옵셔널로 해주고 기본값을 <strong>nil</strong>로 해주자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">whenIfFailed</span><span class=\"p\">:</span> <span class=\"p\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">handler</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">NSDictionary</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">Alamofire</span><span class=\"o\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">responseJSON</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">switch</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">obj</span><span class=\"p\">):</span>\n            \n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">nsDic</span> <span class=\"o\">=</span> <span class=\"n\">obj</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n            <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">nsDic</span><span class=\"p\">)</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">e</span><span class=\"p\">):</span>\n            \n            <span class=\"c1\">// 통신 실패시</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n            <span class=\"nf\">whenIfFailed</span><span class=\"p\">?()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong><code class=\"highlighter-rouge\">whenIfFailed</code></strong> 부분이 좀 달라졌다. <strong>(() -&gt; Void)</strong> 는 같은것이다. 하지만 뒤에 물음표가 붙어 있고, 기본 값이 <strong>nil</strong> 로 되어있다.</p>\n\n<p>즉, 필요 없으면 안써두 된다는 것이다. 그 결과 아래쪽에 보면 <strong><code class=\"highlighter-rouge\">whenIfFailed</code></strong> 에 물음표가 붙어있고, 이는 nil이면 자동으로 실행 않고 지나가게 된다!</p>\n\n<p>사용은 아래와 같다</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">ifFailed</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"실패했어요\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 함수 사용</span>\n<span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nv\">whenIfFailed</span><span class=\"p\">:</span> <span class=\"n\">ifFailed</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">nsDic</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">text</span> <span class=\"o\">=</span> <span class=\"n\">nsDic</span><span class=\"p\">[</span><span class=\"s\">\"text\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"(Escaping 사용)text: </span><span class=\"se\">\\(</span><span class=\"n\">text</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>그런데, 나는 각각에 다르게 반응할거야!! 라고 하면, 각 함수 만드는것도 일이다. 그럴 경우엔 이렇게 해보는건 어떨까</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">whenIfFailed</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">,</span> <span class=\"nv\">handler</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">NSDictionary</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">Alamofire</span><span class=\"o\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">responseJSON</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">switch</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">obj</span><span class=\"p\">):</span>\n            \n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">nsDic</span> <span class=\"o\">=</span> <span class=\"n\">obj</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n            <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">nsDic</span><span class=\"p\">)</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">e</span><span class=\"p\">):</span>\n            \n            <span class=\"c1\">// 통신 실패시</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>\n            <span class=\"nf\">whenIfFailed</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>여기서도 <strong>escaping</strong>을 사용했다. 그럼 사용 코드에선?</p>\n\n<p><img src=\"/assets/img/post/2018-07-29/img8.png\" alt=\"\" /></p>\n\n<p>마치 UIView Animation 같다.</p>\n\n<p>값을 채워 넣으면 이렇게</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEscaping</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nv\">whenIfFailed</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"실패했어요\"</span><span class=\"p\">)</span>\n<span class=\"p\">})</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">nsDic</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">text</span> <span class=\"o\">=</span> <span class=\"n\">nsDic</span><span class=\"p\">[</span><span class=\"s\">\"text\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"(Escaping 사용)text: </span><span class=\"se\">\\(</span><span class=\"n\">text</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>escaping은  알면 알수록 유용하게 쓰이는 것 같다. 좀 더 활용할 곳을 찾아봐야겠다.</p>\n\n"
      } ,
   
      {
        "title"    : "Alamofire와 Codable",
        "category" : "",
        "tags"     : " swift, Alamofire, Codable",
        "url"      : "/2018/07/21/swift-Alamofire%EC%99%80-Codable.html",
        "date"     : "July 21, 2018",
        "excerpt"  : "<p>통신 위한 Alamofire와 그 효율성을 높혀주는 Codable\n<!--more--></p>\n\n<p>요즘 시대엔 앱을 사용하면서 통신은 필수인듯 하다. \n여러 기기간의 동기화, 결제, 등등 통신을 통해 데이터를 다루는 분야가 훨씬 많다.</p>\n\n<p>필자도 맨처음 시작했던 Swift 스터디에서 로컬 앱을 만들었으나 통신의 필요성을 느껴서 졸업 작품때 통신을 하는 앱을 시도 했었으며, 취업에 많은 도움이 되었던 것 같다.</p>\n\n...",
        "content"  : "<p>통신 위한 Alamofire와 그 효율성을 높혀주는 Codable\n<!--more--></p>\n\n<p>요즘 시대엔 앱을 사용하면서 통신은 필수인듯 하다. \n여러 기기간의 동기화, 결제, 등등 통신을 통해 데이터를 다루는 분야가 훨씬 많다.</p>\n\n<p>필자도 맨처음 시작했던 Swift 스터디에서 로컬 앱을 만들었으나 통신의 필요성을 느껴서 졸업 작품때 통신을 하는 앱을 시도 했었으며, 취업에 많은 도움이 되었던 것 같다.</p>\n\n<p>여담으로 아무것도 모르는 상태서 html, php, MariaDB, 포트포워딩 등등 배우려니 너무 힘들었던 기억이 있다. 서버는 집에 있던 NAS를 조금이나마 돈값하게 이용했었다.</p>\n\n<p>그때 Alamofire 라는 훌륭한 라이브러리를 알게 되었다.</p>\n\n<p>CocoaPod을 이용해서 설치했으며, 설치법은 시간이 된다면 나중에 다뤄보기로…..</p>\n\n<p>로컬 서버를 이용한 응답값을 먼저 보자.\n(응답값)\n<img src=\"/assets/img/post/2018-07-21/img1.png\" alt=\"\" />\nJSON 형태이며, 값은 간단하게 3개가 온다.</p>\n\n<ol>\n  <li>hp (String)</li>\n  <li>name (String)</li>\n  <li>age (Int)</li>\n</ol>\n\n<p>간단하지만, 이것을 앱에서 받으려면 처음 사용자는 엄청난 혼란이 온다.\n내가 그랬다.</p>\n\n<p>Alamofire만 있다면 아주아주 간단하게 할 수 있다. 라이브러리를 안쓰고 통신도 가능하지만, 라이브러리를 쓴다면 편해지는건 사실! 아직 사용을 안해봤다면 한번쯤 써보게 된다면 아~ 이렇게 쓰는거군! 하게 될것이다.</p>\n\n<ul>\n  <li>주의: Alamofire를 설치했다는 가정하부터 진행</li>\n</ul>\n\n<p>(앱화면)\n<img src=\"/assets/img/post/2018-07-21/img2.png\" alt=\"\" />\n처음 이미지에 보았던 전화번호, 이름, 나이를 서버로부터 받아서 위의 이미지에 알맞게 데이터를 넣어줄 것이다.</p>\n\n<p>순서는 다음과 같다</p>\n<ol>\n  <li>통신을 통해 값 받아오기</li>\n  <li>가져온 값에서 필요한값 빼내오기</li>\n  <li>빼내온값 표출하기</li>\n</ol>\n\n<p>** * 주의사항 (아래서 추가 설명) **</p>\n<ol>\n  <li>Alamofire 통신시 <strong>비동기</strong>로 진행됨을 잊으면 안된다.</li>\n  <li>UI 관련 작업은 메인쓰레드에서만 가능하다, Alamofire 통신하여 UI 관련 작업이 제대로 안된다면 DispatchQueue.main.async를 이용해서 <strong>메인 쓰레드에서 비동기로</strong> 진행 시켜보자.</li>\n</ol>\n\n<p><br /></p>\n\n<h2 id=\"1-통신을-통해-값-받아오기\">1. 통신을 통해 값 받아오기</h2>\n<p>우선 데이터를 받아오자, 코드는 아주 간단하다. 사진으로 첨부!</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img3.png\" alt=\"\" /></p>\n\n<p>주석에 따라 설명을 진행!</p>\n<h3 id=\"1-alamofire-import하기\">1. Alamofire import하기</h3>\n<p>가장 중요한 설정인 Alamofire를 import 해줘야한다! 잊지말기</p>\n\n<h3 id=\"2-url-정의\">2. URL 정의</h3>\n<p>이건 별다른 설명이 필요하지 않을듯 싶다. 통신을 하기위해선 누구에게 요청을 할것인가는 당연히 필요하기에 URL을 정의해야한다.</p>\n\n<h3 id=\"3-전송request\">3. 전송(request)</h3>\n<p>비록 한줄이지만 이번에 글의 가장 중요한 부분이다. Alamofire 라이브러리를 이용해주면 저렇게 단 한줄에 요청(request)을 할 수있다. 여기서 요청이란 주소창에다가 해당 URL을 입력했다. 정도로 생각하면 된다.</p>\n\n<p>(RESTFull API의 경우 추후 별도 포스팅 예정)</p>\n\n<h3 id=\"4-응답response-처리\">4. 응답(response) 처리</h3>\n<p>응답이란 3에서 말한 URL을 입력했다가 전송(request)이라면, 입력했을때 반응(response)한것이 응답값이다. \n<img src=\"/assets/img/post/2018-07-21/img1.png\" alt=\"\" /></p>\n<blockquote>\n  <p>이해가 잘안된다면, “내가 주소창에 URL을 입력(요청)했더니 위와 같은 화면(응답)이 나왔다” 정도로?? 생각하자.</p>\n</blockquote>\n\n<p><strong>그렇담 여기서 doNetwork 뒤의 responseJSON이란 ??</strong></p>\n\n<p>위의 이미지는 JSON 형태로 응답을 하고 있다. 그렇기에 responseJSON을 써주는 것이다.</p>\n\n<p>바로뒤에 중괄호가 있다. 이건 클로져 구문이다. 일반적인 함수에는 소괄호’()’안에 인자값들이 있다. ‘<strong>in</strong>’ 앞에 부분이 인자값이다. 다시말해 응답한 값은 response라는 변수에 담아주는 것이다. ‘<strong>in</strong>‘이후에 나오는 것은 일반적인 함수에서  중괄호’{}’ 에 해당되는 부분이다.   <em>**</em></p>\n\n<blockquote>\n  <p>이 부분은 엄밀히 따지면 response  데이터가 저 JSON만을 의미하는게 아니다.</p>\n\n  <p>아 그런거구나 정도만 일단 생각하고, 아래서 추가 설명</p>\n</blockquote>\n\n<h3 id=\"5-결과에-따른-switch문\">5. 결과에 따른 switch문</h3>\n<p>명확히 얘기하면 <strong>response</strong>는 JSON 문구를 의미하는게 아니다. 우리가 그다음 판별 해야할것은 내가 요청한 통신이 성공 or 실패를 먼저 따져야한다. 실패의 경우 여러가지가 있다, 정확하지않은 URL, 인터넷 끊김 등등?</p>\n\n<p>성공에 의미는 위의 JSON 데이터를 성공적으로 가져왔다는 것이다. 즉, 우리가 사용할 수가 있다는 것이다. \n쓸 수 있는 값을 못가져 온경우를 모두 실패로 생각하자!</p>\n\n<p>response.result 에 대해 좀 더 깊숙히 들어가보면 아래와 같다.</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img4.png\" alt=\"\" /></p>\n\n<p>우선 타입은 enum이다, 그리고 그 케이스는 2가지다</p>\n\n<ol>\n  <li><strong>success</strong></li>\n  <li><strong>failure</strong></li>\n</ol>\n\n<p>그래서 위에서 switch문을 썼을때 2가지만 써도 <strong>“default일 경우에 대비하세요”</strong>라는 경고를 안띄운다. <br /></p>\n\n<ol>\n  <li><strong>isSuccess는 성공 여부</strong></li>\n  <li><strong>isFailur는 실패 여부</strong></li>\n  <li><strong>value는 받아온 값</strong></li>\n  <li><strong>error는 Error 타입</strong></li>\n</ol>\n\n<p>이 둘중 한가지는  nil이기 때문에 옵셔널으로 감싸져있다.</p>\n\n<p>필요할때 알맞게 사용하도록 하자. 여기서 우리가 필요한건 success의 value이다.</p>\n\n<h3 id=\"5-1-통신-성공\">5-1. 통신 성공</h3>\n<p>타입을 먼저보자.\n<img src=\"/assets/img/post/2018-07-21/img5.png\" alt=\"\" />\nAny 형태이다. 왜 Any일진 생각해보면 간단하다.</p>\n\n<p>그럼 실행을 해보자\n<img src=\"/assets/img/post/2018-07-21/img6.png\" alt=\"\" />\n콘솔창에 보면 성공적으로 가져왔다. 위에서 말했듯이 이 값의 타입은 Any이다. NSDictionary로 캐스팅을 먼저해야하자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img7.png\" alt=\"\" />\nNSDictionary 타입으로 캐스팅 후 for문으로 출력해주었다. 아주 잘나왔다. 끝이 보인다.</p>\n\n<p>각 데이터를 빼오자.\n<img src=\"/assets/img/post/2018-07-21/img8.png\" alt=\"\" />\n각각 전화번호/이름/나이 데이터를 비강제 해제 (unwrapping) 해주었다.</p>\n\n<p>어려운말이다. 써보고 싶었다. 그치만 하도 안썼더니 나도 어색하다. 쉽게 말해 if문을 써서 안전빵으로 데이터를 가져오고 설정해줬다.</p>\n\n<p>다운캐스팅 할때 <code class=\"highlighter-rouge\">as?</code>을 써줌으로써 실패시 nil로 바뀌게 될것이고, 이 경우엔 swift에선 해당 라인을 실행 안한다고한다! 훌륭해.</p>\n\n<p>우선, 통신 하기전 화면을 보자\n<img src=\"/assets/img/post/2018-07-21/img9.png\" alt=\"\" />\n못생겼다.</p>\n\n<p>그럼 통신 후!\n<img src=\"/assets/img/post/2018-07-21/img10.png\" alt=\"\" />\n번호/이름은 잘들어갔다. 그치만 나이는 적용이 안되었다.</p>\n\n<p>해당부분 값을 출력해보자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img11.png\" alt=\"\" />\n새로 배운 기술이다. 브레이크 포인트에 lldb(Low Level Debugger) 명령어를 입력해주면, 해당 부분 가서 알아서 해당 명령어를 실행해준다. 해당 명령어 입력부분 아래에 옵션 체크를 해주면 원래는 break 걸면 해당 라인에서 멈춰야하지만 명령어 실행 후 자동으로 다시 진행한다.</p>\n\n<p>아직 print 찍는게 편하지만 자주 쓰는곳에 걸어두면 편하다. disable 했다가 On/Off해주기만 하면 되니깐!</p>\n\n<p>그게 중요한게 아니고, 콘솔창에 nil이 찍혔다.</p>\n\n<p>캐스팅이 실패한것이다. response 사진을 다시 보자\n<img src=\"/assets/img/post/2018-07-21/img1.png\" alt=\"\" />\n자세히보면 휴대폰 번호에는 쌍따옴표(“ “)가 있지만, 나이 부분엔 없다. 문자가 아니라 숫자이다.\n옵셔널 강제해제 였으면 앱이 크래쉬 났을 것이다.</p>\n\n<p>당연한거아니야? 할수 있겠지만, 소소하게 실수할때가 있었었다…. 심지어 스펠링 틀릴경우도 빈번하게 있다!\n하지만 Codable를 알게된 후론 세상 편해졌다. 궁금해지지 않는가 Codable? 나만 궁금한가.</p>\n\n<p>이유는 알았으니 일단 고치고\n<img src=\"/assets/img/post/2018-07-21/img12.png\" alt=\"\" /></p>\n\n<p>실행!\n<img src=\"/assets/img/post/2018-07-21/img13.png\" alt=\"\" /></p>\n\n<p>완성!!</p>\n\n<p>데이터가 아무리 많아도 이젠 할 수 있다.\n<img src=\"/assets/img/post/2018-07-21/img14.png\" alt=\"\" />\n데이터가 훨~씬 많다. 이것도 해보자.</p>\n\n<p>우선 UI부터 만들고,\n<img src=\"/assets/img/post/2018-07-21/img15.png\" alt=\"\" /></p>\n\n<p>슬슬 재앙이 일어날 것 같은 예감이 드는가?</p>\n\n<p>코드를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img16.png\" alt=\"\" /></p>\n\n<p>위에서 했던 방식대로 진행하면 이렇다. 하는건 쉽다. 하는 것만 쉽다. 굉장히 반복적이다. 별로다.</p>\n\n<p>데이터는 잘왔나?\n<img src=\"/assets/img/post/2018-07-21/img17.png\" alt=\"\" /></p>\n\n<p>잘왔다. 그런데 힘들다. 예시로 쓰는것도 힘들었다. 이 방식은 쓰지말자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img18.png\" alt=\"\" /></p>\n\n<p>하지만, 실제 업무상 데이터가 많이 올때도 있다. 그러므로 우린 방법을 찾아야한다.</p>\n\n<p>이때 아주 훌륭한 Codable을 쓰면 된다.</p>\n\n<h1 id=\"codable\">Codable</h1>\n<p>Codable은 Swift4에서 추가된것이다. 이것 사용하기전엔 위에처럼 비효율적이지만 어쩔수없이 사용을 했을것이다!(추측), 이것을 알게된건 let’s Swift라는 컨퍼런스? 에서였다. 카카오톡, 라인, 토스 등등 개발자들이 짧게 20~30분씩 강연들을 했었던 것이었고, 난 학생이었기 때문에 반값? 수준으로 갔었던것 같다. 이때 옆자리분이 여기 슬랙따로 있나요? 했을때, 당시 나는 슬랙을 한번도 안써봐서 못알아 들었던 기억이 난다. 또한, 토스트는 맛있었고, 옷도 받고, 뱃지도 받았다, 스위프트 뱃지는 내 가방에 달려있다.</p>\n\n<p>마지막 강연에는 아주아주 스페셜한분이 강연을 했었는데 보안상? 비밀이었기 때문에 나도 비밀을 유지하겠다.</p>\n\n<p>아무튼 그때, 첫번째 강연하신분께서 Swift4의 새 기능에 대해서 소개를 하셨고, 그때 졸작으로 한창 통신에 관해서 시작하며 삽질하던 나에게 단비같은 Codable을 소개해주셨다. 덕분에 아주 잘쓰고 있다.</p>\n\n<p>하지만, 나도 기능의 전체를 사용하진 못하고 있다. 간단하게 말하자면 JSON 데이터를 미리 생성해둔 Struct 혹은 Class의 인스턴스로 만들어주며, 심지어 데이터를 이름에 맞게 넣어준다! 아주 훌륭하다. 살펴보자</p>\n\n<p>순서는 다음과 같다</p>\n<ol>\n  <li><strong>Class or Struct 생성</strong></li>\n  <li><strong>response받은 데이터를 JSON으로 변경</strong></li>\n  <li><strong>Codable 이용하여 인스턴스 생성</strong></li>\n</ol>\n\n<blockquote>\n  <ul>\n    <li>인스턴스란?\nClass와 Struct는 실질적으로 사용하는 데이터가 아니다. 구조를 알려주는 것이다. 그래서 설계도, 주틀 등등으로 설명을 해준다.\n설계도로 설명해보자면, 가정집 설계도(클래스or구조체)가 있다 가정하자. 화장실, 방이 그려져있다.\n내가 이 설계도의 화장실에 들어가는 행위는 불가능하다. 왜냐? 이건 설계도지 진짜 무엇이 아니기 때문이다.\n내가 이 설계도로 A 아파트를 지었다. 이 A아파트가 인스턴스다! 이 A아파트에 내가 화장실을 들어가거나 방에 들어가는 행위 모두 가능하다!  이것이 인스턴스.</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"1-class-or-struct-생성\">1. Class or Struct 생성</h3>\n<p><img src=\"/assets/img/post/2018-07-21/img19.png\" alt=\"\" /></p>\n\n<p>구조체를 사용하기로 했다 참조에 의한 사용은 필요없으니깐! (다른 이유도 더찾아봐야하는데..)</p>\n\n<p>일반적인것들과 차이는 없지만, 하나 있다면 Codable!</p>\n\n<p>Codable을 좀더 들어가보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img20.png\" alt=\"\" /></p>\n\n<p>조금 생소한 <strong>typealias</strong>가 나타났다. 알기만하고 아직 적절한곳을 못찾아서 필자도 써본적이 없지만, 타입의 이름을 다르게 만들어주는것이다. 사람 이름으로 치면 개명정도? 다만 본명, 개명 둘다 사용가능하다.\n위의 사진을 보면 Encodable 과 Decodable을 묶은 것의 명칭을 Codable이라고 해준다는 의미다. 이렇게보니\n쓸만한 사용법을 찾은것 같다. 두가지 프로토콜을 합쳐주다니! 더 확인 해봐야겠다.</p>\n\n<p>그렇담 새로나온 <strong>Decodable</strong>과 <strong>Encodable</strong>이란?</p>\n\n<p>두가지 기능이 반대이니 한개만 보자 우리가 사용할 <strong>Decodable</strong>\n<img src=\"/assets/img/post/2018-07-21/img21.png\" alt=\"\" /></p>\n\n<p>설명이 아주 친절하다</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>디코딩해서 새로운 인스턴스를 생성해준다!\n디코더가 읽기를 실패하거나, 데이터가 손상 혹은 유효하지 않을경우 에러를 던진다.\n</code></pre></div></div>\n<p>알아서 에러 처리도 해준다 좋다!</p>\n\n<h3 id=\"response받은-데이터를-json으로-변경\">response받은 데이터를 JSON으로 변경</h3>\n<p>처음에 사용할때 여기서 삽질을 많이 했다. 사진을 보자.\n<img src=\"/assets/img/post/2018-07-21/img22.png\" alt=\"\" />\ndo,catch 구문을 써서 오류에 대비를 해주자 왜냐? 위에 말했듯이 Decodable은 실패시 에러를 던져주기 때문에!</p>\n\n<p>Swift는 읽기도 참 좋다! 회색 채워야할 부분을 보자</p>\n<blockquote>\n  <p>JSONDecoder()를 사용할거고, 데이터(from 인자)를 특정 타입(type 인자)으로 디코딩한다</p>\n</blockquote>\n\n<p>읽기 쉽다. 여기서 타입은 아까 만든 <strong>Class or Struct</strong>정보가 들어가게 되고, data는 통신해서 받은 데이터다!</p>\n\n<p>채워보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">getInstanceData</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">UserData</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>이렇게 하면 될까?</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img23.png\" alt=\"\" /></p>\n\n<p>안된다. 타입이 안맞다고 한다. 왜냐? 아까도 확인 했지만 obj는 타입이 Any 이기 때문이다.</p>\n\n<p>그렇다면 Data 타입으로 바꿔주면될까? 아니다,</p>\n\n<p>try 뒤에 써있듯 JSON을 디코더 해야하므로 우리는 JSON 데이터가 필요하다</p>\n\n<p>obj를 JSON으로 변경해보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"nv\">withJSONObject</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">prettyPrinted</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>간단하다! 그렇다면 실제로 사용하고 출력까지 해보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img24.png\" alt=\"\" /></p>\n\n<p>실질적으로 do, catch 부분 빼면 단 2줄만에 JSON 데이터의 정보를 가진 인스턴스를 얻어냈다. 비강제해제 같은 작업들이 전혀 필요없었다. 그럼 다음과 같은 경우 궁금할수가 있다.</p>\n\n<ol>\n  <li><strong>변수 이름은 같지만 타입이 틀렸을 경우</strong></li>\n  <li><strong>데이터가 비어있을 경우</strong></li>\n  <li><strong>옵셔널이 아닐경우?</strong></li>\n</ol>\n\n<h3 id=\"변수-이름-같지만-타입이-틀렸을-경우\">변수 이름 같지만 타입이 틀렸을 경우</h3>\n\n<p><img src=\"/assets/img/post/2018-07-21/img25.png\" alt=\"\" /></p>\n\n<p>콘솔창에보면 타입이 맞지 않아 읽어 올 수 없다고 한다</p>\n\n<h3 id=\"데이터가-비어있을-경우\">데이터가 비어있을 경우</h3>\n\n<p><img src=\"/assets/img/post/2018-07-21/img26.png\" alt=\"\" /></p>\n\n<p>구조체에 test라는 변수를 추가했다. 하지만 웹 응답값에는 존재하지 않는다.</p>\n\n<p>결과창을 보면 nil로 들어가있다. 타입이 옵셔널 스트링이기때문에 가능하다!</p>\n\n<h3 id=\"옵셔널이-아닐경우\">옵셔널이 아닐경우</h3>\n\n<p>우선 구조체 정보와 웹 정보가 일치할 경우를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img27.png\" alt=\"\" /></p>\n\n<p>사용할때 !나 ? 붙여주지 않는다는 점 외엔 보다싶히 결과는 똑같다</p>\n\n<p>하지만, 데이터가 없거나 타입이 틀렸을 경우엔?</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 데이터가 없을 경우 (옵셔널x)\n- The data couldn’t be read because it is missing.\n2. 타입이 틀릴 경우 (옵셔널x)\n- The data couldn’t be read because it isn’t in the correct format.\n</code></pre></div></div>\n\n<p>이와 같이 콘솔창에 찍히게 된다. 1번의 경우 옵셔널이었을땐 nil로 찍혔다. 따라서, 옵셔널로 가는게 여러모로 장점이 더 있는 것 같다.</p>\n\n<p>마무리로 결과를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-21/img28.png\" alt=\"\" /></p>\n\n<p>ps.</p>\n\n<p>얘기가 생각보다 길어졌다, Part1,2로 나눌것 그랬나?</p>\n\n"
      } ,
   
      {
        "title"    : "UIButton과 클래스",
        "category" : "",
        "tags"     : " swift, class, UIButton, Enum. CustomClass",
        "url"      : "/2018/07/15/swift-UIButton-%EA%B3%BC-Class.html",
        "date"     : "July 15, 2018",
        "excerpt"  : "<p>이번의 주제는 클래스를 좀 더 잘써보기 위한 글이다\n<!--more-->\n디자인적 요소에서 class를 효율적으로 사용해보자</p>\n\n<p>지금하는 프로젝트도 그렇고 어디서든  디자이너는 있다. 개인 프로젝트도 본인이 디자이너인것이다. 물론 퀄리티 차이는 어마어마하다.</p>\n\n<p>그런데 디자이너건 개인프로젝트건 사용하는 것중에 반복 되는 요소는 있기마련이다.\n예를 들자면 <code class=\"highlighter-rouge\">저...",
        "content"  : "<p>이번의 주제는 클래스를 좀 더 잘써보기 위한 글이다\n<!--more-->\n디자인적 요소에서 class를 효율적으로 사용해보자</p>\n\n<p>지금하는 프로젝트도 그렇고 어디서든  디자이너는 있다. 개인 프로젝트도 본인이 디자이너인것이다. 물론 퀄리티 차이는 어마어마하다.</p>\n\n<p>그런데 디자이너건 개인프로젝트건 사용하는 것중에 반복 되는 요소는 있기마련이다.\n예를 들자면 <code class=\"highlighter-rouge\">저장</code> 같은 버튼?\n통일성도 있을 뿐더러 시간 절약도 되는 것 같다.</p>\n\n<p>이번에도 이전글과 같이 <strong>아!! 이렇게 쓰면 좋겠네!</strong> 하는 경우이다<br /><a href=\"https://jiseobkim.github.io/2018/07/08/swift-class,struct-%EA%B0%92-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D-%EC%B0%A8%EC%9D%B4.html\">이전글: Class, Struct 값 전달 방식이 다른건 알지만 언제쓰지?</a></p>\n\n<p>다루게 내용은 다음과 같다</p>\n<ol>\n  <li>Class 없이 구현</li>\n  <li>Class 사용하여 구현</li>\n  <li>Class의 상속 이용</li>\n</ol>\n\n<p>오늘은 Play Grounds 말고 Xcode가 사용된다.</p>\n\n<p>우선 화면을 보자,\n<img src=\"/assets/img/post/2018-07-15/img1.png\" alt=\"\" />\n(왼쪽부터)</p>\n<ol>\n  <li>네비게이션바</li>\n  <li>메인 화면 - 버튼 선택 -&gt; 입력화면으로 이동</li>\n  <li>입력 화면 - 텍스트 필드 입력 후 저장 -&gt; 메인으로 이동</li>\n</ol>\n\n<p>구성은 오늘도 심플하다.</p>\n\n<p>여담으로 Xcode가 다크모드인것은 WWDC 2018에서 발표한 새로운 macOS인 Mojave에서 지원하는 다크모드이다! 다크모드 발표때 개발자들 환호성이 제일 크게 들렸던 것 같다. 현재 베타에서만 사용 가능하다.</p>\n\n<p>여기서 추가적으로 Xcode beta 10버전에서 오브젝트 라이브러리의 위치가 바뀌었다!</p>\n\n<p>(Xcode9)\n<img src=\"/assets/img/post/2018-07-15/img2.png\" alt=\"\" />\n기존의 위치는 위 사진 처럼 빨간색 영역이 오브젝트 라이브러리 이다.</p>\n\n<p>바뀐 위치를 보자\n(Xcode10 베타)\n<img src=\"/assets/img/post/2018-07-15/img3.png\" alt=\"\" />\n다음과 같다. 기존의 영역은 비어있고. 저렇게 새로운 창으로 영역이 바뀌었다.<br />\n(단축키 : <code class=\"highlighter-rouge\">Shift - option - L</code>)<br />\n(* bear 글쓰기 프로그램에 Xcode 10 베타 코드 복붙하면 이상해서 다시 9로 사용 .. ㅠㅠ)</p>\n\n<p>다시 본론으로 돌아가서</p>\n\n<p>주목해야할 부분은 <code class=\"highlighter-rouge\">저장</code> 버튼이다.</p>\n\n<h2 id=\"기획자-textfield가-글자-있는지-없는지에-따라저장-버튼-비활성화활성화로-해주세요\">기획자: TextField가 글자 있는지 없는지에 따라,<br />저장 버튼 비활성화/활성화로 해주세요.</h2>\n\n<p>이런 경우는 많고 많은 앱들에서도 보인다.</p>\n\n<p>여기서 추가 조건</p>\n\n<h2 id=\"디자이너-비활성화-색은-회색-활성화-색은-기본-파란색이요\">디자이너: 비활성화 색은 회색, 활성화 색은 기본 파란색이요</h2>\n<p>디자이너의 요구사항이라 가정하자.</p>\n\n<p>그럼 요약하자면</p>\n<ol>\n  <li>글자 입력됨 - 기본색, 활성화</li>\n  <li>글자 입력 안됨 - 회색, 비활성화</li>\n</ol>\n\n<p>(기본 화면)\n<img src=\"/assets/img/post/2018-07-15/img4.png\" alt=\"\" /></p>\n\n<h2 id=\"1-class-없이-구현\">1. Class 없이 구현</h2>\n<p>어디서 또는 어떻게 처리할지 부터 보면,</p>\n<ol>\n  <li>화면 진입시, 비활성화 상태 - viewDidLoad()</li>\n  <li>글자 입력시 - (TextField의 Editing Changed 사용)</li>\n</ol>\n\n<p>1을 코드로 하면 다음과 같다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span>\n<span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"o\">*//</span> <span class=\"mi\">1</span><span class=\"o\">.</span> <span class=\"n\">반응</span> <span class=\"n\">없게</span> <span class=\"n\">비활성화</span><span class=\"o\">*</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"o\">*//</span> <span class=\"mi\">2</span><span class=\"o\">.</span> <span class=\"n\">회색으로</span> <span class=\"n\">변경</span><span class=\"o\">*</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/post/2018-07-15/img5.png\" alt=\"\" /></p>\n\n<p>아주 아주 간단하다. 그럼 바로 이어서 2번째 조건</p>\n\n<p>Conection Inspector 에서</p>\n\n<p>연결은 먼저 하고\n<img src=\"/assets/img/post/2018-07-15/img6.png\" alt=\"\" /></p>\n\n<p>코드</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 조건: 글자가 비어있는가??</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 글자</span>\n            <span class=\"c1\">// 1. 반응 없게 비활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n            <span class=\"c1\">// 2. 회색으로 변경</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 글자 o</span>\n            <span class=\"c1\">// 1. 활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            <span class=\"c1\">// 2. 기본 색으로 변경</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"k\">self</span><span class=\"o\">**.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">tintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이것도 아주 간단하다.</p>\n\n<p>그렇지만 같은 코드가 계속 반복 된다.</p>\n\n<p>마음에 안드니 함수로 빼주자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-15/img7.png\" alt=\"\" /></p>\n\n<p>훨씬 깔끔하다.</p>\n\n<p>솔직히 이렇게만 끝내면 Class가 왜필요해? 라고 할 수 있다.\n그런데 위의 활성,비활성화를 함수로 만든 이유를 다시 생각해보자.</p>\n<ul>\n  <li>같은 코드가  반복된다</li>\n  <li>정리 안하면 코드가 지저분해 보인다.</li>\n  <li>만약 1개라도 변경하면 모든 부분을 찾아 바꿔야한다</li>\n</ul>\n\n<p>여기서 솔직하게 2번째 부분은 뭐 그러려니 할수있다. 그치만 1,3번 문제가 정말 크다\n1번 때문에 3번이 발생하는 것인데, 지금이 화면이 1개라 그렇지 많다고 하면 끔찍하다</p>\n\n<h2 id=\"화면이-1개가-아니라면\">화면이 1개가 아니라면?</h2>\n<p>만약에 입력해야할 화면이 1개가 아니고</p>\n<ol>\n  <li>이름 입력</li>\n  <li>이메일 입력</li>\n  <li>전화번호 입력\n<img src=\"/assets/img/post/2018-07-15/img8.png\" alt=\"\" /></li>\n</ol>\n\n<p>위처럼 입력 화면이 여러개일 경우 어떻게 할 것인가?</p>\n\n<p>각 UIVIewController 클래스 마다 함수를 만들것인가??\n그럼 다시 똑같은 문제가 발생한다.</p>\n<ul>\n  <li>같은 코드가  반복된다</li>\n  <li>정리 안하면 코드가 지저분해 보인다.</li>\n  <li>만약 1개라도 변경하면 모든 부분을 찾아 바꿔야한다</li>\n</ul>\n\n<p>그렇다면 어떻게 할까?\n방법은 2가지 정도 생각이 난다</p>\n<ol>\n  <li>Util 클래스를 만들어서 그안에 함수를 만들고 공통적으로 호출한다. (관리하기 편하게 Util에 모음)</li>\n  <li>UIButton을 상속한 클래스를 만들어서 사용한다.</li>\n</ol>\n\n<p>둘은 비슷하다.  차이가 있다면 기능은 같지만 <strong>약간의 차이점이 있는 버튼</strong> 을 만들어야한다면 차이가 발생한다.</p>\n\n<p>예를 들어 아래 사진을 보자\n<img src=\"/assets/img/post/2018-07-15/img9.png\" alt=\"\" />\n새로운 버튼이 생겼다. 저장 후 메인으로 돌아가는 버튼이다.\n기능은 동일하다고 했을때 차이점이 있다.</p>\n<ul>\n  <li>배경색</li>\n  <li>cornerRadius가 있다.</li>\n</ul>\n\n<p>기존 문제였던 바뀌었을 경우 어떻게 할것인가? 와는 다른 문제다.\n왜냐면 함수 내에것을 바꾸면 모두 바뀌지만 이건 성격이 좀 다른애가 생긴거니깐,</p>\n\n<p>물론 인자를 받아서 다르게 처리 할수는 있다!\n그렇지만 클래스의 상속을 이용한다면 더 편하게 할 수 있다.</p>\n\n<h1 id=\"class-사용하여-구현\">Class 사용하여 구현</h1>\n<p>우선 가장 기본이 되는 버튼의 클래스를 만들어보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 1. 스토리보드로 버튼 구현시</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 2. 코드로 버튼을 구현시</span>\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">UIButton</code>을 상속 받은 클래스이다.\n2가지 초기화 구문이 있다.\n위에 주석을 달아 놓은듯이\n<br />1은 스토리보드에서 버튼을 추가할경우 사용될 init 구문\n<br />2는 코드로 구현할시 사용</p>\n\n<p>1을 이용해서도 코드로 짤수는 있지만 해당부분은 아직 필자도 잘모르는 영역</p>\n\n<p>우리가 이용할 상태를 enum을 이용해서 표현해보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 버튼 상태 종류</span>\n    <span class=\"kd\">enum</span> <span class=\"n\">btnState</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">On</span>\n        <span class=\"k\">case</span> <span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 기본 값 = off 상태</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"n\">btnState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n\n    <span class=\"c1\">// on 컬러</span>\n    <span class=\"k\">var</span> <span class=\"nv\">onTintColor</span><span class=\"p\">:</span> <span class=\"kt\">UIColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"p\">(</span><span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"mi\">122</span><span class=\"o\">/</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nv\">alpha</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// off 컬러</span>\n    <span class=\"k\">var</span> <span class=\"nv\">offTintColor</span><span class=\"p\">:</span> <span class=\"kt\">UIColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">gray</span>\n\n<span class=\"c1\">// ----------- 기존 코드</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>기존 클래스에서 추가되었다. enum을 요즘 자주 이용하는데, 딱 필요한 케이스들만 나열하여, 다른 값을 방지할 수 있으며, switch문과 같이 쓰면 굉장히 좋다. 추가적으로 컬러값도 지정해놓았다.</p>\n\n<p>그럼 이제  셋팅을 해보자</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">DefaultBtn</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 버튼 상태 종류</span>\n    <span class=\"kd\">enum</span> <span class=\"n\">btnState</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">On</span>\n        <span class=\"k\">case</span> <span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 기본 값 = off 상태</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"n\">btnState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span> <span class=\"p\">{</span>\n        <span class=\"k\">didSet</span> <span class=\"p\">{</span>\n            <span class=\"nf\">setting</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n\t  <span class=\"c1\">//.. 컬러변수 생략</span>\n    <span class=\"c1\">// 1. 스토리보드로 버튼 구현시</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 기본 셋팅</span>\n        <span class=\"nf\">setting</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 2. 코드로 버튼을 구현시</span>\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 기본 셋팅</span>\n        <span class=\"nf\">setting</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"kd\">func</span> <span class=\"nf\">setting</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// on 컬러 (기본색)</span>\n\n        <span class=\"k\">switch</span> <span class=\"n\">isOn</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kt\">On</span><span class=\"p\">:</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"n\">onTintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kt\">Off</span><span class=\"p\">:</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setTitleColor</span><span class=\"p\">(</span><span class=\"n\">offTintColor</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isUserInteractionEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>차이점은 세가지가 있다</p>\n<ol>\n  <li>setting() 함수가 생긴것</li>\n  <li>setting 함수가 init구문에 적용된것</li>\n  <li>isOn 변수에 didSet을 추가</li>\n</ol>\n\n<p>설명이 필요한건 3번만 설명하면 될 것 같다, 3번 didSet의 경우 해당 변수기 초기화 되었을때,  호출되는 내용이다. 이것도 잘 활용하면 장점이 많다.</p>\n\n<p>뭔가 보기엔 <strong>뭐야? 오히려 더 힘든데?</strong> 할수 있다, 그렇지만 처음에 셋팅만 어렵지 사용은 아주 간단하다.</p>\n\n<p>우선 버튼에 클래스를 넣어주고\n<img src=\"/assets/img/post/2018-07-15/img10.png\" alt=\"\" />\nIBOutlet도 변경</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//@IBOutlet var btnSave: UIButton!</span>\n<span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">AnotherBUtton</span><span class=\"o\">!</span>\n</code></pre></div></div>\n\n<p>그럼 이제 사용해보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AddNameViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span><span class=\"o\">!</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"c1\">// 버튼 비활성화</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 조건: 글자가 비어있는가??</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 버튼 비활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 버튼 활성화</span>\n            <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">On</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>심플의 끝이다. 마음에 평화가 찾아온다….</p>\n\n<p>물론 전역 함수로해도 한줄로 하면 끝이긴 하지만 위에 말했듯이 차이점이 있다.\n그리고 enum을 써서 가독성도 훨씬 좋다. 사용성도 좋다, 아래 사진처럼 .을 누르면 알아서 나오니깐 다른곳에서도 적절히 잘 사용하자.\n<img src=\"/assets/img/post/2018-07-15/img11.png\" alt=\"\" /></p>\n\n<p>그렇담 아까 문제가 되었던 활성/ 비활성은 같으나 특성이 다른것은 어떻게 구현을 할까?</p>\n\n<h1 id=\"class-상속을-사용하여-구현\">Class 상속을 사용하여 구현</h1>\n<p>아까 만들어둔 클래스를 상속하는 클래스를 만들고 override를 이용하는 것이 결론이다.</p>\n\n<p>만약 전역 함수나 Util 클래스를 생성해서 거기다가 함수를 만들어서 사용한다면</p>\n<ol>\n  <li>오버로드를 이용해서 같은 이름의 함수를 여러개 만든다</li>\n  <li>인자값에 따라 다르게 처리되게 한다\n라던가, 뭐 방식은 있다. 그렇지만 가독성도 안좋다!</li>\n</ol>\n\n<p>배경색과 cornerRadius이 첨가된 활성/비활성 버튼 클래스를 만들어보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">BtnWithBackGroundColor</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span> <span class=\"p\">{</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 새로운 조건</span>\n        <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 새로운 조건</span>\n        <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">green</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>처음에 만든 클래스보다 굉장히 간단하다. 내가 새로 필요한것만 override 해주고\n기존것은 그대로 가져다 쓴다.</p>\n\n<p>사용법은? 같다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AddNameViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave</span><span class=\"p\">:</span> <span class=\"kt\">DefaultBtn</span><span class=\"o\">!</span>\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">var</span> <span class=\"nv\">btnSave2</span><span class=\"p\">:</span> <span class=\"kt\">BtnWithBackGroundColor</span><span class=\"o\">!</span>\n\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"c1\">// 버튼 비활성화</span>\n        <span class=\"n\">btnSave</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"kd\">@IBAction</span> <span class=\"kd\">func</span> <span class=\"nf\">editChanged</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// 기존 생략..</span>\n\n        <span class=\"c1\">// 배경색 있는 버튼</span>\n        <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n            <span class=\"n\">btnSave2</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">Off</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">btnSave2</span><span class=\"o\">.</span><span class=\"n\">isOn</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kt\">On</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>실행 사진은? 잘나온다\n<img src=\"/assets/img/post/2018-07-15/img12.png\" alt=\"\" /></p>\n\n<h2 id=\"디자이너-저장후-메인-가는-버튼-글자-크기는-볼드17로-글자색은-비활성흰색-활성-빨간색으로-변경해주세요\">디자이너: 저장후 메인 가는 버튼 글자 크기는 볼드17로, 글자색은 비활성:흰색, 활성: 빨간색으로 변경해주세요</h2>\n\n<p>이럴 경우 어떻게 하면 되는가!</p>\n\n<p><code class=\"highlighter-rouge\">BtnWithBackGroundColor</code> 클래스의 <code class=\"highlighter-rouge\">addSomeThing()</code> 만 손보면 된다</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">addSomeThing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">green</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"c1\">// 추가 요청</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">titleLabel</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"kt\">UIFont</span><span class=\"o\">.</span><span class=\"nf\">boldSystemFont</span><span class=\"p\">(</span><span class=\"nv\">ofSize</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">)</span> <span class=\"c1\">// 폰트 볼드 및 사이즈 17</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">offTintColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">white</span> <span class=\"c1\">// off 컬러 흰색</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">onTintColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"c1\">// on 컬러 레드</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setting</span><span class=\"p\">()</span> <span class=\"c1\">// 바뀐것으로 셋팅 !</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>저렇게만 추가해주면 아래 사진처럼 바뀐게 나오게 된다!\n저기만 손보고 여러곳의 버튼들을 한꺼번에 수정이 된다니 너무좋다.</p>\n\n<p>다만 이해 안될 소지가 있는건  <code class=\"highlighter-rouge\">self.setting()</code>인데, 저것을 안해주면 컬러값이 안변한다. 저 변수들은 setting()에서 사용이 되는데, init 구문에서 부모클래스가 사용을 하고 바뀐 값으론 사용이 안되었기 때문이다!</p>\n\n<p><img src=\"/assets/img/post/2018-07-15/img13.png\" alt=\"\" /></p>\n\n<p>만약 여러가지 복합 적으로 추가할 경우에도 크게 다르지 않지만 만들기 편함과 유지보수 면에서도 굉장히 편리하게 진행할 수 있다.</p>\n\n<p>이렇게 해두면, 요청으로 인해서 변경할때도 한꺼번에 변경 및 수정이 가능하니\n필요한곳에 잘사용하면 좋을 것 같다!</p>\n\n<p>정말 심플한 예제로 시작을 하였고, 아직 복잡한 곳엔 많이 이용안해봤지만\n좀더 쓸곳을 찾아봐야겠다.</p>\n"
      } ,
   
      {
        "title"    : "Class, Struct 값 전달 방식이 &lt;br&gt; 다른건 알지만 언제쓰지?",
        "category" : "",
        "tags"     : " swift, class, struct",
        "url"      : "/2018/07/08/swift-class,struct-%EA%B0%92-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D-%EC%B0%A8%EC%9D%B4.html",
        "date"     : "July 8, 2018",
        "excerpt"  : "<h3 id=\"swift---값에-의한-전달-그리고-참조에-의한-전달\">Swift - 값에 의한 전달 그리고 참조에 의한 전달</h3>\n\n<!--more-->\n\n<p><br /></p>\n<h2 id=\"차이가-있다는건-나도-안다-그치만-언제-쓸모가-다를지-모르겠다\">차이가 있다는건 나도 안다! 그치만 언제 쓸모가 다를지 모르겠다.</h2>\n<p>마치 고등학교때 배운 미적분 마냥, 배우긴 했지만 어떻게 써먹어야할지 애매했다.</p>\n\n<p>많...",
        "content"  : "<h3 id=\"swift---값에-의한-전달-그리고-참조에-의한-전달\">Swift - 값에 의한 전달 그리고 참조에 의한 전달</h3>\n\n<!--more-->\n\n<p><br /></p>\n<h2 id=\"차이가-있다는건-나도-안다-그치만-언제-쓸모가-다를지-모르겠다\">차이가 있다는건 나도 안다! 그치만 언제 쓸모가 다를지 모르겠다.</h2>\n<p>마치 고등학교때 배운 미적분 마냥, 배우긴 했지만 어떻게 써먹어야할지 애매했다.</p>\n\n<p>많은 책에서 중요하게 다루는 구조체와 클래스,</p>\n\n<p>다르다는 설명은 많다. 전달 방식에 따라 다른 것 외에도 차이점은 많지만</p>\n\n<p>개발 경력이 얼마 안되서 그런지 실제로 다르게 써야한다고 느낀적이 없었다…</p>\n\n<p>둘이 비슷한정도로만 사용했던 것 같다.</p>\n\n<p>그런데! 개발하다가 <strong>아!! 이때 필요하겠는데?</strong> 라고 최근에 느꼈다.</p>\n\n<p>비스무리한 예를 들어서 포스팅을 해야겠다.</p>\n\n<p>중점은 값을 전달 하는것과 주소 값를 전달 하는것에 맞춰서!</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"예시-구조\">예시 구조</h2>\n<p>학교라는 틀에서 설명을 해보려고한다.</p>\n\n<blockquote>\n  <p>학교 : ( 학교 이름 / 학년 리스트 )\n<br />\n학년 : ( 학년 이름 / 반 리스트 )\n<br />\n반 : ( 반 이름 / 학생 리스트 )\n<br />\n학생 정보 : ( 이름 / 번호 )</p>\n</blockquote>\n\n<p>이런식으로 상위 개념이 하위 개념들을 포함하고 있다고 가정을 하자.</p>\n\n<p>이를 코드로 표현을 해보자.</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"struct\">Struct</h2>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학생 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">StudentInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"c1\">// 학생 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>  <span class=\"c1\">// 학생 번호</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 반 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">ClassInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">className</span><span class=\"p\">:</span> <span class=\"kt\">String</span>           <span class=\"c1\">// 반 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">studentList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">StudentInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 반내의 학생들 리스트(배열)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 학년 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">GradeInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학년 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">classList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">ClassInfo</span><span class=\"p\">]</span> <span class=\"c1\">// 학년내의 반 리스트</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 학교 정보</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">SchoolInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학교 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GradeInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 학교내의 학년 리스트</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>우선, 여기서 포인트는 모두 <strong>Struct(구조체)</strong> 로 만들었다는 점이다!</p>\n\n<p>간단하니 바로 이어서 선언과 초기화로!</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"선언-및-초기화\">선언 및 초기화</h2>\n<p>구조상 학교/학년/반/학생이 너무 많으면 헷갈릴테니 아래처럼 심플하게 구성</p>\n<ul>\n  <li>학교.학년,반: 1개</li>\n  <li>학생 : 2명</li>\n</ul>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학생 2명!</span>\n<span class=\"k\">var</span> <span class=\"nv\">student1</span> <span class=\"o\">=</span> <span class=\"kt\">StudentInfo</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"student 1\"</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">var</span> <span class=\"nv\">student2</span> <span class=\"o\">=</span> <span class=\"kt\">StudentInfo</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"student 2\"</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 반 1개! (2명의 학생을 가지고 있다.)</span>\n<span class=\"k\">var</span> <span class=\"nv\">class1</span> <span class=\"o\">=</span> <span class=\"kt\">ClassInfo</span><span class=\"p\">(</span><span class=\"nv\">className</span><span class=\"p\">:</span> <span class=\"s\">\"class 1\"</span><span class=\"p\">,</span> <span class=\"nv\">studentList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">student1</span><span class=\"p\">,</span><span class=\"n\">student2</span><span class=\"p\">])</span>\n\n<span class=\"c1\">// 학년 1개! (1개의 반만 가지고 있고)</span>\n<span class=\"k\">var</span> <span class=\"nv\">grade1</span> <span class=\"o\">=</span> <span class=\"kt\">GradeInfo</span><span class=\"p\">(</span><span class=\"nv\">gradeName</span><span class=\"p\">:</span> <span class=\"s\">\"grade 1\"</span><span class=\"p\">,</span> <span class=\"nv\">classList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">class1</span><span class=\"p\">])</span>\n\n<span class=\"c1\">// 학교 1개! (역시 1개의 학년만 가지고 있다.)</span>\n<span class=\"k\">var</span> <span class=\"nv\">school1</span> <span class=\"o\">=</span> <span class=\"kt\">SchoolInfo</span><span class=\"p\">(</span><span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"s\">\"school 1\"</span><span class=\"p\">,</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">grade1</span><span class=\"p\">])</span>\n\n</code></pre></div></div>\n\n<p>첫번째 상황은 간단하게 내부 구조를 파헤치는 것을 시도해보는 정도로 삼아 간단하게 해보자.</p>\n\n<p><br /><br /></p>\n\n<h1 id=\"상황-1\">상황 1:</h1>\n<h2 id=\"js씨-모든-학생의-이름을--따로-배열로-만들어주세요\">JS씨 모든 학생의 이름을 <br /> 따로 배열로 만들어주세요!</h2>\n\n<p>내부를 순회하는 방법 중 무난한 2개로 가보자.</p>\n<ol>\n  <li>for문</li>\n  <li>forEach문 (closer 사용)</li>\n</ol>\n\n<p>1은 많은 사람들이 기본적으로 사용하겠지만 2의 경우 이해하면 쉽지만 다소 낯설은 감이 있다.</p>\n\n<p>하지만 익숙해지고 forEach를 종종 쓰게 되었다.</p>\n\n<p>익숙한것부터!</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">nameList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>2중에 3중까지,,, 심플해서 다행이다.\n일단 결과값을 보자.</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 1.png\" alt=\"\" /></p>\n\n<p>학생1과 학생2가 잘들어갔다.</p>\n\n<p>그럼, 필자가 좋아하는 forEach 를 사용해보자.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n        <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>아 좋다. 훨씬 심플하다. 필요한것만 있는 느낌, 마음이 편해진다. (개인취향)</p>\n\n<p>하지만 이건 스위프트 언어 특징인 <code class=\"highlighter-rouge\">타입 추론</code> 이라는 것 덕분에 심플해보인다.</p>\n\n<p>타입추론을 이용하여 ‘어차피 너는 정해져있어’ 하는 애들을 생략한 것이다.</p>\n\n<p>그렇다면 타입 추론 사용을 안한다면?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 생략 x</span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">(</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">row1</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">({</span> <span class=\"p\">(</span><span class=\"n\">row2</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n        <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"nf\">forEach</span><span class=\"p\">({</span> <span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n            <span class=\"n\">nameList</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>별로다. 괄호가 너무 많아서 별로다.</p>\n\n<p>여기선 row에 관해서만 생략이 되었다.</p>\n\n<p>뭘 어떻게 생략했는지, 아니면 관심이 더간다면 <strong>클로저</strong> 검색!</p>\n\n<p>얘기가 잠시 딴길로 샜다. (그치만 클로저란 좋은것)</p>\n\n<p>이 포스팅의 목적이었던, struct와 class 로 돌아가자</p>\n\n<p>이번엔 구조체와 클래스의 차이점을 확실히 보게 될 상황으로 가보자.</p>\n\n<p>책에서 많이 봤을 내용이다.</p>\n<ul>\n  <li>클래스: 주소 정보를 전달</li>\n  <li>구조체: 값을 전달</li>\n</ul>\n\n<p>많이 봤다, 분명히 봤다, 그치만 몰랐다, 언제 써야해?</p>\n\n<p>상황으로 가보자</p>\n\n<p><br /><br /></p>\n\n<h1 id=\"상황-2\">상황 2.</h1>\n<h2 id=\"js씨-학생들-번호가-0부터-시작했어요-전부-1씩-더해야해요\">JS씨 학생들 번호가 0부터 시작했어요, <br />전부 1씩 더해야해요</h2>\n\n<p>음 말이 안되는 상황이지만? 이해가 쉽게 개발자가 배열 0번부터 시작해서 나온 귀여운 실수로 가정 해보자.</p>\n\n<p>위에서 이름 추가하는 부분을 살짝 바꾸자\n익숙한 for문으로 한다면?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>row3에서 해당을 순서에서 row3.number 값을 +1만 해주면 될까?</p>\n\n<p>결과를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 2.png\" alt=\"\" /></p>\n\n<p>세상에나.. Play Grounds에선 친절하게 한글로 나온다.</p>\n\n<p>근데, 중요한건 에러가 난다는 것이다.  $0은 변경할 수 없다고 한다.</p>\n\n<p>그렇다면 값을 바꾸고 싶다면 어떻게 해야할까?</p>\n\n<p>위에 문법에선 몇번째인지 모른다. row1,2,3의순서가 필요하다</p>\n\n<p>그렇담 이렇게?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n            <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">row2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>아아아… 끔찍하다. 최악이다. 너무 싫다.\n결과는 제대로 나왔나???\n<img src=\"/assets/img/post/2018-07-08/image 3.png\" alt=\"\" />\n제대로 나왔다.\n위의 사진에서 프린트 문을 실행한 결과 박스를 보자\n값이 다르다</p>\n\n<p>1번 학생에 대해 보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1. 값 0</span>\n<span class=\"n\">student1</span><span class=\"o\">.</span><span class=\"n\">number</span>\n\n<span class=\"c1\">// 2. 값 1  </span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span>\n</code></pre></div></div>\n<p>분명 학생 리스트에 0번 학생 정보는 student1이었다. 근데 왜 값이 다를까?</p>\n\n<p>이는 위에 말했듯이 <strong>구조체</strong> 이기 때문이다.</p>\n\n<p>구조체는 값에 의한 전달이기 때문에 값을 카피를 한다.</p>\n\n<p>따라서, 주석 번호 1과 2는 별개의 존재이다</p>\n\n<p>코드상 school1에 값을 더했기 때문에\n첫번째 줄은 0이고, 두번째 줄은 1이다</p>\n\n<p>근데 위에 for문은 너무 최악이다. 너무 싫다\n배열의 enumerate()라는 메소드가 딱이다.\n일단 코드를 보자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">row1</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">row2</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span> <span class=\"n\">row3</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">(){</span>           \n <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"p\">[</span><span class=\"n\">x3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>오.. 좋다.. 마음에 평화가 오기  시작한다</p>\n\n<blockquote>\n  <p>간단하게 enumerate()에 대해 설명하자면,\n<br />- x :현재 카운트 번호\n<br />- row : 현재 데이터\n<br />라고 생각하자.  그래서 값을 넣을때 각 자리에 x1,x2,x3를 넣어주는 것이다.\n<br />그리고 +1 row3.number에 +1을 하는것이고!\n<br />but. value += 1 이런 방식이면 더 깔끔\n<br />( 이해가 안된다면 천천이 읽어보자.)</p>\n</blockquote>\n\n<p>row -&gt; 현재 데이터<br />\n라고 생각하자.  그래서 값을 넣을때 각 자리에 x1,x2,x3를 넣어주는 것이다.<br />\n그리고 +1 row3.number에 +1을 하는것이고!\nbut. value += 1 이런 방식이면 더 깔끔\n( 이해가 안된다면 천천이 읽어보자.)</p>\n\n<p>그치만 역시나 아쉽다. 값 넣는 부분이 맘에 들지 않는다.</p>\n\n<p>값에 의한 전달이기 때문에 아쉽다. struct라서 아쉽다.</p>\n\n<p><br /><br /></p>\n\n<h3 id=\"그렇다면-주소값을-전달하는-class라면\">그렇다면, 주소값을 전달하는 class라면?</h3>\n\n<p>데이터 변경 예정인 <code class=\"highlighter-rouge\">학생 정보</code>  구조체만 클래스로 바꾸자</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 학교 정보</span>\n<span class=\"kd\">class</span> <span class=\"kt\">SchoolInfo</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">schoolName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>      <span class=\"c1\">// 학교 이름</span>\n    <span class=\"k\">var</span> <span class=\"nv\">gradeList</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GradeInfo</span><span class=\"p\">]</span>  <span class=\"c1\">// 학교내의 학년 리스트</span>\n\n    <span class=\"c1\">// 초기화 구문</span>\n    <span class=\"nf\">init</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">){</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>클래스에선 구조체와 달리 초기값이 필요하다! 그래서 <code class=\"highlighter-rouge\">init</code> 부분을 넣고!</p>\n\n<p>아까 오류 났던 문법을 다시 보자.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row1</span> <span class=\"k\">in</span> <span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"n\">row2</span> <span class=\"k\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">classList</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"n\">row3</span> <span class=\"k\">in</span> <span class=\"n\">row2</span><span class=\"o\">.</span><span class=\"n\">studentList</span> <span class=\"p\">{</span>\n            <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">row3</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 문법의 결과는???</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 4.png\" alt=\"\" /></p>\n\n<p>짜잔~ 오른쪽에 2x가 보인다. 학생은 2명이니깐 2번 돌았다는 것이다.</p>\n\n<p>코드 실행이 성공했다!  깔끔해!</p>\n\n<p>그럼 결과를 보자</p>\n\n<p><img src=\"/assets/img/post/2018-07-08/image 5.png\" alt=\"\" /></p>\n\n<p>차이점이 보인다.\n아까의 결과는 1,2번줄 결과는 분명 초기 값인 0과 1이었다.</p>\n\n<p>그런데, 지금은 school1에 +1 씩 한값으로 변경이 되었다.</p>\n\n<p>클래스는 참조에 의한 전달이니깐 주소로 찾아가서 원본 값을 바꿔준것이다!</p>\n\n<p><br /><br /></p>\n<h3 id=\"ps\">ps.</h3>\n<p>말로만 듣던\n클래스는 참조에 의한 전달\n구조체는 값에 의한 전달</p>\n\n<p>언제 다르게 써먹을 수 있을지 생각하고 사용할 수 있는 케이스였다.</p>\n\n<p>어디선간 그런말을 들었다. 뭐 여러 가지 이유는 있었지만\n참조에 의한 전달이 아닐땐 구조체를 쓰자~라는?</p>\n\n<p>이번 케이스를 통해 나눌 필요성을 느꼈다.\n하지만 아직 부족하다 좀더 여러케이스가 필요하다.</p>\n\n<p>아참 나는 forEach문 클로저 사용 하는게 더 좋으니깐 이것도 첨부</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// number에 1씩 더하기</span>\n<span class=\"n\">school1</span><span class=\"o\">.</span><span class=\"n\">gradeList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">classList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n        <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">studentList</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Peace!</p>\n"
      } 
   ,
   
     {
       
          "title"    : "MemCoo",
          "category" : "",
          "tags"     : " portfolio",
          "url"      : "/portfolio/memcoo",
          "date"     : "July 1, 2018",
          "excerpt"  : null,
          "content"  : null
       
     } 
   
  
]